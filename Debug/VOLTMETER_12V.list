
VOLTMETER_12V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007bd0  08007bd0  00017bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ffc  08007ffc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ffc  08007ffc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000110  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf32  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b30  00000000  00000000  0002c13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000868  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002160f  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d39c  00000000  00000000  00050407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca946  00000000  00000000  0005d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001280e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035d0  00000000  00000000  0012813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bb8 	.word	0x08007bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007bb8 	.word	0x08007bb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LCD_STROBE>:
//
// Send clock pulse to the LCD
//

void LCD_STROBE()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LCD_EN,GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f001 ffea 	bl	8002b9c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 fc8b 	bl	80014e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,LCD_EN,GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f001 ffe1 	bl	8002b9c <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 fc82 	bl	80014e4 <HAL_Delay>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <lcd_write_cmd>:

//
// Send a command to the LCD
//
void lcd_write_cmd(unsigned char c)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	unsigned int d;
	d = c;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	60fb      	str	r3, [r7, #12]
	d = (d << 4) & 0x0F00;								// Extract upper nibble
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000bfa:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR = d;										// Output to GPIOA
 8000bfc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// Clear RS
 8000c04:	2200      	movs	r2, #0
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f001 ffc6 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_STROBE();										// Clock enable bit
 8000c10:	f7ff ffd2 	bl	8000bb8 <LCD_STROBE>
	d = c;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	60fb      	str	r3, [r7, #12]
	d = (d << 8) & 0x0F00;								// Extract lower nibble
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c20:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR = d;										// Output to GPIOA
 8000c22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// Clear RS
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f001 ffb3 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_STROBE();										// Clock enable bit
 8000c36:	f7ff ffbf 	bl	8000bb8 <LCD_STROBE>
	HAL_Delay(0.1);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 fc52 	bl	80014e4 <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <lcd_write_data>:
//
// Send data to LCD
//

void lcd_write_data(unsigned char c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	unsigned int d;

	d = c;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	60fb      	str	r3, [r7, #12]
	d = (d << 4) & 0x0F00;								// Extract upper nibble
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c5e:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR = d;										// Output to GPIOA
 8000c60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// Set RS HIGH
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f001 ff94 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_STROBE();										// Clock enable bit
 8000c74:	f7ff ffa0 	bl	8000bb8 <LCD_STROBE>
	d = c;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	60fb      	str	r3, [r7, #12]
	d = (d << 8) & 0x0F00;								// Extract lower nibble
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c84:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR = d;										// Output to GPIOA
 8000c86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// Set RS HIGH
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f001 ff81 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_STROBE();
 8000c9a:	f7ff ff8d 	bl	8000bb8 <LCD_STROBE>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <lcd_clear>:
//
// Clear LCD
//

void lcd_clear(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
	lcd_write_cmd(0x1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff9a 	bl	8000be4 <lcd_write_cmd>
	HAL_Delay(5);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f000 fc17 	bl	80014e4 <HAL_Delay>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <lcd_puts>:

//
// Display text message on LCD
//
void lcd_puts(const char *s)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	while(*s)
 8000cc2:	e006      	b.n	8000cd2 <lcd_puts+0x18>
		lcd_write_data(*s++);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ffbb 	bl	8000c48 <lcd_write_data>
	while(*s)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f4      	bne.n	8000cc4 <lcd_puts+0xa>
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <lcd_goto>:

// Position the cursor at column, row
//

void lcd_goto(int col, int row)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	char address;
	if(row == 0) address = 0;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <lcd_goto+0x14>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
	if(row == 1) address = 0x40;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d101      	bne.n	8000d02 <lcd_goto+0x1e>
 8000cfe:	2340      	movs	r3, #64	; 0x40
 8000d00:	73fb      	strb	r3, [r7, #15]
	address += col - 1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(0x80 | address);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff63 	bl	8000be4 <lcd_write_cmd>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float mv;
	char buff[12];
	float Vref = 3280.0;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <main+0xa4>)
 8000d30:	61fb      	str	r3, [r7, #28]
	float k = Vref / 4095.0;
 8000d32:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000dd0 <main+0xa8>
 8000d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3e:	edc7 7a06 	vstr	s15, [r7, #24]
	float kr = 4.18; // partitore resistivo = 3.842 pile 9 V, fino max 12V, R2 3.27 kohm, R1 7 kohm
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <main+0xac>)
 8000d44:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fb67 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f84d 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f94d 	bl	8000fec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d52:	f000 f8ab 	bl	8000eac <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 f919 	bl	8000f8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d5a:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <main+0xb0>)
 8000d5c:	f000 fde0 	bl	8001920 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d60:	2164      	movs	r1, #100	; 0x64
 8000d62:	481d      	ldr	r0, [pc, #116]	; (8000dd8 <main+0xb0>)
 8000d64:	f000 fef2 	bl	8001b4c <HAL_ADC_PollForConversion>
	  adcResult = HAL_ADC_GetValue(&hadc1);
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <main+0xb0>)
 8000d6a:	f000 fff1 	bl	8001d50 <HAL_ADC_GetValue>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <main+0xb4>)
 8000d72:	6013      	str	r3, [r2, #0]
	  mv = ((float)adcResult) * k*kr;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <main+0xb4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d90:	edc7 7a04 	vstr	s15, [r7, #16]
	  lcd_clear();
 8000d94:	f7ff ff87 	bl	8000ca6 <lcd_clear>
	  lcd_puts("Voltmeter");
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <main+0xb8>)
 8000d9a:	f7ff ff8e 	bl	8000cba <lcd_puts>
	  lcd_goto(0, 1);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff9f 	bl	8000ce4 <lcd_goto>
	  sprintf(buff, "%8.2f", mv);
 8000da6:	6938      	ldr	r0, [r7, #16]
 8000da8:	f7ff fbd6 	bl	8000558 <__aeabi_f2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	1d38      	adds	r0, r7, #4
 8000db2:	490c      	ldr	r1, [pc, #48]	; (8000de4 <main+0xbc>)
 8000db4:	f004 fc86 	bl	80056c4 <siprintf>
	  //UART_SEND_TXT(&huart2, buff , 1);
	  //UART_SEND_FLT(&huart2, mv , 1);
	  lcd_puts(buff);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff7d 	bl	8000cba <lcd_puts>
	  HAL_Delay(1000);
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f000 fb8e 	bl	80014e4 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000dc8:	e7ca      	b.n	8000d60 <main+0x38>
 8000dca:	bf00      	nop
 8000dcc:	454d0000 	.word	0x454d0000
 8000dd0:	457ff000 	.word	0x457ff000
 8000dd4:	4085c28f 	.word	0x4085c28f
 8000dd8:	200001fc 	.word	0x200001fc
 8000ddc:	200001f8 	.word	0x200001f8
 8000de0:	08007bdc 	.word	0x08007bdc
 8000de4:	08007bd4 	.word	0x08007bd4

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0a6      	sub	sp, #152	; 0x98
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fff2 	bl	8004de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2258      	movs	r2, #88	; 0x58
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 ffe4 	bl	8004de0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fec0 	bl	8002bcc <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f90b 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fefe 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e7e:	f000 f8f5 	bl	800106c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000e82:	2382      	movs	r3, #130	; 0x82
 8000e84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 f924 	bl	80040e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e9e:	f000 f8e5 	bl	800106c <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3798      	adds	r7, #152	; 0x98
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f2a:	f000 faff 	bl	800152c <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f34:	f000 f89a 	bl	800106c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f44:	f001 f9fe 	bl	8002344 <HAL_ADCEx_MultiModeConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f4e:	f000 f88d 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f52:	2308      	movs	r3, #8
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0xdc>)
 8000f70:	f000 fefc 	bl	8001d6c <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f7a:	f000 f877 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001fc 	.word	0x200001fc

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_USART2_UART_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fd0:	f003 faa4 	bl	800451c <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 f847 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000024c 	.word	0x2000024c
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_GPIO_Init+0x7c>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_GPIO_Init+0x7c>)
 8001008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_GPIO_Init+0x7c>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_GPIO_Init+0x7c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_GPIO_Init+0x7c>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_GPIO_Init+0x7c>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 fdae 	bl	8002b9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001040:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8001044:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 fc14 	bl	8002888 <HAL_GPIO_Init>

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x44>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_MspInit+0x44>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_MspInit+0x44>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x44>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x44>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x44>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e0:	d123      	bne.n	800112a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_ADC_MspInit+0x74>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0x74>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_MspInit+0x74>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_ADC_MspInit+0x74>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_ADC_MspInit+0x74>)
 8001100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_ADC_MspInit+0x74>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001112:	2304      	movs	r3, #4
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <HAL_ADC_MspInit+0x78>)
 8001126:	f001 fbaf 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	48000800 	.word	0x48000800

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x80>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x80>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f001 fb6c 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f94a 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_kill>:

int _kill(int pid, int sig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800122e:	f003 fdad 	bl	8004d8c <__errno>
 8001232:	4603      	mov	r3, r0
 8001234:	2216      	movs	r2, #22
 8001236:	601a      	str	r2, [r3, #0]
  return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_exit>:

void _exit (int status)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffe7 	bl	8001224 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001256:	e7fe      	b.n	8001256 <_exit+0x12>

08001258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e00a      	b.n	8001280 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126a:	f3af 8000 	nop.w
 800126e:	4601      	mov	r1, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf0      	blt.n	800126a <_read+0x12>
  }

  return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e009      	b.n	80012b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf1      	blt.n	80012a4 <_write+0x12>
  }
  return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_close>:

int _close(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f2:	605a      	str	r2, [r3, #4]
  return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_isatty>:

int _isatty(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f003 fd12 	bl	8004d8c <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20010000 	.word	0x20010000
 8001394:	00000400 	.word	0x00000400
 8001398:	200002d4 	.word	0x200002d4
 800139c:	200002f0 	.word	0x200002f0

080013a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c8:	f7ff ffea 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <LoopForever+0xe>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e4:	4c0a      	ldr	r4, [pc, #40]	; (8001410 <LoopForever+0x16>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f003 fcd1 	bl	8004d98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f6:	f7ff fc97 	bl	8000d28 <main>

080013fa <LoopForever>:

LoopForever:
    b LoopForever
 80013fa:	e7fe      	b.n	80013fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001408:	08008004 	.word	0x08008004
  ldr r2, =_sbss
 800140c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001410:	200002ec 	.word	0x200002ec

08001414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC1_2_IRQHandler>
	...

08001418 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x28>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x28>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f001 f9f9 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fe20 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fa03 	bl	800286e <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f001 f9d9 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	200002d8 	.word	0x200002d8

080014cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200002d8 	.word	0x200002d8

080014e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09a      	sub	sp, #104	; 0x68
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e1e3      	b.n	8001914 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d176      	bne.n	800164c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d152      	bne.n	800160c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fd9d 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d13b      	bne.n	800160c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 f82b 	bl	80025f0 <ADC_Disable>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d12f      	bne.n	800160c <HAL_ADC_Init+0xe0>
 80015ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d12b      	bne.n	800160c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015bc:	f023 0302 	bic.w	r3, r3, #2
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_ADC_Init+0x308>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a92      	ldr	r2, [pc, #584]	; (8001838 <HAL_ADC_Init+0x30c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9a      	lsrs	r2, r3, #18
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015fe:	e002      	b.n	8001606 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f9      	bne.n	8001600 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001628:	d110      	bne.n	800164c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f023 0312 	bic.w	r3, r3, #18
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 8150 	bne.w	80018fa <HAL_ADC_Init+0x3ce>
 800165a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 814b 	bne.w	80018fa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 8143 	bne.w	80018fa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Init+0x16c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_ADC_Init+0x310>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_ADC_Init+0x170>
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <HAL_ADC_Init+0x314>)
 800169a:	e000      	b.n	800169e <HAL_ADC_Init+0x172>
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <HAL_ADC_Init+0x318>)
 800169e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a8:	d102      	bne.n	80016b0 <HAL_ADC_Init+0x184>
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <HAL_ADC_Init+0x310>)
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e01a      	b.n	80016e6 <HAL_ADC_Init+0x1ba>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a61      	ldr	r2, [pc, #388]	; (800183c <HAL_ADC_Init+0x310>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d103      	bne.n	80016c2 <HAL_ADC_Init+0x196>
 80016ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e011      	b.n	80016e6 <HAL_ADC_Init+0x1ba>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a60      	ldr	r2, [pc, #384]	; (8001848 <HAL_ADC_Init+0x31c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <HAL_ADC_Init+0x1a6>
 80016cc:	4b5f      	ldr	r3, [pc, #380]	; (800184c <HAL_ADC_Init+0x320>)
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e009      	b.n	80016e6 <HAL_ADC_Init+0x1ba>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_ADC_Init+0x320>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d102      	bne.n	80016e2 <HAL_ADC_Init+0x1b6>
 80016dc:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_ADC_Init+0x31c>)
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e001      	b.n	80016e6 <HAL_ADC_Init+0x1ba>
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_ADC_Init+0x1da>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x1da>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_ADC_Init+0x1dc>
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d11c      	bne.n	8001746 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800170c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d010      	beq.n	8001734 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_ADC_Init+0x202>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x202>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_ADC_Init+0x204>
 800172e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001730:	2b00      	cmp	r3, #0
 8001732:	d108      	bne.n	8001746 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e5b      	ldrb	r3, [r3, #25]
 800174a:	035b      	lsls	r3, r3, #13
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001750:	2a01      	cmp	r2, #1
 8001752:	d002      	beq.n	800175a <HAL_ADC_Init+0x22e>
 8001754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001758:	e000      	b.n	800175c <HAL_ADC_Init+0x230>
 800175a:	2200      	movs	r2, #0
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4313      	orrs	r3, r2
 800176a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800176c:	4313      	orrs	r3, r2
 800176e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d11b      	bne.n	80017b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	045a      	lsls	r2, r3, #17
 800178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800178c:	4313      	orrs	r3, r2
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	663b      	str	r3, [r7, #96]	; 0x60
 8001794:	e00d      	b.n	80017b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800179e:	f043 0220 	orr.w	r2, r3, #32
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d054      	beq.n	8001864 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_ADC_Init+0x31c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d004      	beq.n	80017ce <HAL_ADC_Init+0x2a2>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_ADC_Init+0x320>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d140      	bne.n	8001850 <HAL_ADC_Init+0x324>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80017d6:	d02a      	beq.n	800182e <HAL_ADC_Init+0x302>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d022      	beq.n	8001828 <HAL_ADC_Init+0x2fc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80017ea:	d01a      	beq.n	8001822 <HAL_ADC_Init+0x2f6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80017f4:	d012      	beq.n	800181c <HAL_ADC_Init+0x2f0>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80017fe:	d00a      	beq.n	8001816 <HAL_ADC_Init+0x2ea>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001808:	d002      	beq.n	8001810 <HAL_ADC_Init+0x2e4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	e023      	b.n	8001858 <HAL_ADC_Init+0x32c>
 8001810:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001814:	e020      	b.n	8001858 <HAL_ADC_Init+0x32c>
 8001816:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800181a:	e01d      	b.n	8001858 <HAL_ADC_Init+0x32c>
 800181c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001820:	e01a      	b.n	8001858 <HAL_ADC_Init+0x32c>
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001826:	e017      	b.n	8001858 <HAL_ADC_Init+0x32c>
 8001828:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800182c:	e014      	b.n	8001858 <HAL_ADC_Init+0x32c>
 800182e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001832:	e011      	b.n	8001858 <HAL_ADC_Init+0x32c>
 8001834:	20000000 	.word	0x20000000
 8001838:	431bde83 	.word	0x431bde83
 800183c:	50000100 	.word	0x50000100
 8001840:	50000300 	.word	0x50000300
 8001844:	50000700 	.word	0x50000700
 8001848:	50000400 	.word	0x50000400
 800184c:	50000500 	.word	0x50000500
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800185c:	4313      	orrs	r3, r2
 800185e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001860:	4313      	orrs	r3, r2
 8001862:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b00      	cmp	r3, #0
 8001870:	d114      	bne.n	800189c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001880:	f023 0302 	bic.w	r3, r3, #2
 8001884:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e1b      	ldrb	r3, [r3, #24]
 800188a:	039a      	lsls	r2, r3, #14
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4313      	orrs	r3, r2
 8001896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001898:	4313      	orrs	r3, r2
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_ADC_Init+0x3f0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018ac:	430b      	orrs	r3, r1
 80018ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10c      	bne.n	80018d2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f023 010f 	bic.w	r1, r3, #15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
 80018d0:	e007      	b.n	80018e2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 020f 	bic.w	r2, r2, #15
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
 80018f8:	e00a      	b.n	8001910 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f023 0312 	bic.w	r3, r3, #18
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800190a:	2301      	movs	r3, #1
 800190c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001914:	4618      	mov	r0, r3
 8001916:	3768      	adds	r7, #104	; 0x68
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	fff0c007 	.word	0xfff0c007

08001920 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80f9 	bne.w	8001b2e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ADC_Start+0x2a>
 8001946:	2302      	movs	r3, #2
 8001948:	e0f4      	b.n	8001b34 <HAL_ADC_Start+0x214>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fde8 	bl	8002528 <ADC_Enable>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80e0 	bne.w	8001b24 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001980:	d004      	beq.n	800198c <HAL_ADC_Start+0x6c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6d      	ldr	r2, [pc, #436]	; (8001b3c <HAL_ADC_Start+0x21c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d106      	bne.n	800199a <HAL_ADC_Start+0x7a>
 800198c:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_ADC_Start+0x220>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_ADC_Start+0x9a>
 8001998:	e005      	b.n	80019a6 <HAL_ADC_Start+0x86>
 800199a:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_ADC_Start+0x224>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_ADC_Start+0x9a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ae:	d004      	beq.n	80019ba <HAL_ADC_Start+0x9a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a64      	ldr	r2, [pc, #400]	; (8001b48 <HAL_ADC_Start+0x228>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d115      	bne.n	80019e6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d036      	beq.n	8001a42 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019e4:	e02d      	b.n	8001a42 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Start+0xe6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_ADC_Start+0x21c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_Start+0xfc>
 8001a06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	e008      	b.n	8001a2e <HAL_ADC_Start+0x10e>
 8001a1c:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_ADC_Start+0x228>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4e:	d106      	bne.n	8001a5e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f023 0206 	bic.w	r2, r3, #6
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a5c:	e002      	b.n	8001a64 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	221c      	movs	r2, #28
 8001a72:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d004      	beq.n	8001a88 <HAL_ADC_Start+0x168>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2e      	ldr	r2, [pc, #184]	; (8001b3c <HAL_ADC_Start+0x21c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_Start+0x176>
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_ADC_Start+0x220>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03e      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001a94:	e005      	b.n	8001aa2 <HAL_ADC_Start+0x182>
 8001a96:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_ADC_Start+0x224>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d037      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_Start+0x196>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_ADC_Start+0x21c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_Start+0x1a4>
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_ADC_Start+0x220>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d027      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001ac2:	e005      	b.n	8001ad0 <HAL_ADC_Start+0x1b0>
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_ADC_Start+0x224>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d020      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_Start+0x1c4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_ADC_Start+0x21c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Start+0x1d2>
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_ADC_Start+0x220>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d010      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001af0:	e005      	b.n	8001afe <HAL_ADC_Start+0x1de>
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_ADC_Start+0x224>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d009      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Start+0x1f2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_ADC_Start+0x228>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10f      	bne.n	8001b32 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	e006      	b.n	8001b32 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b2c:	e001      	b.n	8001b32 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	50000100 	.word	0x50000100
 8001b40:	50000300 	.word	0x50000300
 8001b44:	50000700 	.word	0x50000700
 8001b48:	50000400 	.word	0x50000400

08001b4c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d102      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b62:	2308      	movs	r3, #8
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e03a      	b.n	8001bde <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_PollForConversion+0x30>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a72      	ldr	r2, [pc, #456]	; (8001d40 <HAL_ADC_PollForConversion+0x1f4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x34>
 8001b7c:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <HAL_ADC_PollForConversion+0x1f8>)
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_PollForConversion+0x36>
 8001b80:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_ADC_PollForConversion+0x1fc>)
 8001b82:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d112      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d11d      	bne.n	8001bda <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f043 0220 	orr.w	r2, r3, #32
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0bf      	b.n	8001d36 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f043 0220 	orr.w	r2, r3, #32
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0ad      	b.n	8001d36 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001bda:	230c      	movs	r3, #12
 8001bdc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0xa6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a54      	ldr	r2, [pc, #336]	; (8001d40 <HAL_ADC_PollForConversion+0x1f4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_PollForConversion+0xb4>
 8001bf2:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <HAL_ADC_PollForConversion+0x1f8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_ADC_PollForConversion+0xd4>
 8001bfe:	e005      	b.n	8001c0c <HAL_ADC_PollForConversion+0xc0>
 8001c00:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_ADC_PollForConversion+0x1fc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_ADC_PollForConversion+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_PollForConversion+0xd4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_ADC_PollForConversion+0x200>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d104      	bne.n	8001c2a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e00f      	b.n	8001c4a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_PollForConversion+0xf2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <HAL_ADC_PollForConversion+0x1f4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d102      	bne.n	8001c44 <HAL_ADC_PollForConversion+0xf8>
 8001c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c42:	e000      	b.n	8001c46 <HAL_ADC_PollForConversion+0xfa>
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_ADC_PollForConversion+0x200>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001c4a:	f7ff fc3f 	bl	80014cc <HAL_GetTick>
 8001c4e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c50:	e021      	b.n	8001c96 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d01d      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_ADC_PollForConversion+0x124>
 8001c60:	f7ff fc34 	bl	80014cc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d212      	bcs.n	8001c96 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0d6      	beq.n	8001c52 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d131      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d12c      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d125      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d112      	bne.n	8001d0a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d112      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
 8001d08:	e00b      	b.n	8001d22 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	50000100 	.word	0x50000100
 8001d44:	50000300 	.word	0x50000300
 8001d48:	50000700 	.word	0x50000700
 8001d4c:	50000400 	.word	0x50000400

08001d50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b09b      	sub	sp, #108	; 0x6c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x22>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e2ca      	b.n	8002324 <HAL_ADC_ConfigChannel+0x5b8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 82ae 	bne.w	8002302 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d81c      	bhi.n	8001de8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4019      	ands	r1, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa00 f203 	lsl.w	r2, r0, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
 8001de6:	e063      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d81e      	bhi.n	8001e2e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	3b1e      	subs	r3, #30
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4019      	ands	r1, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2c:	e040      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b0e      	cmp	r3, #14
 8001e34:	d81e      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	3b3c      	subs	r3, #60	; 0x3c
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4019      	ands	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	3b3c      	subs	r3, #60	; 0x3c
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
 8001e72:	e01d      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3b5a      	subs	r3, #90	; 0x5a
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4019      	ands	r1, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	3b5a      	subs	r3, #90	; 0x5a
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 80e5 	bne.w	800208a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d91c      	bls.n	8001f02 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6999      	ldr	r1, [r3, #24]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b1e      	subs	r3, #30
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e019      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6959      	ldr	r1, [r3, #20]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	2207      	movs	r2, #7
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6898      	ldr	r0, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d84f      	bhi.n	8001ff8 <HAL_ADC_ConfigChannel+0x28c>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f93 	.word	0x08001f93
 8001f68:	08001fb5 	.word	0x08001fb5
 8001f6c:	08001fd7 	.word	0x08001fd7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f76:	4b9a      	ldr	r3, [pc, #616]	; (80021e0 <HAL_ADC_ConfigChannel+0x474>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	0691      	lsls	r1, r2, #26
 8001f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f82:	430a      	orrs	r2, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f90:	e07e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f98:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <HAL_ADC_ConfigChannel+0x474>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	0691      	lsls	r1, r2, #26
 8001fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fb0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fb2:	e06d      	b.n	8002090 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_ADC_ConfigChannel+0x474>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	0691      	lsls	r1, r2, #26
 8001fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fd2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd4:	e05c      	b.n	8002090 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_ADC_ConfigChannel+0x474>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	0691      	lsls	r1, r2, #26
 8001fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ff4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ff6:	e04b      	b.n	8002090 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800201a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800203e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002062:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	429a      	cmp	r2, r3
 8002076:	d10a      	bne.n	800208e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002086:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002088:	e001      	b.n	800208e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <HAL_ADC_ConfigChannel+0x324>
      break;
 800208e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x344>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x344>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x346>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 8130 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d00f      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020de:	e049      	b.n	8002174 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d91c      	bls.n	800213c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6999      	ldr	r1, [r3, #24]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	3b1b      	subs	r3, #27
 8002114:	2207      	movs	r2, #7
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	4019      	ands	r1, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6898      	ldr	r0, [r3, #8]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1b      	subs	r3, #27
 800212e:	fa00 f203 	lsl.w	r2, r0, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e01b      	b.n	8002174 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217c:	d004      	beq.n	8002188 <HAL_ADC_ConfigChannel+0x41c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ADC_ConfigChannel+0x478>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x420>
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_ADC_ConfigChannel+0x47c>)
 800218a:	e000      	b.n	800218e <HAL_ADC_ConfigChannel+0x422>
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_ADC_ConfigChannel+0x480>)
 800218e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021a8:	2b11      	cmp	r3, #17
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021bc:	2b12      	cmp	r3, #18
 80021be:	f040 80ab 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 80a4 	bne.w	8002318 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x484>
 80021da:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_ADC_ConfigChannel+0x478>)
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e022      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4ba>
 80021e0:	83fff000 	.word	0x83fff000
 80021e4:	50000100 	.word	0x50000100
 80021e8:	50000300 	.word	0x50000300
 80021ec:	50000700 	.word	0x50000700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	; (8002330 <HAL_ADC_ConfigChannel+0x5c4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d103      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x496>
 80021fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e011      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4ba>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4b      	ldr	r2, [pc, #300]	; (8002334 <HAL_ADC_ConfigChannel+0x5c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x4a6>
 800220c:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_ADC_ConfigChannel+0x5cc>)
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e009      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4ba>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_ADC_ConfigChannel+0x5cc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4b6>
 800221c:	4b45      	ldr	r3, [pc, #276]	; (8002334 <HAL_ADC_ConfigChannel+0x5c8>)
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e001      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4ba>
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x4da>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x4da>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_ADC_ConfigChannel+0x4dc>
 8002246:	2300      	movs	r3, #0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d150      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800224c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_ADC_ConfigChannel+0x502>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x502>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x504>
 800226e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13c      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d11d      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x54c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002284:	d118      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800228e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002290:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_ADC_ConfigChannel+0x5d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_ADC_ConfigChannel+0x5d4>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9a      	lsrs	r2, r3, #18
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b6:	e02e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d10b      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x56c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d11a      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022ec:	e013      	b.n	8002316 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002300:	e00a      	b.n	8002318 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002314:	e000      	b.n	8002318 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002316:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002324:	4618      	mov	r0, r3
 8002326:	376c      	adds	r7, #108	; 0x6c
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	50000100 	.word	0x50000100
 8002334:	50000400 	.word	0x50000400
 8002338:	50000500 	.word	0x50000500
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002344:	b480      	push	{r7}
 8002346:	b099      	sub	sp, #100	; 0x64
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235c:	d102      	bne.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	e01a      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d103      	bne.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800236e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	e011      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d102      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	e009      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d102      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002390:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	e001      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b0      	b.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0a9      	b.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 808d 	bne.w	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8086 	bne.w	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e0:	d004      	beq.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80023ee:	e000      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80023f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d040      	beq.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800240e:	035b      	lsls	r3, r3, #13
 8002410:	430b      	orrs	r3, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002416:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d108      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d15c      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800245a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d14b      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	430a      	orrs	r2, r1
 8002476:	431a      	orrs	r2, r3
 8002478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800247c:	e03c      	b.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002488:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d108      	bne.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d123      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d112      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024da:	f023 030f 	bic.w	r3, r3, #15
 80024de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e2:	e009      	b.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f043 0220 	orr.w	r2, r3, #32
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024f6:	e000      	b.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002506:	4618      	mov	r0, r3
 8002508:	3764      	adds	r7, #100	; 0x64
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	50000100 	.word	0x50000100
 8002518:	50000400 	.word	0x50000400
 800251c:	50000500 	.word	0x50000500
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700

08002528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <ADC_Enable+0x2c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <ADC_Enable+0x2c>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <ADC_Enable+0x2e>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d143      	bne.n	80025e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <ADC_Enable+0xc4>)
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02f      	b.n	80025e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002594:	f7fe ff9a 	bl	80014cc <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800259a:	e01b      	b.n	80025d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800259c:	f7fe ff96 	bl	80014cc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d914      	bls.n	80025d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d00d      	beq.n	80025d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e007      	b.n	80025e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d1dc      	bne.n	800259c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	8000003f 	.word	0x8000003f

080025f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <ADC_Disable+0x2c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <ADC_Disable+0x2c>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <ADC_Disable+0x2e>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d047      	beq.n	80026b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030d 	and.w	r3, r3, #13
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10f      	bne.n	8002650 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0202 	orr.w	r2, r2, #2
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2203      	movs	r2, #3
 8002646:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002648:	f7fe ff40 	bl	80014cc <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800264e:	e029      	b.n	80026a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f043 0210 	orr.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e023      	b.n	80026b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800266c:	f7fe ff2e 	bl	80014cc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d914      	bls.n	80026a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10d      	bne.n	80026a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0210 	orr.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d0dc      	beq.n	800266c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff47 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff5c 	bl	8002704 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffb0 	bl	80027dc <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e160      	b.n	8002b5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8152 	beq.w	8002b54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d005      	beq.n	80028c8 <HAL_GPIO_Init+0x40>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0201 	and.w	r2, r3, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b03      	cmp	r3, #3
 8002934:	d017      	beq.n	8002966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d123      	bne.n	80029ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80ac 	beq.w	8002b54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_GPIO_Init+0x2f0>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a14:	4a59      	ldr	r2, [pc, #356]	; (8002b7c <HAL_GPIO_Init+0x2f4>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a3e:	d025      	beq.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a4f      	ldr	r2, [pc, #316]	; (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d01f      	beq.n	8002a88 <HAL_GPIO_Init+0x200>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_GPIO_Init+0x2fc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_GPIO_Init+0x1fc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1f8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1f4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_GPIO_Init+0x308>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1f0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1ec>
 8002a70:	2306      	movs	r3, #6
 8002a72:	e00c      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a74:	2307      	movs	r3, #7
 8002a76:	e00a      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a78:	2305      	movs	r3, #5
 8002a7a:	e008      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e006      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e004      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a9e:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_GPIO_Init+0x2f4>)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ad0:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad6:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b24:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f ae97 	bne.w	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	48000400 	.word	0x48000400
 8002b84:	48000800 	.word	0x48000800
 8002b88:	48000c00 	.word	0x48000c00
 8002b8c:	48001000 	.word	0x48001000
 8002b90:	48001400 	.word	0x48001400
 8002b94:	48001800 	.word	0x48001800
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bdc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f001 b83a 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 816f 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c08:	4bb5      	ldr	r3, [pc, #724]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c14:	4bb2      	ldr	r3, [pc, #712]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d15c      	bne.n	8002cda <HAL_RCC_OscConfig+0x10e>
 8002c20:	4baf      	ldr	r3, [pc, #700]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d155      	bne.n	8002cda <HAL_RCC_OscConfig+0x10e>
 8002c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x94>
 8002c5a:	4ba1      	ldr	r3, [pc, #644]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0xc0>
 8002c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c7c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c88:	4b95      	ldr	r3, [pc, #596]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c90:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002c94:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002ca0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f042 0220 	orr.w	r2, r2, #32
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f002 021f 	and.w	r2, r2, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8111 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x318>
 8002cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 8108 	bne.w	8002ee4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f000 bfc6 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12e>
 8002cec:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7b      	ldr	r2, [pc, #492]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e036      	b.n	8002d68 <HAL_RCC_OscConfig+0x19c>
 8002cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x158>
 8002d0a:	4b75      	ldr	r3, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a74      	ldr	r2, [pc, #464]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a71      	ldr	r2, [pc, #452]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e021      	b.n	8002d68 <HAL_RCC_OscConfig+0x19c>
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x184>
 8002d36:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a69      	ldr	r2, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a66      	ldr	r2, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x19c>
 8002d50:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a62      	ldr	r2, [pc, #392]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5f      	ldr	r2, [pc, #380]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d059      	beq.n	8002e2c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fba8 	bl	80014cc <HAL_GetTick>
 8002d7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d82:	f7fe fba3 	bl	80014cc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d902      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f000 bf67 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 8002d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002dac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_OscConfig+0x1fe>
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x22a>
 8002dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002de6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dfa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002dfe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002e02:	fa92 f2a2 	rbit	r2, r2
 8002e06:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002e0a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f042 0220 	orr.w	r2, r2, #32
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f002 021f 	and.w	r2, r2, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ab      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b6>
 8002e2a:	e05c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fb4e 	bl	80014cc <HAL_GetTick>
 8002e30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e36:	f7fe fb49 	bl	80014cc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d902      	bls.n	8002e4c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f000 bf0d 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002e60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d102      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2b2>
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x2de>
 8002e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_RCC_OscConfig+0x314>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002eb2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002ebe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ab      	bne.n	8002e36 <HAL_RCC_OscConfig+0x26a>
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_OscConfig+0x31a>
 8002ee0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 817f 	beq.w	80031fa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002efc:	4ba7      	ldr	r3, [pc, #668]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f08:	4ba4      	ldr	r3, [pc, #656]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d173      	bne.n	8002ffc <HAL_RCC_OscConfig+0x430>
 8002f14:	4ba1      	ldr	r3, [pc, #644]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d16c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x430>
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002f34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x386>
 8002f4c:	4b93      	ldr	r3, [pc, #588]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e013      	b.n	8002f7a <HAL_RCC_OscConfig+0x3ae>
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002f64:	2302      	movs	r3, #2
 8002f66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f6a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f76:	4b89      	ldr	r3, [pc, #548]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002f80:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002f8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3f6>
 8002fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f000 be52 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	21f8      	movs	r1, #248	; 0xf8
 8002fd8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002fe0:	fa91 f1a1 	rbit	r1, r1
 8002fe4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002fe8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fec:	fab1 f181 	clz	r1, r1
 8002ff0:	b2c9      	uxtb	r1, r1
 8002ff2:	408b      	lsls	r3, r1
 8002ff4:	4969      	ldr	r1, [pc, #420]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e0fe      	b.n	80031fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8088 	beq.w	800311e <HAL_RCC_OscConfig+0x552>
 800300e:	2301      	movs	r3, #1
 8003010:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003020:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800302e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe fa47 	bl	80014cc <HAL_GetTick>
 800303e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fa42 	bl	80014cc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d902      	bls.n	800305a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f000 be06 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800306c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <HAL_RCC_OscConfig+0x4be>
 8003084:	4b45      	ldr	r3, [pc, #276]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	e013      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e6>
 800308a:	2302      	movs	r3, #2
 800308c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2202      	movs	r2, #2
 80030b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80030b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80030c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0220 	orr.w	r2, r2, #32
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0af      	beq.n	8003044 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	21f8      	movs	r1, #248	; 0xf8
 80030fa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003102:	fa91 f1a1 	rbit	r1, r1
 8003106:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800310a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800310e:	fab1 f181 	clz	r1, r1
 8003112:	b2c9      	uxtb	r1, r1
 8003114:	408b      	lsls	r3, r1
 8003116:	4921      	ldr	r1, [pc, #132]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
 800311c:	e06d      	b.n	80031fa <HAL_RCC_OscConfig+0x62e>
 800311e:	2301      	movs	r3, #1
 8003120:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003130:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	461a      	mov	r2, r3
 8003146:	2300      	movs	r3, #0
 8003148:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fe f9bf 	bl	80014cc <HAL_GetTick>
 800314e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe f9ba 	bl	80014cc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d902      	bls.n	800316a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	f000 bd7e 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 800316a:	2302      	movs	r3, #2
 800316c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800317c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5d4>
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <HAL_RCC_OscConfig+0x5d0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	e016      	b.n	80031c8 <HAL_RCC_OscConfig+0x5fc>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	2302      	movs	r3, #2
 80031a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80031b2:	2302      	movs	r3, #2
 80031b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031c4:	4bbf      	ldr	r3, [pc, #764]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2202      	movs	r2, #2
 80031ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80031ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80031d2:	fa92 f2a2 	rbit	r2, r2
 80031d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80031da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031de:	fab2 f282 	clz	r2, r2
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	f042 0220 	orr.w	r2, r2, #32
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f002 021f 	and.w	r2, r2, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f202 	lsl.w	r2, r1, r2
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ac      	bne.n	8003154 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8113 	beq.w	8003436 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d07c      	beq.n	800331a <HAL_RCC_OscConfig+0x74e>
 8003220:	2301      	movs	r3, #1
 8003222:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003232:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	4ba2      	ldr	r3, [pc, #648]	; (80034c8 <HAL_RCC_OscConfig+0x8fc>)
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	461a      	mov	r2, r3
 8003246:	2301      	movs	r3, #1
 8003248:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe f93f 	bl	80014cc <HAL_GetTick>
 800324e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	e00a      	b.n	800326a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe f93a 	bl	80014cc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	f000 bcfe 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 800326a:	2302      	movs	r3, #2
 800326c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b7e      	ldr	r3, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 80032cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032d6:	2102      	movs	r1, #2
 80032d8:	6019      	str	r1, [r3, #0]
 80032da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f1a3 	rbit	r1, r3
 80032e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032f0:	6019      	str	r1, [r3, #0]
  return result;
 80032f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d09d      	beq.n	8003254 <HAL_RCC_OscConfig+0x688>
 8003318:	e08d      	b.n	8003436 <HAL_RCC_OscConfig+0x86a>
 800331a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003338:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003342:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003346:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x8fc>)
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	461a      	mov	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe f8b6 	bl	80014cc <HAL_GetTick>
 8003360:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe f8b1 	bl	80014cc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	f000 bc75 	b.w	8003c66 <HAL_RCC_OscConfig+0x109a>
 800337c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003384:	2202      	movs	r2, #2
 8003386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fa93 f2a3 	rbit	r2, r3
 8003396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033a8:	2202      	movs	r2, #2
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 80033ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033f4:	2102      	movs	r1, #2
 80033f6:	6019      	str	r1, [r3, #0]
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f1a3 	rbit	r1, r3
 8003406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800340e:	6019      	str	r1, [r3, #0]
  return result;
 8003410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003414:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d197      	bne.n	8003366 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 81a5 	beq.w	8003796 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_RCC_OscConfig+0x8f8>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003484:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_RCC_OscConfig+0x900>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d121      	bne.n	80034dc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCC_OscConfig+0x900>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x900>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a4:	f7fe f812 	bl	80014cc <HAL_GetTick>
 80034a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e010      	b.n	80034d0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe f80d 	bl	80014cc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d908      	bls.n	80034d0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e3d1      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	10908120 	.word	0x10908120
 80034cc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <HAL_RCC_OscConfig+0xb3c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0e8      	beq.n	80034ae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x92e>
 80034ec:	4b87      	ldr	r3, [pc, #540]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a86      	ldr	r2, [pc, #536]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e035      	b.n	8003566 <HAL_RCC_OscConfig+0x99a>
 80034fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x958>
 800350a:	4b80      	ldr	r3, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a7f      	ldr	r2, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	e020      	b.n	8003566 <HAL_RCC_OscConfig+0x99a>
 8003524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003528:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x982>
 8003534:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x99a>
 800354e:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a6e      	ldr	r2, [pc, #440]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b6c      	ldr	r3, [pc, #432]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a6b      	ldr	r2, [pc, #428]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8081 	beq.w	800367a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fd ffa8 	bl	80014cc <HAL_GetTick>
 800357c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00b      	b.n	800359a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd ffa3 	bl	80014cc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e365      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 800359a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035a2:	2202      	movs	r2, #2
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035c6:	2202      	movs	r2, #2
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035e0:	601a      	str	r2, [r3, #0]
  return result;
 80035e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d102      	bne.n	8003606 <HAL_RCC_OscConfig+0xa3a>
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	e013      	b.n	800362e <HAL_RCC_OscConfig+0xa62>
 8003606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800360e:	2202      	movs	r2, #2
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003632:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003636:	2102      	movs	r1, #2
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800363e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	fa92 f1a2 	rbit	r1, r2
 8003648:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800364c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003650:	6011      	str	r1, [r2, #0]
  return result;
 8003652:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003656:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d084      	beq.n	8003582 <HAL_RCC_OscConfig+0x9b6>
 8003678:	e083      	b.n	8003782 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fd ff27 	bl	80014cc <HAL_GetTick>
 800367e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd ff22 	bl	80014cc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e2e4      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 800369c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036c8:	2202      	movs	r2, #2
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036e2:	601a      	str	r2, [r3, #0]
  return result;
 80036e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0xb44>
 8003702:	4b02      	ldr	r3, [pc, #8]	; (800370c <HAL_RCC_OscConfig+0xb40>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	e017      	b.n	8003738 <HAL_RCC_OscConfig+0xb6c>
 8003708:	40007000 	.word	0x40007000
 800370c:	40021000 	.word	0x40021000
 8003710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003714:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003718:	2202      	movs	r2, #2
 800371a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4bb3      	ldr	r3, [pc, #716]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800373c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003740:	2102      	movs	r1, #2
 8003742:	6011      	str	r1, [r2, #0]
 8003744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003748:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	fa92 f1a2 	rbit	r1, r2
 8003752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003756:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800375a:	6011      	str	r1, [r2, #0]
  return result;
 800375c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003760:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d180      	bne.n	8003684 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003782:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4b9e      	ldr	r3, [pc, #632]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a9d      	ldr	r2, [pc, #628]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 825e 	beq.w	8003c64 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a8:	4b96      	ldr	r3, [pc, #600]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f000 821f 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	f040 8170 	bne.w	8003aa8 <HAL_RCC_OscConfig+0xedc>
 80037c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037ec:	601a      	str	r2, [r3, #0]
  return result;
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037f6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fd fe5d 	bl	80014cc <HAL_GetTick>
 8003812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	e009      	b.n	800382c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fd fe58 	bl	80014cc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e21c      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fa93 f2a3 	rbit	r2, r3
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003850:	601a      	str	r2, [r3, #0]
  return result;
 8003852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003856:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800385a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_RCC_OscConfig+0xcaa>
 8003870:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	e027      	b.n	80038c6 <HAL_RCC_OscConfig+0xcfa>
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800387e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003896:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038bc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038d2:	6011      	str	r1, [r2, #0]
 80038d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	fa92 f1a2 	rbit	r1, r2
 80038e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038e6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80038ea:	6011      	str	r1, [r2, #0]
  return result;
 80038ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038f0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d182      	bne.n	8003818 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f023 020f 	bic.w	r2, r3, #15
 800391a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4937      	ldr	r1, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003928:	4313      	orrs	r3, r2
 800392a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800392c:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003938:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a19      	ldr	r1, [r3, #32]
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	430b      	orrs	r3, r1
 800394e:	492d      	ldr	r1, [pc, #180]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800395c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003974:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003978:	601a      	str	r2, [r3, #0]
  return result;
 800397a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003982:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800398e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	461a      	mov	r2, r3
 8003996:	2301      	movs	r3, #1
 8003998:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fd fd97 	bl	80014cc <HAL_GetTick>
 800399e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a2:	e009      	b.n	80039b8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fd92 	bl	80014cc <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e156      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039dc:	601a      	str	r2, [r3, #0]
  return result;
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0xe3c>
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <HAL_RCC_OscConfig+0xe38>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	e02a      	b.n	8003a58 <HAL_RCC_OscConfig+0xe8c>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a40:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	fa93 f2a3 	rbit	r2, r3
 8003a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	4b86      	ldr	r3, [pc, #536]	; (8003c70 <HAL_RCC_OscConfig+0x10a4>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a64:	6011      	str	r1, [r2, #0]
 8003a66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	fa92 f1a2 	rbit	r1, r2
 8003a74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a78:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a7c:	6011      	str	r1, [r2, #0]
  return result;
 8003a7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a82:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f43f af7f 	beq.w	80039a4 <HAL_RCC_OscConfig+0xdd8>
 8003aa6:	e0dd      	b.n	8003c64 <HAL_RCC_OscConfig+0x1098>
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fa93 f2a3 	rbit	r2, r3
 8003ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003acc:	601a      	str	r2, [r3, #0]
  return result;
 8003ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ad6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ae2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fd fced 	bl	80014cc <HAL_GetTick>
 8003af2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af6:	e009      	b.n	8003b0c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fce8 	bl	80014cc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0ac      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
 8003b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b30:	601a      	str	r2, [r3, #0]
  return result;
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_OscConfig+0xf8a>
 8003b50:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_OscConfig+0x10a4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	e027      	b.n	8003ba6 <HAL_RCC_OscConfig+0xfda>
 8003b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b80:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_RCC_OscConfig+0x10a4>)
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003baa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bb2:	6011      	str	r1, [r2, #0]
 8003bb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bb8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	fa92 f1a2 	rbit	r1, r2
 8003bc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bc6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003bca:	6011      	str	r1, [r2, #0]
  return result;
 8003bcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bd0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	fab2 f282 	clz	r2, r2
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f002 021f 	and.w	r2, r2, #31
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d182      	bne.n	8003af8 <HAL_RCC_OscConfig+0xf2c>
 8003bf2:	e037      	b.n	8003c64 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e02e      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_OscConfig+0x10a4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_RCC_OscConfig+0x10a4>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c1c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d117      	bne.n	8003c60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c34:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b09e      	sub	sp, #120	; 0x78
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e162      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b90      	ldr	r3, [pc, #576]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d910      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	498b      	ldr	r1, [pc, #556]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e14a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc8:	4b82      	ldr	r3, [pc, #520]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	497f      	ldr	r1, [pc, #508]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80dc 	beq.w	8003ea0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d13c      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xf6>
 8003cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xa6>
 8003d14:	4b6f      	ldr	r3, [pc, #444]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	e00f      	b.n	8003d3a <HAL_RCC_ClockConfig+0xc6>
 8003d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	667b      	str	r3, [r7, #100]	; 0x64
 8003d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d36:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d42:	fa92 f2a2 	rbit	r2, r2
 8003d46:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d4a:	fab2 f282 	clz	r2, r2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f042 0220 	orr.w	r2, r2, #32
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f002 021f 	and.w	r2, r2, #31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d17b      	bne.n	8003e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0f3      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d13c      	bne.n	8003dec <HAL_RCC_ClockConfig+0x178>
 8003d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x128>
 8003d96:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	e00f      	b.n	8003dbc <HAL_RCC_ClockConfig+0x148>
 8003d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
 8003daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dcc:	fab2 f282 	clz	r2, r2
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	f042 0220 	orr.w	r2, r2, #32
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	f002 021f 	and.w	r2, r2, #31
 8003ddc:	2101      	movs	r1, #1
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d13a      	bne.n	8003e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b2      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
 8003dec:	2302      	movs	r3, #2
 8003dee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d102      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x1a0>
 8003e0e:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	e00d      	b.n	8003e30 <HAL_RCC_ClockConfig+0x1bc>
 8003e14:	2302      	movs	r3, #2
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	2302      	movs	r3, #2
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2202      	movs	r2, #2
 8003e32:	61ba      	str	r2, [r7, #24]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	fa92 f2a2 	rbit	r2, r2
 8003e3a:	617a      	str	r2, [r7, #20]
  return result;
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	fab2 f282 	clz	r2, r2
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	f042 0220 	orr.w	r2, r2, #32
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f002 021f 	and.w	r2, r2, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e079      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	491a      	ldr	r1, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd fb2c 	bl	80014cc <HAL_GetTick>
 8003e74:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fd fb28 	bl	80014cc <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e061      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_ClockConfig+0x260>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d214      	bcs.n	8003ed8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_ClockConfig+0x25c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e040      	b.n	8003f52 <HAL_RCC_ClockConfig+0x2de>
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_RCC_ClockConfig+0x2e8>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	491a      	ldr	r1, [pc, #104]	; (8003f5c <HAL_RCC_ClockConfig+0x2e8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_RCC_ClockConfig+0x2e8>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4912      	ldr	r1, [pc, #72]	; (8003f5c <HAL_RCC_ClockConfig+0x2e8>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f16:	f000 f829 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_RCC_ClockConfig+0x2e8>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	22f0      	movs	r2, #240	; 0xf0
 8003f26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	fa92 f2a2 	rbit	r2, r2
 8003f2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	fab2 f282 	clz	r2, r2
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	40d3      	lsrs	r3, r2
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x2ec>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCC_ClockConfig+0x2f0>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <HAL_RCC_ClockConfig+0x2f4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fa7a 	bl	8001444 <HAL_InitTick>
  
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3778      	adds	r7, #120	; 0x78
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08007be8 	.word	0x08007be8
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b08b      	sub	sp, #44	; 0x2c
 8003f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x30>
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8003f9a:	e03f      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f9c:	4b25      	ldr	r3, [pc, #148]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f9e:	623b      	str	r3, [r7, #32]
      break;
 8003fa0:	e03f      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fa8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	fa92 f2a2 	rbit	r2, r2
 8003fb4:	607a      	str	r2, [r7, #4]
  return result;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	40d3      	lsrs	r3, r2
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	220f      	movs	r2, #15
 8003fd0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	fa92 f2a2 	rbit	r2, r2
 8003fd8:	60fa      	str	r2, [r7, #12]
  return result;
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	40d3      	lsrs	r3, r2
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ff4:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	e007      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004006:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	fbb2 f2f3 	udiv	r2, r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fb02 f303 	mul.w	r3, r2, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	623b      	str	r3, [r7, #32]
      break;
 800401a:	e002      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc8>)
 800401e:	623b      	str	r3, [r7, #32]
      break;
 8004020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004022:	6a3b      	ldr	r3, [r7, #32]
}
 8004024:	4618      	mov	r0, r3
 8004026:	372c      	adds	r7, #44	; 0x2c
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	007a1200 	.word	0x007a1200
 8004038:	08007c00 	.word	0x08007c00
 800403c:	08007c10 	.word	0x08007c10

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_GetHCLKFreq+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000000 	.word	0x20000000

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800405e:	f7ff ffef 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004070:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	fa92 f2a2 	rbit	r2, r2
 8004078:	603a      	str	r2, [r7, #0]
  return result;
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	fab2 f282 	clz	r2, r2
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	40d3      	lsrs	r3, r2
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004086:	5cd3      	ldrb	r3, [r2, r3]
 8004088:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	08007bf8 	.word	0x08007bf8

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040a2:	f7ff ffcd 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 80040a6:	4601      	mov	r1, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	fa92 f2a2 	rbit	r2, r2
 80040bc:	603a      	str	r2, [r7, #0]
  return result;
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	fab2 f282 	clz	r2, r2
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	40d3      	lsrs	r3, r2
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08007bf8 	.word	0x08007bf8

080040e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b092      	sub	sp, #72	; 0x48
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80d4 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004104:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10e      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b4b      	ldr	r3, [pc, #300]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	4b48      	ldr	r3, [pc, #288]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b45      	ldr	r3, [pc, #276]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b42      	ldr	r3, [pc, #264]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a41      	ldr	r2, [pc, #260]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fd f9c1 	bl	80014cc <HAL_GetTick>
 800414a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fd f9bd 	bl	80014cc <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d901      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1d6      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b38      	ldr	r3, [pc, #224]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416c:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8084 	beq.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004188:	429a      	cmp	r2, r3
 800418a:	d07c      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	461a      	mov	r2, r3
 80041b6:	2301      	movs	r3, #1
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fd f96d 	bl	80014cc <HAL_GetTick>
 80041f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fd f969 	bl	80014cc <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e180      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800420c:	2302      	movs	r3, #2
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	2302      	movs	r3, #2
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	61fb      	str	r3, [r7, #28]
  return result;
 8004224:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d108      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800423a:	4b01      	ldr	r3, [pc, #4]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	e00d      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
 8004248:	10908100 	.word	0x10908100
 800424c:	2302      	movs	r3, #2
 800424e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	4b9a      	ldr	r3, [pc, #616]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2202      	movs	r2, #2
 800425e:	613a      	str	r2, [r7, #16]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	fa92 f2a2 	rbit	r2, r2
 8004266:	60fa      	str	r2, [r7, #12]
  return result;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fab2 f282 	clz	r2, r2
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f002 021f 	and.w	r2, r2, #31
 800427a:	2101      	movs	r1, #1
 800427c:	fa01 f202 	lsl.w	r2, r1, r2
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0b7      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004286:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	498c      	ldr	r1, [pc, #560]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004298:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4a87      	ldr	r2, [pc, #540]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b8:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	497f      	ldr	r1, [pc, #508]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d6:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4978      	ldr	r1, [pc, #480]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f4:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4970      	ldr	r1, [pc, #448]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004312:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4969      	ldr	r1, [pc, #420]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	4961      	ldr	r1, [pc, #388]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800434e:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f023 0220 	bic.w	r2, r3, #32
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	495a      	ldr	r1, [pc, #360]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436c:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	4952      	ldr	r1, [pc, #328]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800438a:	4b4e      	ldr	r3, [pc, #312]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	494b      	ldr	r1, [pc, #300]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4943      	ldr	r1, [pc, #268]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	493c      	ldr	r1, [pc, #240]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043e4:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	4934      	ldr	r1, [pc, #208]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	492d      	ldr	r1, [pc, #180]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	4925      	ldr	r1, [pc, #148]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800442e:	4313      	orrs	r3, r2
 8004430:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	491e      	ldr	r1, [pc, #120]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	4916      	ldr	r1, [pc, #88]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	490f      	ldr	r1, [pc, #60]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004488:	4313      	orrs	r3, r2
 800448a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	4907      	ldr	r1, [pc, #28]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044b6:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	e002      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	4913      	ldr	r1, [pc, #76]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	490b      	ldr	r1, [pc, #44]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004508:	4313      	orrs	r3, r2
 800450a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3748      	adds	r7, #72	; 0x48
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e040      	b.n	80045b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fdfc 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f82c 	bl	80045b8 <UART_SetConfig>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e022      	b.n	80045b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9f4 	bl	8004960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa7b 	bl	8004aa4 <UART_CheckIdleState>
 80045ae:	4603      	mov	r3, r0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b92      	ldr	r3, [pc, #584]	; (800482c <UART_SetConfig+0x274>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a80      	ldr	r2, [pc, #512]	; (8004830 <UART_SetConfig+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d120      	bne.n	8004676 <UART_SetConfig+0xbe>
 8004634:	4b7f      	ldr	r3, [pc, #508]	; (8004834 <UART_SetConfig+0x27c>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b03      	cmp	r3, #3
 800463e:	d817      	bhi.n	8004670 <UART_SetConfig+0xb8>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0x90>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	08004659 	.word	0x08004659
 800464c:	08004665 	.word	0x08004665
 8004650:	0800466b 	.word	0x0800466b
 8004654:	0800465f 	.word	0x0800465f
 8004658:	2301      	movs	r3, #1
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0b5      	b.n	80047ca <UART_SetConfig+0x212>
 800465e:	2302      	movs	r3, #2
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0b2      	b.n	80047ca <UART_SetConfig+0x212>
 8004664:	2304      	movs	r3, #4
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0af      	b.n	80047ca <UART_SetConfig+0x212>
 800466a:	2308      	movs	r3, #8
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e0ac      	b.n	80047ca <UART_SetConfig+0x212>
 8004670:	2310      	movs	r3, #16
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0a9      	b.n	80047ca <UART_SetConfig+0x212>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <UART_SetConfig+0x280>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d124      	bne.n	80046ca <UART_SetConfig+0x112>
 8004680:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <UART_SetConfig+0x27c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004688:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800468c:	d011      	beq.n	80046b2 <UART_SetConfig+0xfa>
 800468e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0x10c>
 8004694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004698:	d011      	beq.n	80046be <UART_SetConfig+0x106>
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800469e:	d811      	bhi.n	80046c4 <UART_SetConfig+0x10c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0xf4>
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d006      	beq.n	80046b8 <UART_SetConfig+0x100>
 80046aa:	e00b      	b.n	80046c4 <UART_SetConfig+0x10c>
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e08b      	b.n	80047ca <UART_SetConfig+0x212>
 80046b2:	2302      	movs	r3, #2
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e088      	b.n	80047ca <UART_SetConfig+0x212>
 80046b8:	2304      	movs	r3, #4
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e085      	b.n	80047ca <UART_SetConfig+0x212>
 80046be:	2308      	movs	r3, #8
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e082      	b.n	80047ca <UART_SetConfig+0x212>
 80046c4:	2310      	movs	r3, #16
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e07f      	b.n	80047ca <UART_SetConfig+0x212>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a5b      	ldr	r2, [pc, #364]	; (800483c <UART_SetConfig+0x284>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d124      	bne.n	800471e <UART_SetConfig+0x166>
 80046d4:	4b57      	ldr	r3, [pc, #348]	; (8004834 <UART_SetConfig+0x27c>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046e0:	d011      	beq.n	8004706 <UART_SetConfig+0x14e>
 80046e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046e6:	d817      	bhi.n	8004718 <UART_SetConfig+0x160>
 80046e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046ec:	d011      	beq.n	8004712 <UART_SetConfig+0x15a>
 80046ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046f2:	d811      	bhi.n	8004718 <UART_SetConfig+0x160>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <UART_SetConfig+0x148>
 80046f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046fc:	d006      	beq.n	800470c <UART_SetConfig+0x154>
 80046fe:	e00b      	b.n	8004718 <UART_SetConfig+0x160>
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e061      	b.n	80047ca <UART_SetConfig+0x212>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e05e      	b.n	80047ca <UART_SetConfig+0x212>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e05b      	b.n	80047ca <UART_SetConfig+0x212>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e058      	b.n	80047ca <UART_SetConfig+0x212>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e055      	b.n	80047ca <UART_SetConfig+0x212>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a47      	ldr	r2, [pc, #284]	; (8004840 <UART_SetConfig+0x288>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d124      	bne.n	8004772 <UART_SetConfig+0x1ba>
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <UART_SetConfig+0x27c>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004734:	d011      	beq.n	800475a <UART_SetConfig+0x1a2>
 8004736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800473a:	d817      	bhi.n	800476c <UART_SetConfig+0x1b4>
 800473c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004740:	d011      	beq.n	8004766 <UART_SetConfig+0x1ae>
 8004742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004746:	d811      	bhi.n	800476c <UART_SetConfig+0x1b4>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <UART_SetConfig+0x19c>
 800474c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004750:	d006      	beq.n	8004760 <UART_SetConfig+0x1a8>
 8004752:	e00b      	b.n	800476c <UART_SetConfig+0x1b4>
 8004754:	2300      	movs	r3, #0
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e037      	b.n	80047ca <UART_SetConfig+0x212>
 800475a:	2302      	movs	r3, #2
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e034      	b.n	80047ca <UART_SetConfig+0x212>
 8004760:	2304      	movs	r3, #4
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e031      	b.n	80047ca <UART_SetConfig+0x212>
 8004766:	2308      	movs	r3, #8
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e02e      	b.n	80047ca <UART_SetConfig+0x212>
 800476c:	2310      	movs	r3, #16
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e02b      	b.n	80047ca <UART_SetConfig+0x212>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <UART_SetConfig+0x28c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d124      	bne.n	80047c6 <UART_SetConfig+0x20e>
 800477c:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <UART_SetConfig+0x27c>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004788:	d011      	beq.n	80047ae <UART_SetConfig+0x1f6>
 800478a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800478e:	d817      	bhi.n	80047c0 <UART_SetConfig+0x208>
 8004790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004794:	d011      	beq.n	80047ba <UART_SetConfig+0x202>
 8004796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800479a:	d811      	bhi.n	80047c0 <UART_SetConfig+0x208>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <UART_SetConfig+0x1f0>
 80047a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a4:	d006      	beq.n	80047b4 <UART_SetConfig+0x1fc>
 80047a6:	e00b      	b.n	80047c0 <UART_SetConfig+0x208>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e00d      	b.n	80047ca <UART_SetConfig+0x212>
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e00a      	b.n	80047ca <UART_SetConfig+0x212>
 80047b4:	2304      	movs	r3, #4
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e007      	b.n	80047ca <UART_SetConfig+0x212>
 80047ba:	2308      	movs	r3, #8
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e004      	b.n	80047ca <UART_SetConfig+0x212>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e001      	b.n	80047ca <UART_SetConfig+0x212>
 80047c6:	2310      	movs	r3, #16
 80047c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d2:	d16b      	bne.n	80048ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d838      	bhi.n	800484c <UART_SetConfig+0x294>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x228>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800484d 	.word	0x0800484d
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7ff fc28 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8004808:	61b8      	str	r0, [r7, #24]
        break;
 800480a:	e024      	b.n	8004856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7ff fc46 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004810:	61b8      	str	r0, [r7, #24]
        break;
 8004812:	e020      	b.n	8004856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <UART_SetConfig+0x290>)
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e01d      	b.n	8004856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7ff fba7 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 800481e:	61b8      	str	r0, [r7, #24]
        break;
 8004820:	e019      	b.n	8004856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e015      	b.n	8004856 <UART_SetConfig+0x29e>
 800482a:	bf00      	nop
 800482c:	efff69f3 	.word	0xefff69f3
 8004830:	40013800 	.word	0x40013800
 8004834:	40021000 	.word	0x40021000
 8004838:	40004400 	.word	0x40004400
 800483c:	40004800 	.word	0x40004800
 8004840:	40004c00 	.word	0x40004c00
 8004844:	40005000 	.word	0x40005000
 8004848:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	77bb      	strb	r3, [r7, #30]
        break;
 8004854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d073      	beq.n	8004944 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	005a      	lsls	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b0f      	cmp	r3, #15
 8004876:	d916      	bls.n	80048a6 <UART_SetConfig+0x2ee>
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d212      	bcs.n	80048a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f023 030f 	bic.w	r3, r3, #15
 8004888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	b29a      	uxth	r2, r3
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	4313      	orrs	r3, r2
 800489a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	60da      	str	r2, [r3, #12]
 80048a4:	e04e      	b.n	8004944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	77bb      	strb	r3, [r7, #30]
 80048aa:	e04b      	b.n	8004944 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d827      	bhi.n	8004902 <UART_SetConfig+0x34a>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x300>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	08004903 	.word	0x08004903
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	08004903 	.word	0x08004903
 80048d0:	08004903 	.word	0x08004903
 80048d4:	08004903 	.word	0x08004903
 80048d8:	080048fb 	.word	0x080048fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7ff fbbc 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61b8      	str	r0, [r7, #24]
        break;
 80048e2:	e013      	b.n	800490c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7ff fbda 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80048e8:	61b8      	str	r0, [r7, #24]
        break;
 80048ea:	e00f      	b.n	800490c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <UART_SetConfig+0x3a4>)
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e00c      	b.n	800490c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f2:	f7ff fb3b 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 80048f6:	61b8      	str	r0, [r7, #24]
        break;
 80048f8:	e008      	b.n	800490c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	61bb      	str	r3, [r7, #24]
        break;
 8004900:	e004      	b.n	800490c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	77bb      	strb	r3, [r7, #30]
        break;
 800490a:	bf00      	nop
    }

    if (pclk != 0U)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	085a      	lsrs	r2, r3, #1
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b0f      	cmp	r3, #15
 800492a:	d909      	bls.n	8004940 <UART_SetConfig+0x388>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004932:	d205      	bcs.n	8004940 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e001      	b.n	8004944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004950:	7fbb      	ldrb	r3, [r7, #30]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	007a1200 	.word	0x007a1200

08004960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d10a      	bne.n	8004a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b098      	sub	sp, #96	; 0x60
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab4:	f7fc fd0a 	bl	80014cc <HAL_GetTick>
 8004ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d12e      	bne.n	8004b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f88c 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d021      	beq.n	8004b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
 8004b02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e062      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d149      	bne.n	8004bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f856 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03c      	beq.n	8004bc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e011      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3758      	adds	r7, #88	; 0x58
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	e049      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d045      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc fc5d 	bl	80014cc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e048      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d031      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d110      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f838 	bl	8004cc2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2208      	movs	r2, #8
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	d111      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81e 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0a6      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b095      	sub	sp, #84	; 0x54
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d118      	bne.n	8004d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	613b      	str	r3, [r7, #16]
   return(result);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	; 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <__errno>:
 8004d8c:	4b01      	ldr	r3, [pc, #4]	; (8004d94 <__errno+0x8>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	2000000c 	.word	0x2000000c

08004d98 <__libc_init_array>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	4d0d      	ldr	r5, [pc, #52]	; (8004dd0 <__libc_init_array+0x38>)
 8004d9c:	4c0d      	ldr	r4, [pc, #52]	; (8004dd4 <__libc_init_array+0x3c>)
 8004d9e:	1b64      	subs	r4, r4, r5
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	2600      	movs	r6, #0
 8004da4:	42a6      	cmp	r6, r4
 8004da6:	d109      	bne.n	8004dbc <__libc_init_array+0x24>
 8004da8:	4d0b      	ldr	r5, [pc, #44]	; (8004dd8 <__libc_init_array+0x40>)
 8004daa:	4c0c      	ldr	r4, [pc, #48]	; (8004ddc <__libc_init_array+0x44>)
 8004dac:	f002 ff04 	bl	8007bb8 <_init>
 8004db0:	1b64      	subs	r4, r4, r5
 8004db2:	10a4      	asrs	r4, r4, #2
 8004db4:	2600      	movs	r6, #0
 8004db6:	42a6      	cmp	r6, r4
 8004db8:	d105      	bne.n	8004dc6 <__libc_init_array+0x2e>
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc0:	4798      	blx	r3
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e7ee      	b.n	8004da4 <__libc_init_array+0xc>
 8004dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dca:	4798      	blx	r3
 8004dcc:	3601      	adds	r6, #1
 8004dce:	e7f2      	b.n	8004db6 <__libc_init_array+0x1e>
 8004dd0:	08007ffc 	.word	0x08007ffc
 8004dd4:	08007ffc 	.word	0x08007ffc
 8004dd8:	08007ffc 	.word	0x08007ffc
 8004ddc:	08008000 	.word	0x08008000

08004de0 <memset>:
 8004de0:	4402      	add	r2, r0
 8004de2:	4603      	mov	r3, r0
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d100      	bne.n	8004dea <memset+0xa>
 8004de8:	4770      	bx	lr
 8004dea:	f803 1b01 	strb.w	r1, [r3], #1
 8004dee:	e7f9      	b.n	8004de4 <memset+0x4>

08004df0 <__cvt>:
 8004df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	ec55 4b10 	vmov	r4, r5, d0
 8004df8:	2d00      	cmp	r5, #0
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	462b      	mov	r3, r5
 8004e00:	bfbb      	ittet	lt
 8004e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e06:	461d      	movlt	r5, r3
 8004e08:	2300      	movge	r3, #0
 8004e0a:	232d      	movlt	r3, #45	; 0x2d
 8004e0c:	700b      	strb	r3, [r1, #0]
 8004e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e14:	4691      	mov	r9, r2
 8004e16:	f023 0820 	bic.w	r8, r3, #32
 8004e1a:	bfbc      	itt	lt
 8004e1c:	4622      	movlt	r2, r4
 8004e1e:	4614      	movlt	r4, r2
 8004e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e24:	d005      	beq.n	8004e32 <__cvt+0x42>
 8004e26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e2a:	d100      	bne.n	8004e2e <__cvt+0x3e>
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	2102      	movs	r1, #2
 8004e30:	e000      	b.n	8004e34 <__cvt+0x44>
 8004e32:	2103      	movs	r1, #3
 8004e34:	ab03      	add	r3, sp, #12
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	ab02      	add	r3, sp, #8
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	ec45 4b10 	vmov	d0, r4, r5
 8004e40:	4653      	mov	r3, sl
 8004e42:	4632      	mov	r2, r6
 8004e44:	f000 fcec 	bl	8005820 <_dtoa_r>
 8004e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	d102      	bne.n	8004e56 <__cvt+0x66>
 8004e50:	f019 0f01 	tst.w	r9, #1
 8004e54:	d022      	beq.n	8004e9c <__cvt+0xac>
 8004e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e5a:	eb07 0906 	add.w	r9, r7, r6
 8004e5e:	d110      	bne.n	8004e82 <__cvt+0x92>
 8004e60:	783b      	ldrb	r3, [r7, #0]
 8004e62:	2b30      	cmp	r3, #48	; 0x30
 8004e64:	d10a      	bne.n	8004e7c <__cvt+0x8c>
 8004e66:	2200      	movs	r2, #0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7fb fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e72:	b918      	cbnz	r0, 8004e7c <__cvt+0x8c>
 8004e74:	f1c6 0601 	rsb	r6, r6, #1
 8004e78:	f8ca 6000 	str.w	r6, [sl]
 8004e7c:	f8da 3000 	ldr.w	r3, [sl]
 8004e80:	4499      	add	r9, r3
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e8e:	b108      	cbz	r0, 8004e94 <__cvt+0xa4>
 8004e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e94:	2230      	movs	r2, #48	; 0x30
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	454b      	cmp	r3, r9
 8004e9a:	d307      	bcc.n	8004eac <__cvt+0xbc>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ea0:	1bdb      	subs	r3, r3, r7
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	b004      	add	sp, #16
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	1c59      	adds	r1, r3, #1
 8004eae:	9103      	str	r1, [sp, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e7f0      	b.n	8004e96 <__cvt+0xa6>

08004eb4 <__exponent>:
 8004eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	bfb8      	it	lt
 8004ebc:	4249      	neglt	r1, r1
 8004ebe:	f803 2b02 	strb.w	r2, [r3], #2
 8004ec2:	bfb4      	ite	lt
 8004ec4:	222d      	movlt	r2, #45	; 0x2d
 8004ec6:	222b      	movge	r2, #43	; 0x2b
 8004ec8:	2909      	cmp	r1, #9
 8004eca:	7042      	strb	r2, [r0, #1]
 8004ecc:	dd2a      	ble.n	8004f24 <__exponent+0x70>
 8004ece:	f10d 0407 	add.w	r4, sp, #7
 8004ed2:	46a4      	mov	ip, r4
 8004ed4:	270a      	movs	r7, #10
 8004ed6:	46a6      	mov	lr, r4
 8004ed8:	460a      	mov	r2, r1
 8004eda:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ede:	fb07 1516 	mls	r5, r7, r6, r1
 8004ee2:	3530      	adds	r5, #48	; 0x30
 8004ee4:	2a63      	cmp	r2, #99	; 0x63
 8004ee6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004eea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004eee:	4631      	mov	r1, r6
 8004ef0:	dcf1      	bgt.n	8004ed6 <__exponent+0x22>
 8004ef2:	3130      	adds	r1, #48	; 0x30
 8004ef4:	f1ae 0502 	sub.w	r5, lr, #2
 8004ef8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004efc:	1c44      	adds	r4, r0, #1
 8004efe:	4629      	mov	r1, r5
 8004f00:	4561      	cmp	r1, ip
 8004f02:	d30a      	bcc.n	8004f1a <__exponent+0x66>
 8004f04:	f10d 0209 	add.w	r2, sp, #9
 8004f08:	eba2 020e 	sub.w	r2, r2, lr
 8004f0c:	4565      	cmp	r5, ip
 8004f0e:	bf88      	it	hi
 8004f10:	2200      	movhi	r2, #0
 8004f12:	4413      	add	r3, r2
 8004f14:	1a18      	subs	r0, r3, r0
 8004f16:	b003      	add	sp, #12
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f22:	e7ed      	b.n	8004f00 <__exponent+0x4c>
 8004f24:	2330      	movs	r3, #48	; 0x30
 8004f26:	3130      	adds	r1, #48	; 0x30
 8004f28:	7083      	strb	r3, [r0, #2]
 8004f2a:	70c1      	strb	r1, [r0, #3]
 8004f2c:	1d03      	adds	r3, r0, #4
 8004f2e:	e7f1      	b.n	8004f14 <__exponent+0x60>

08004f30 <_printf_float>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	ed2d 8b02 	vpush	{d8}
 8004f38:	b08d      	sub	sp, #52	; 0x34
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f40:	4616      	mov	r6, r2
 8004f42:	461f      	mov	r7, r3
 8004f44:	4605      	mov	r5, r0
 8004f46:	f001 fa59 	bl	80063fc <_localeconv_r>
 8004f4a:	f8d0 a000 	ldr.w	sl, [r0]
 8004f4e:	4650      	mov	r0, sl
 8004f50:	f7fb f946 	bl	80001e0 <strlen>
 8004f54:	2300      	movs	r3, #0
 8004f56:	930a      	str	r3, [sp, #40]	; 0x28
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	9305      	str	r3, [sp, #20]
 8004f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f64:	3307      	adds	r3, #7
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	f103 0208 	add.w	r2, r3, #8
 8004f6e:	f8c8 2000 	str.w	r2, [r8]
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f88:	ee08 0a10 	vmov	s16, r0
 8004f8c:	4b9f      	ldr	r3, [pc, #636]	; (800520c <_printf_float+0x2dc>)
 8004f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	f7fb fdd1 	bl	8000b3c <__aeabi_dcmpun>
 8004f9a:	bb88      	cbnz	r0, 8005000 <_printf_float+0xd0>
 8004f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fa0:	4b9a      	ldr	r3, [pc, #616]	; (800520c <_printf_float+0x2dc>)
 8004fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa6:	f7fb fdab 	bl	8000b00 <__aeabi_dcmple>
 8004faa:	bb48      	cbnz	r0, 8005000 <_printf_float+0xd0>
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb fd9a 	bl	8000aec <__aeabi_dcmplt>
 8004fb8:	b110      	cbz	r0, 8004fc0 <_printf_float+0x90>
 8004fba:	232d      	movs	r3, #45	; 0x2d
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc0:	4b93      	ldr	r3, [pc, #588]	; (8005210 <_printf_float+0x2e0>)
 8004fc2:	4894      	ldr	r0, [pc, #592]	; (8005214 <_printf_float+0x2e4>)
 8004fc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fc8:	bf94      	ite	ls
 8004fca:	4698      	movls	r8, r3
 8004fcc:	4680      	movhi	r8, r0
 8004fce:	2303      	movs	r3, #3
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	9b05      	ldr	r3, [sp, #20]
 8004fd4:	f023 0204 	bic.w	r2, r3, #4
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	f04f 0900 	mov.w	r9, #0
 8004fde:	9700      	str	r7, [sp, #0]
 8004fe0:	4633      	mov	r3, r6
 8004fe2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f9d8 	bl	800539c <_printf_common>
 8004fec:	3001      	adds	r0, #1
 8004fee:	f040 8090 	bne.w	8005112 <_printf_float+0x1e2>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	b00d      	add	sp, #52	; 0x34
 8004ff8:	ecbd 8b02 	vpop	{d8}
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fd98 	bl	8000b3c <__aeabi_dcmpun>
 800500c:	b140      	cbz	r0, 8005020 <_printf_float+0xf0>
 800500e:	464b      	mov	r3, r9
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfbc      	itt	lt
 8005014:	232d      	movlt	r3, #45	; 0x2d
 8005016:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800501a:	487f      	ldr	r0, [pc, #508]	; (8005218 <_printf_float+0x2e8>)
 800501c:	4b7f      	ldr	r3, [pc, #508]	; (800521c <_printf_float+0x2ec>)
 800501e:	e7d1      	b.n	8004fc4 <_printf_float+0x94>
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005026:	9206      	str	r2, [sp, #24]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	d13f      	bne.n	80050ac <_printf_float+0x17c>
 800502c:	2306      	movs	r3, #6
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	9b05      	ldr	r3, [sp, #20]
 8005032:	6861      	ldr	r1, [r4, #4]
 8005034:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005038:	2300      	movs	r3, #0
 800503a:	9303      	str	r3, [sp, #12]
 800503c:	ab0a      	add	r3, sp, #40	; 0x28
 800503e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005042:	ab09      	add	r3, sp, #36	; 0x24
 8005044:	ec49 8b10 	vmov	d0, r8, r9
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005050:	4628      	mov	r0, r5
 8005052:	f7ff fecd 	bl	8004df0 <__cvt>
 8005056:	9b06      	ldr	r3, [sp, #24]
 8005058:	9909      	ldr	r1, [sp, #36]	; 0x24
 800505a:	2b47      	cmp	r3, #71	; 0x47
 800505c:	4680      	mov	r8, r0
 800505e:	d108      	bne.n	8005072 <_printf_float+0x142>
 8005060:	1cc8      	adds	r0, r1, #3
 8005062:	db02      	blt.n	800506a <_printf_float+0x13a>
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	4299      	cmp	r1, r3
 8005068:	dd41      	ble.n	80050ee <_printf_float+0x1be>
 800506a:	f1ab 0b02 	sub.w	fp, fp, #2
 800506e:	fa5f fb8b 	uxtb.w	fp, fp
 8005072:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005076:	d820      	bhi.n	80050ba <_printf_float+0x18a>
 8005078:	3901      	subs	r1, #1
 800507a:	465a      	mov	r2, fp
 800507c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005080:	9109      	str	r1, [sp, #36]	; 0x24
 8005082:	f7ff ff17 	bl	8004eb4 <__exponent>
 8005086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005088:	1813      	adds	r3, r2, r0
 800508a:	2a01      	cmp	r2, #1
 800508c:	4681      	mov	r9, r0
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	dc02      	bgt.n	8005098 <_printf_float+0x168>
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	07d2      	lsls	r2, r2, #31
 8005096:	d501      	bpl.n	800509c <_printf_float+0x16c>
 8005098:	3301      	adds	r3, #1
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d09c      	beq.n	8004fde <_printf_float+0xae>
 80050a4:	232d      	movs	r3, #45	; 0x2d
 80050a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050aa:	e798      	b.n	8004fde <_printf_float+0xae>
 80050ac:	9a06      	ldr	r2, [sp, #24]
 80050ae:	2a47      	cmp	r2, #71	; 0x47
 80050b0:	d1be      	bne.n	8005030 <_printf_float+0x100>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1bc      	bne.n	8005030 <_printf_float+0x100>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7b9      	b.n	800502e <_printf_float+0xfe>
 80050ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050be:	d118      	bne.n	80050f2 <_printf_float+0x1c2>
 80050c0:	2900      	cmp	r1, #0
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	dd0b      	ble.n	80050de <_printf_float+0x1ae>
 80050c6:	6121      	str	r1, [r4, #16]
 80050c8:	b913      	cbnz	r3, 80050d0 <_printf_float+0x1a0>
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	07d0      	lsls	r0, r2, #31
 80050ce:	d502      	bpl.n	80050d6 <_printf_float+0x1a6>
 80050d0:	3301      	adds	r3, #1
 80050d2:	440b      	add	r3, r1
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80050d8:	f04f 0900 	mov.w	r9, #0
 80050dc:	e7de      	b.n	800509c <_printf_float+0x16c>
 80050de:	b913      	cbnz	r3, 80050e6 <_printf_float+0x1b6>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	07d2      	lsls	r2, r2, #31
 80050e4:	d501      	bpl.n	80050ea <_printf_float+0x1ba>
 80050e6:	3302      	adds	r3, #2
 80050e8:	e7f4      	b.n	80050d4 <_printf_float+0x1a4>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e7f2      	b.n	80050d4 <_printf_float+0x1a4>
 80050ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f4:	4299      	cmp	r1, r3
 80050f6:	db05      	blt.n	8005104 <_printf_float+0x1d4>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	6121      	str	r1, [r4, #16]
 80050fc:	07d8      	lsls	r0, r3, #31
 80050fe:	d5ea      	bpl.n	80050d6 <_printf_float+0x1a6>
 8005100:	1c4b      	adds	r3, r1, #1
 8005102:	e7e7      	b.n	80050d4 <_printf_float+0x1a4>
 8005104:	2900      	cmp	r1, #0
 8005106:	bfd4      	ite	le
 8005108:	f1c1 0202 	rsble	r2, r1, #2
 800510c:	2201      	movgt	r2, #1
 800510e:	4413      	add	r3, r2
 8005110:	e7e0      	b.n	80050d4 <_printf_float+0x1a4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	055a      	lsls	r2, r3, #21
 8005116:	d407      	bmi.n	8005128 <_printf_float+0x1f8>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	4642      	mov	r2, r8
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	d12c      	bne.n	8005180 <_printf_float+0x250>
 8005126:	e764      	b.n	8004ff2 <_printf_float+0xc2>
 8005128:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800512c:	f240 80e0 	bls.w	80052f0 <_printf_float+0x3c0>
 8005130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	f7fb fcce 	bl	8000ad8 <__aeabi_dcmpeq>
 800513c:	2800      	cmp	r0, #0
 800513e:	d034      	beq.n	80051aa <_printf_float+0x27a>
 8005140:	4a37      	ldr	r2, [pc, #220]	; (8005220 <_printf_float+0x2f0>)
 8005142:	2301      	movs	r3, #1
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	f43f af51 	beq.w	8004ff2 <_printf_float+0xc2>
 8005150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005154:	429a      	cmp	r2, r3
 8005156:	db02      	blt.n	800515e <_printf_float+0x22e>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	07d8      	lsls	r0, r3, #31
 800515c:	d510      	bpl.n	8005180 <_printf_float+0x250>
 800515e:	ee18 3a10 	vmov	r3, s16
 8005162:	4652      	mov	r2, sl
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f af41 	beq.w	8004ff2 <_printf_float+0xc2>
 8005170:	f04f 0800 	mov.w	r8, #0
 8005174:	f104 091a 	add.w	r9, r4, #26
 8005178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	4543      	cmp	r3, r8
 800517e:	dc09      	bgt.n	8005194 <_printf_float+0x264>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	079b      	lsls	r3, r3, #30
 8005184:	f100 8105 	bmi.w	8005392 <_printf_float+0x462>
 8005188:	68e0      	ldr	r0, [r4, #12]
 800518a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800518c:	4298      	cmp	r0, r3
 800518e:	bfb8      	it	lt
 8005190:	4618      	movlt	r0, r3
 8005192:	e730      	b.n	8004ff6 <_printf_float+0xc6>
 8005194:	2301      	movs	r3, #1
 8005196:	464a      	mov	r2, r9
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f af27 	beq.w	8004ff2 <_printf_float+0xc2>
 80051a4:	f108 0801 	add.w	r8, r8, #1
 80051a8:	e7e6      	b.n	8005178 <_printf_float+0x248>
 80051aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dc39      	bgt.n	8005224 <_printf_float+0x2f4>
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <_printf_float+0x2f0>)
 80051b2:	2301      	movs	r3, #1
 80051b4:	4631      	mov	r1, r6
 80051b6:	4628      	mov	r0, r5
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	f43f af19 	beq.w	8004ff2 <_printf_float+0xc2>
 80051c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c4:	4313      	orrs	r3, r2
 80051c6:	d102      	bne.n	80051ce <_printf_float+0x29e>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	d5d8      	bpl.n	8005180 <_printf_float+0x250>
 80051ce:	ee18 3a10 	vmov	r3, s16
 80051d2:	4652      	mov	r2, sl
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	f43f af09 	beq.w	8004ff2 <_printf_float+0xc2>
 80051e0:	f04f 0900 	mov.w	r9, #0
 80051e4:	f104 0a1a 	add.w	sl, r4, #26
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	425b      	negs	r3, r3
 80051ec:	454b      	cmp	r3, r9
 80051ee:	dc01      	bgt.n	80051f4 <_printf_float+0x2c4>
 80051f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f2:	e792      	b.n	800511a <_printf_float+0x1ea>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4652      	mov	r2, sl
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f aef7 	beq.w	8004ff2 <_printf_float+0xc2>
 8005204:	f109 0901 	add.w	r9, r9, #1
 8005208:	e7ee      	b.n	80051e8 <_printf_float+0x2b8>
 800520a:	bf00      	nop
 800520c:	7fefffff 	.word	0x7fefffff
 8005210:	08007c24 	.word	0x08007c24
 8005214:	08007c28 	.word	0x08007c28
 8005218:	08007c30 	.word	0x08007c30
 800521c:	08007c2c 	.word	0x08007c2c
 8005220:	08007c34 	.word	0x08007c34
 8005224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005228:	429a      	cmp	r2, r3
 800522a:	bfa8      	it	ge
 800522c:	461a      	movge	r2, r3
 800522e:	2a00      	cmp	r2, #0
 8005230:	4691      	mov	r9, r2
 8005232:	dc37      	bgt.n	80052a4 <_printf_float+0x374>
 8005234:	f04f 0b00 	mov.w	fp, #0
 8005238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800523c:	f104 021a 	add.w	r2, r4, #26
 8005240:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	eba3 0309 	sub.w	r3, r3, r9
 8005248:	455b      	cmp	r3, fp
 800524a:	dc33      	bgt.n	80052b4 <_printf_float+0x384>
 800524c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005250:	429a      	cmp	r2, r3
 8005252:	db3b      	blt.n	80052cc <_printf_float+0x39c>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	07da      	lsls	r2, r3, #31
 8005258:	d438      	bmi.n	80052cc <_printf_float+0x39c>
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	9a05      	ldr	r2, [sp, #20]
 800525e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005260:	1a9a      	subs	r2, r3, r2
 8005262:	eba3 0901 	sub.w	r9, r3, r1
 8005266:	4591      	cmp	r9, r2
 8005268:	bfa8      	it	ge
 800526a:	4691      	movge	r9, r2
 800526c:	f1b9 0f00 	cmp.w	r9, #0
 8005270:	dc35      	bgt.n	80052de <_printf_float+0x3ae>
 8005272:	f04f 0800 	mov.w	r8, #0
 8005276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800527a:	f104 0a1a 	add.w	sl, r4, #26
 800527e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	eba3 0309 	sub.w	r3, r3, r9
 8005288:	4543      	cmp	r3, r8
 800528a:	f77f af79 	ble.w	8005180 <_printf_float+0x250>
 800528e:	2301      	movs	r3, #1
 8005290:	4652      	mov	r2, sl
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f aeaa 	beq.w	8004ff2 <_printf_float+0xc2>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	e7ec      	b.n	800527e <_printf_float+0x34e>
 80052a4:	4613      	mov	r3, r2
 80052a6:	4631      	mov	r1, r6
 80052a8:	4642      	mov	r2, r8
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	d1c0      	bne.n	8005234 <_printf_float+0x304>
 80052b2:	e69e      	b.n	8004ff2 <_printf_float+0xc2>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	9205      	str	r2, [sp, #20]
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f ae97 	beq.w	8004ff2 <_printf_float+0xc2>
 80052c4:	9a05      	ldr	r2, [sp, #20]
 80052c6:	f10b 0b01 	add.w	fp, fp, #1
 80052ca:	e7b9      	b.n	8005240 <_printf_float+0x310>
 80052cc:	ee18 3a10 	vmov	r3, s16
 80052d0:	4652      	mov	r2, sl
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	d1be      	bne.n	800525a <_printf_float+0x32a>
 80052dc:	e689      	b.n	8004ff2 <_printf_float+0xc2>
 80052de:	9a05      	ldr	r2, [sp, #20]
 80052e0:	464b      	mov	r3, r9
 80052e2:	4442      	add	r2, r8
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	d1c1      	bne.n	8005272 <_printf_float+0x342>
 80052ee:	e680      	b.n	8004ff2 <_printf_float+0xc2>
 80052f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052f2:	2a01      	cmp	r2, #1
 80052f4:	dc01      	bgt.n	80052fa <_printf_float+0x3ca>
 80052f6:	07db      	lsls	r3, r3, #31
 80052f8:	d538      	bpl.n	800536c <_printf_float+0x43c>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4642      	mov	r2, r8
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	f43f ae74 	beq.w	8004ff2 <_printf_float+0xc2>
 800530a:	ee18 3a10 	vmov	r3, s16
 800530e:	4652      	mov	r2, sl
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f ae6b 	beq.w	8004ff2 <_printf_float+0xc2>
 800531c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	f7fb fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005328:	b9d8      	cbnz	r0, 8005362 <_printf_float+0x432>
 800532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532c:	f108 0201 	add.w	r2, r8, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d10e      	bne.n	800535a <_printf_float+0x42a>
 800533c:	e659      	b.n	8004ff2 <_printf_float+0xc2>
 800533e:	2301      	movs	r3, #1
 8005340:	4652      	mov	r2, sl
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f ae52 	beq.w	8004ff2 <_printf_float+0xc2>
 800534e:	f108 0801 	add.w	r8, r8, #1
 8005352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	4543      	cmp	r3, r8
 8005358:	dcf1      	bgt.n	800533e <_printf_float+0x40e>
 800535a:	464b      	mov	r3, r9
 800535c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005360:	e6dc      	b.n	800511c <_printf_float+0x1ec>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	f104 0a1a 	add.w	sl, r4, #26
 800536a:	e7f2      	b.n	8005352 <_printf_float+0x422>
 800536c:	2301      	movs	r3, #1
 800536e:	4642      	mov	r2, r8
 8005370:	e7df      	b.n	8005332 <_printf_float+0x402>
 8005372:	2301      	movs	r3, #1
 8005374:	464a      	mov	r2, r9
 8005376:	4631      	mov	r1, r6
 8005378:	4628      	mov	r0, r5
 800537a:	47b8      	blx	r7
 800537c:	3001      	adds	r0, #1
 800537e:	f43f ae38 	beq.w	8004ff2 <_printf_float+0xc2>
 8005382:	f108 0801 	add.w	r8, r8, #1
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800538a:	1a5b      	subs	r3, r3, r1
 800538c:	4543      	cmp	r3, r8
 800538e:	dcf0      	bgt.n	8005372 <_printf_float+0x442>
 8005390:	e6fa      	b.n	8005188 <_printf_float+0x258>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	f104 0919 	add.w	r9, r4, #25
 800539a:	e7f4      	b.n	8005386 <_printf_float+0x456>

0800539c <_printf_common>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	4616      	mov	r6, r2
 80053a2:	4699      	mov	r9, r3
 80053a4:	688a      	ldr	r2, [r1, #8]
 80053a6:	690b      	ldr	r3, [r1, #16]
 80053a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ac:	4293      	cmp	r3, r2
 80053ae:	bfb8      	it	lt
 80053b0:	4613      	movlt	r3, r2
 80053b2:	6033      	str	r3, [r6, #0]
 80053b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b8:	4607      	mov	r7, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	b10a      	cbz	r2, 80053c2 <_printf_common+0x26>
 80053be:	3301      	adds	r3, #1
 80053c0:	6033      	str	r3, [r6, #0]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	0699      	lsls	r1, r3, #26
 80053c6:	bf42      	ittt	mi
 80053c8:	6833      	ldrmi	r3, [r6, #0]
 80053ca:	3302      	addmi	r3, #2
 80053cc:	6033      	strmi	r3, [r6, #0]
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	f015 0506 	ands.w	r5, r5, #6
 80053d4:	d106      	bne.n	80053e4 <_printf_common+0x48>
 80053d6:	f104 0a19 	add.w	sl, r4, #25
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	6832      	ldr	r2, [r6, #0]
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	42ab      	cmp	r3, r5
 80053e2:	dc26      	bgt.n	8005432 <_printf_common+0x96>
 80053e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e8:	1e13      	subs	r3, r2, #0
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	bf18      	it	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	0692      	lsls	r2, r2, #26
 80053f2:	d42b      	bmi.n	800544c <_printf_common+0xb0>
 80053f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f8:	4649      	mov	r1, r9
 80053fa:	4638      	mov	r0, r7
 80053fc:	47c0      	blx	r8
 80053fe:	3001      	adds	r0, #1
 8005400:	d01e      	beq.n	8005440 <_printf_common+0xa4>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	68e5      	ldr	r5, [r4, #12]
 8005406:	6832      	ldr	r2, [r6, #0]
 8005408:	f003 0306 	and.w	r3, r3, #6
 800540c:	2b04      	cmp	r3, #4
 800540e:	bf08      	it	eq
 8005410:	1aad      	subeq	r5, r5, r2
 8005412:	68a3      	ldr	r3, [r4, #8]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	bf0c      	ite	eq
 8005418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800541c:	2500      	movne	r5, #0
 800541e:	4293      	cmp	r3, r2
 8005420:	bfc4      	itt	gt
 8005422:	1a9b      	subgt	r3, r3, r2
 8005424:	18ed      	addgt	r5, r5, r3
 8005426:	2600      	movs	r6, #0
 8005428:	341a      	adds	r4, #26
 800542a:	42b5      	cmp	r5, r6
 800542c:	d11a      	bne.n	8005464 <_printf_common+0xc8>
 800542e:	2000      	movs	r0, #0
 8005430:	e008      	b.n	8005444 <_printf_common+0xa8>
 8005432:	2301      	movs	r3, #1
 8005434:	4652      	mov	r2, sl
 8005436:	4649      	mov	r1, r9
 8005438:	4638      	mov	r0, r7
 800543a:	47c0      	blx	r8
 800543c:	3001      	adds	r0, #1
 800543e:	d103      	bne.n	8005448 <_printf_common+0xac>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005448:	3501      	adds	r5, #1
 800544a:	e7c6      	b.n	80053da <_printf_common+0x3e>
 800544c:	18e1      	adds	r1, r4, r3
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	2030      	movs	r0, #48	; 0x30
 8005452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005456:	4422      	add	r2, r4
 8005458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800545c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005460:	3302      	adds	r3, #2
 8005462:	e7c7      	b.n	80053f4 <_printf_common+0x58>
 8005464:	2301      	movs	r3, #1
 8005466:	4622      	mov	r2, r4
 8005468:	4649      	mov	r1, r9
 800546a:	4638      	mov	r0, r7
 800546c:	47c0      	blx	r8
 800546e:	3001      	adds	r0, #1
 8005470:	d0e6      	beq.n	8005440 <_printf_common+0xa4>
 8005472:	3601      	adds	r6, #1
 8005474:	e7d9      	b.n	800542a <_printf_common+0x8e>
	...

08005478 <_printf_i>:
 8005478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	7e0f      	ldrb	r7, [r1, #24]
 800547e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005480:	2f78      	cmp	r7, #120	; 0x78
 8005482:	4691      	mov	r9, r2
 8005484:	4680      	mov	r8, r0
 8005486:	460c      	mov	r4, r1
 8005488:	469a      	mov	sl, r3
 800548a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548e:	d807      	bhi.n	80054a0 <_printf_i+0x28>
 8005490:	2f62      	cmp	r7, #98	; 0x62
 8005492:	d80a      	bhi.n	80054aa <_printf_i+0x32>
 8005494:	2f00      	cmp	r7, #0
 8005496:	f000 80d8 	beq.w	800564a <_printf_i+0x1d2>
 800549a:	2f58      	cmp	r7, #88	; 0x58
 800549c:	f000 80a3 	beq.w	80055e6 <_printf_i+0x16e>
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a8:	e03a      	b.n	8005520 <_printf_i+0xa8>
 80054aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ae:	2b15      	cmp	r3, #21
 80054b0:	d8f6      	bhi.n	80054a0 <_printf_i+0x28>
 80054b2:	a101      	add	r1, pc, #4	; (adr r1, 80054b8 <_printf_i+0x40>)
 80054b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b8:	08005511 	.word	0x08005511
 80054bc:	08005525 	.word	0x08005525
 80054c0:	080054a1 	.word	0x080054a1
 80054c4:	080054a1 	.word	0x080054a1
 80054c8:	080054a1 	.word	0x080054a1
 80054cc:	080054a1 	.word	0x080054a1
 80054d0:	08005525 	.word	0x08005525
 80054d4:	080054a1 	.word	0x080054a1
 80054d8:	080054a1 	.word	0x080054a1
 80054dc:	080054a1 	.word	0x080054a1
 80054e0:	080054a1 	.word	0x080054a1
 80054e4:	08005631 	.word	0x08005631
 80054e8:	08005555 	.word	0x08005555
 80054ec:	08005613 	.word	0x08005613
 80054f0:	080054a1 	.word	0x080054a1
 80054f4:	080054a1 	.word	0x080054a1
 80054f8:	08005653 	.word	0x08005653
 80054fc:	080054a1 	.word	0x080054a1
 8005500:	08005555 	.word	0x08005555
 8005504:	080054a1 	.word	0x080054a1
 8005508:	080054a1 	.word	0x080054a1
 800550c:	0800561b 	.word	0x0800561b
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	602a      	str	r2, [r5, #0]
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005520:	2301      	movs	r3, #1
 8005522:	e0a3      	b.n	800566c <_printf_i+0x1f4>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	6829      	ldr	r1, [r5, #0]
 8005528:	0606      	lsls	r6, r0, #24
 800552a:	f101 0304 	add.w	r3, r1, #4
 800552e:	d50a      	bpl.n	8005546 <_printf_i+0xce>
 8005530:	680e      	ldr	r6, [r1, #0]
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	2e00      	cmp	r6, #0
 8005536:	da03      	bge.n	8005540 <_printf_i+0xc8>
 8005538:	232d      	movs	r3, #45	; 0x2d
 800553a:	4276      	negs	r6, r6
 800553c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005540:	485e      	ldr	r0, [pc, #376]	; (80056bc <_printf_i+0x244>)
 8005542:	230a      	movs	r3, #10
 8005544:	e019      	b.n	800557a <_printf_i+0x102>
 8005546:	680e      	ldr	r6, [r1, #0]
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800554e:	bf18      	it	ne
 8005550:	b236      	sxthne	r6, r6
 8005552:	e7ef      	b.n	8005534 <_printf_i+0xbc>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	1d19      	adds	r1, r3, #4
 800555a:	6029      	str	r1, [r5, #0]
 800555c:	0601      	lsls	r1, r0, #24
 800555e:	d501      	bpl.n	8005564 <_printf_i+0xec>
 8005560:	681e      	ldr	r6, [r3, #0]
 8005562:	e002      	b.n	800556a <_printf_i+0xf2>
 8005564:	0646      	lsls	r6, r0, #25
 8005566:	d5fb      	bpl.n	8005560 <_printf_i+0xe8>
 8005568:	881e      	ldrh	r6, [r3, #0]
 800556a:	4854      	ldr	r0, [pc, #336]	; (80056bc <_printf_i+0x244>)
 800556c:	2f6f      	cmp	r7, #111	; 0x6f
 800556e:	bf0c      	ite	eq
 8005570:	2308      	moveq	r3, #8
 8005572:	230a      	movne	r3, #10
 8005574:	2100      	movs	r1, #0
 8005576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800557a:	6865      	ldr	r5, [r4, #4]
 800557c:	60a5      	str	r5, [r4, #8]
 800557e:	2d00      	cmp	r5, #0
 8005580:	bfa2      	ittt	ge
 8005582:	6821      	ldrge	r1, [r4, #0]
 8005584:	f021 0104 	bicge.w	r1, r1, #4
 8005588:	6021      	strge	r1, [r4, #0]
 800558a:	b90e      	cbnz	r6, 8005590 <_printf_i+0x118>
 800558c:	2d00      	cmp	r5, #0
 800558e:	d04d      	beq.n	800562c <_printf_i+0x1b4>
 8005590:	4615      	mov	r5, r2
 8005592:	fbb6 f1f3 	udiv	r1, r6, r3
 8005596:	fb03 6711 	mls	r7, r3, r1, r6
 800559a:	5dc7      	ldrb	r7, [r0, r7]
 800559c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055a0:	4637      	mov	r7, r6
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	460e      	mov	r6, r1
 80055a6:	d9f4      	bls.n	8005592 <_printf_i+0x11a>
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10b      	bne.n	80055c4 <_printf_i+0x14c>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07de      	lsls	r6, r3, #31
 80055b0:	d508      	bpl.n	80055c4 <_printf_i+0x14c>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4299      	cmp	r1, r3
 80055b8:	bfde      	ittt	le
 80055ba:	2330      	movle	r3, #48	; 0x30
 80055bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055c4:	1b52      	subs	r2, r2, r5
 80055c6:	6122      	str	r2, [r4, #16]
 80055c8:	f8cd a000 	str.w	sl, [sp]
 80055cc:	464b      	mov	r3, r9
 80055ce:	aa03      	add	r2, sp, #12
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fee2 	bl	800539c <_printf_common>
 80055d8:	3001      	adds	r0, #1
 80055da:	d14c      	bne.n	8005676 <_printf_i+0x1fe>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	b004      	add	sp, #16
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	4835      	ldr	r0, [pc, #212]	; (80056bc <_printf_i+0x244>)
 80055e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055ec:	6829      	ldr	r1, [r5, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80055f4:	6029      	str	r1, [r5, #0]
 80055f6:	061d      	lsls	r5, r3, #24
 80055f8:	d514      	bpl.n	8005624 <_printf_i+0x1ac>
 80055fa:	07df      	lsls	r7, r3, #31
 80055fc:	bf44      	itt	mi
 80055fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005602:	6023      	strmi	r3, [r4, #0]
 8005604:	b91e      	cbnz	r6, 800560e <_printf_i+0x196>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	f023 0320 	bic.w	r3, r3, #32
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	2310      	movs	r3, #16
 8005610:	e7b0      	b.n	8005574 <_printf_i+0xfc>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	f043 0320 	orr.w	r3, r3, #32
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	2378      	movs	r3, #120	; 0x78
 800561c:	4828      	ldr	r0, [pc, #160]	; (80056c0 <_printf_i+0x248>)
 800561e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005622:	e7e3      	b.n	80055ec <_printf_i+0x174>
 8005624:	0659      	lsls	r1, r3, #25
 8005626:	bf48      	it	mi
 8005628:	b2b6      	uxthmi	r6, r6
 800562a:	e7e6      	b.n	80055fa <_printf_i+0x182>
 800562c:	4615      	mov	r5, r2
 800562e:	e7bb      	b.n	80055a8 <_printf_i+0x130>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	6826      	ldr	r6, [r4, #0]
 8005634:	6961      	ldr	r1, [r4, #20]
 8005636:	1d18      	adds	r0, r3, #4
 8005638:	6028      	str	r0, [r5, #0]
 800563a:	0635      	lsls	r5, r6, #24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	d501      	bpl.n	8005644 <_printf_i+0x1cc>
 8005640:	6019      	str	r1, [r3, #0]
 8005642:	e002      	b.n	800564a <_printf_i+0x1d2>
 8005644:	0670      	lsls	r0, r6, #25
 8005646:	d5fb      	bpl.n	8005640 <_printf_i+0x1c8>
 8005648:	8019      	strh	r1, [r3, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	4615      	mov	r5, r2
 8005650:	e7ba      	b.n	80055c8 <_printf_i+0x150>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	602a      	str	r2, [r5, #0]
 8005658:	681d      	ldr	r5, [r3, #0]
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	2100      	movs	r1, #0
 800565e:	4628      	mov	r0, r5
 8005660:	f7fa fdc6 	bl	80001f0 <memchr>
 8005664:	b108      	cbz	r0, 800566a <_printf_i+0x1f2>
 8005666:	1b40      	subs	r0, r0, r5
 8005668:	6060      	str	r0, [r4, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	2300      	movs	r3, #0
 8005670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005674:	e7a8      	b.n	80055c8 <_printf_i+0x150>
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	462a      	mov	r2, r5
 800567a:	4649      	mov	r1, r9
 800567c:	4640      	mov	r0, r8
 800567e:	47d0      	blx	sl
 8005680:	3001      	adds	r0, #1
 8005682:	d0ab      	beq.n	80055dc <_printf_i+0x164>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	079b      	lsls	r3, r3, #30
 8005688:	d413      	bmi.n	80056b2 <_printf_i+0x23a>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	4298      	cmp	r0, r3
 8005690:	bfb8      	it	lt
 8005692:	4618      	movlt	r0, r3
 8005694:	e7a4      	b.n	80055e0 <_printf_i+0x168>
 8005696:	2301      	movs	r3, #1
 8005698:	4632      	mov	r2, r6
 800569a:	4649      	mov	r1, r9
 800569c:	4640      	mov	r0, r8
 800569e:	47d0      	blx	sl
 80056a0:	3001      	adds	r0, #1
 80056a2:	d09b      	beq.n	80055dc <_printf_i+0x164>
 80056a4:	3501      	adds	r5, #1
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	9903      	ldr	r1, [sp, #12]
 80056aa:	1a5b      	subs	r3, r3, r1
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dcf2      	bgt.n	8005696 <_printf_i+0x21e>
 80056b0:	e7eb      	b.n	800568a <_printf_i+0x212>
 80056b2:	2500      	movs	r5, #0
 80056b4:	f104 0619 	add.w	r6, r4, #25
 80056b8:	e7f5      	b.n	80056a6 <_printf_i+0x22e>
 80056ba:	bf00      	nop
 80056bc:	08007c36 	.word	0x08007c36
 80056c0:	08007c47 	.word	0x08007c47

080056c4 <siprintf>:
 80056c4:	b40e      	push	{r1, r2, r3}
 80056c6:	b500      	push	{lr}
 80056c8:	b09c      	sub	sp, #112	; 0x70
 80056ca:	ab1d      	add	r3, sp, #116	; 0x74
 80056cc:	9002      	str	r0, [sp, #8]
 80056ce:	9006      	str	r0, [sp, #24]
 80056d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056d4:	4809      	ldr	r0, [pc, #36]	; (80056fc <siprintf+0x38>)
 80056d6:	9107      	str	r1, [sp, #28]
 80056d8:	9104      	str	r1, [sp, #16]
 80056da:	4909      	ldr	r1, [pc, #36]	; (8005700 <siprintf+0x3c>)
 80056dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e0:	9105      	str	r1, [sp, #20]
 80056e2:	6800      	ldr	r0, [r0, #0]
 80056e4:	9301      	str	r3, [sp, #4]
 80056e6:	a902      	add	r1, sp, #8
 80056e8:	f001 fb78 	bl	8006ddc <_svfiprintf_r>
 80056ec:	9b02      	ldr	r3, [sp, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	b01c      	add	sp, #112	; 0x70
 80056f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056f8:	b003      	add	sp, #12
 80056fa:	4770      	bx	lr
 80056fc:	2000000c 	.word	0x2000000c
 8005700:	ffff0208 	.word	0xffff0208

08005704 <quorem>:
 8005704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005708:	6903      	ldr	r3, [r0, #16]
 800570a:	690c      	ldr	r4, [r1, #16]
 800570c:	42a3      	cmp	r3, r4
 800570e:	4607      	mov	r7, r0
 8005710:	f2c0 8081 	blt.w	8005816 <quorem+0x112>
 8005714:	3c01      	subs	r4, #1
 8005716:	f101 0814 	add.w	r8, r1, #20
 800571a:	f100 0514 	add.w	r5, r0, #20
 800571e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800572c:	3301      	adds	r3, #1
 800572e:	429a      	cmp	r2, r3
 8005730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005738:	fbb2 f6f3 	udiv	r6, r2, r3
 800573c:	d331      	bcc.n	80057a2 <quorem+0x9e>
 800573e:	f04f 0e00 	mov.w	lr, #0
 8005742:	4640      	mov	r0, r8
 8005744:	46ac      	mov	ip, r5
 8005746:	46f2      	mov	sl, lr
 8005748:	f850 2b04 	ldr.w	r2, [r0], #4
 800574c:	b293      	uxth	r3, r2
 800574e:	fb06 e303 	mla	r3, r6, r3, lr
 8005752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005756:	b29b      	uxth	r3, r3
 8005758:	ebaa 0303 	sub.w	r3, sl, r3
 800575c:	f8dc a000 	ldr.w	sl, [ip]
 8005760:	0c12      	lsrs	r2, r2, #16
 8005762:	fa13 f38a 	uxtah	r3, r3, sl
 8005766:	fb06 e202 	mla	r2, r6, r2, lr
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	9b00      	ldr	r3, [sp, #0]
 800576e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005772:	b292      	uxth	r2, r2
 8005774:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800577c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005780:	4581      	cmp	r9, r0
 8005782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005786:	f84c 3b04 	str.w	r3, [ip], #4
 800578a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800578e:	d2db      	bcs.n	8005748 <quorem+0x44>
 8005790:	f855 300b 	ldr.w	r3, [r5, fp]
 8005794:	b92b      	cbnz	r3, 80057a2 <quorem+0x9e>
 8005796:	9b01      	ldr	r3, [sp, #4]
 8005798:	3b04      	subs	r3, #4
 800579a:	429d      	cmp	r5, r3
 800579c:	461a      	mov	r2, r3
 800579e:	d32e      	bcc.n	80057fe <quorem+0xfa>
 80057a0:	613c      	str	r4, [r7, #16]
 80057a2:	4638      	mov	r0, r7
 80057a4:	f001 f8c6 	bl	8006934 <__mcmp>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	db24      	blt.n	80057f6 <quorem+0xf2>
 80057ac:	3601      	adds	r6, #1
 80057ae:	4628      	mov	r0, r5
 80057b0:	f04f 0c00 	mov.w	ip, #0
 80057b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80057b8:	f8d0 e000 	ldr.w	lr, [r0]
 80057bc:	b293      	uxth	r3, r2
 80057be:	ebac 0303 	sub.w	r3, ip, r3
 80057c2:	0c12      	lsrs	r2, r2, #16
 80057c4:	fa13 f38e 	uxtah	r3, r3, lr
 80057c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057d6:	45c1      	cmp	r9, r8
 80057d8:	f840 3b04 	str.w	r3, [r0], #4
 80057dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057e0:	d2e8      	bcs.n	80057b4 <quorem+0xb0>
 80057e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ea:	b922      	cbnz	r2, 80057f6 <quorem+0xf2>
 80057ec:	3b04      	subs	r3, #4
 80057ee:	429d      	cmp	r5, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	d30a      	bcc.n	800580a <quorem+0x106>
 80057f4:	613c      	str	r4, [r7, #16]
 80057f6:	4630      	mov	r0, r6
 80057f8:	b003      	add	sp, #12
 80057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	3b04      	subs	r3, #4
 8005802:	2a00      	cmp	r2, #0
 8005804:	d1cc      	bne.n	80057a0 <quorem+0x9c>
 8005806:	3c01      	subs	r4, #1
 8005808:	e7c7      	b.n	800579a <quorem+0x96>
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	3b04      	subs	r3, #4
 800580e:	2a00      	cmp	r2, #0
 8005810:	d1f0      	bne.n	80057f4 <quorem+0xf0>
 8005812:	3c01      	subs	r4, #1
 8005814:	e7eb      	b.n	80057ee <quorem+0xea>
 8005816:	2000      	movs	r0, #0
 8005818:	e7ee      	b.n	80057f8 <quorem+0xf4>
 800581a:	0000      	movs	r0, r0
 800581c:	0000      	movs	r0, r0
	...

08005820 <_dtoa_r>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	ed2d 8b04 	vpush	{d8-d9}
 8005828:	ec57 6b10 	vmov	r6, r7, d0
 800582c:	b093      	sub	sp, #76	; 0x4c
 800582e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005834:	9106      	str	r1, [sp, #24]
 8005836:	ee10 aa10 	vmov	sl, s0
 800583a:	4604      	mov	r4, r0
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	930c      	str	r3, [sp, #48]	; 0x30
 8005840:	46bb      	mov	fp, r7
 8005842:	b975      	cbnz	r5, 8005862 <_dtoa_r+0x42>
 8005844:	2010      	movs	r0, #16
 8005846:	f000 fddd 	bl	8006404 <malloc>
 800584a:	4602      	mov	r2, r0
 800584c:	6260      	str	r0, [r4, #36]	; 0x24
 800584e:	b920      	cbnz	r0, 800585a <_dtoa_r+0x3a>
 8005850:	4ba7      	ldr	r3, [pc, #668]	; (8005af0 <_dtoa_r+0x2d0>)
 8005852:	21ea      	movs	r1, #234	; 0xea
 8005854:	48a7      	ldr	r0, [pc, #668]	; (8005af4 <_dtoa_r+0x2d4>)
 8005856:	f001 fbd1 	bl	8006ffc <__assert_func>
 800585a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800585e:	6005      	str	r5, [r0, #0]
 8005860:	60c5      	str	r5, [r0, #12]
 8005862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	b151      	cbz	r1, 800587e <_dtoa_r+0x5e>
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	604a      	str	r2, [r1, #4]
 800586c:	2301      	movs	r3, #1
 800586e:	4093      	lsls	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fe1c 	bl	80064b0 <_Bfree>
 8005878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	1e3b      	subs	r3, r7, #0
 8005880:	bfaa      	itet	ge
 8005882:	2300      	movge	r3, #0
 8005884:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005888:	f8c8 3000 	strge.w	r3, [r8]
 800588c:	4b9a      	ldr	r3, [pc, #616]	; (8005af8 <_dtoa_r+0x2d8>)
 800588e:	bfbc      	itt	lt
 8005890:	2201      	movlt	r2, #1
 8005892:	f8c8 2000 	strlt.w	r2, [r8]
 8005896:	ea33 030b 	bics.w	r3, r3, fp
 800589a:	d11b      	bne.n	80058d4 <_dtoa_r+0xb4>
 800589c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800589e:	f242 730f 	movw	r3, #9999	; 0x270f
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058a8:	4333      	orrs	r3, r6
 80058aa:	f000 8592 	beq.w	80063d2 <_dtoa_r+0xbb2>
 80058ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058b0:	b963      	cbnz	r3, 80058cc <_dtoa_r+0xac>
 80058b2:	4b92      	ldr	r3, [pc, #584]	; (8005afc <_dtoa_r+0x2dc>)
 80058b4:	e022      	b.n	80058fc <_dtoa_r+0xdc>
 80058b6:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <_dtoa_r+0x2e0>)
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	3308      	adds	r3, #8
 80058bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	9801      	ldr	r0, [sp, #4]
 80058c2:	b013      	add	sp, #76	; 0x4c
 80058c4:	ecbd 8b04 	vpop	{d8-d9}
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	4b8b      	ldr	r3, [pc, #556]	; (8005afc <_dtoa_r+0x2dc>)
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	3303      	adds	r3, #3
 80058d2:	e7f3      	b.n	80058bc <_dtoa_r+0x9c>
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4650      	mov	r0, sl
 80058da:	4659      	mov	r1, fp
 80058dc:	f7fb f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80058e0:	ec4b ab19 	vmov	d9, sl, fp
 80058e4:	4680      	mov	r8, r0
 80058e6:	b158      	cbz	r0, 8005900 <_dtoa_r+0xe0>
 80058e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058ea:	2301      	movs	r3, #1
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 856b 	beq.w	80063cc <_dtoa_r+0xbac>
 80058f6:	4883      	ldr	r0, [pc, #524]	; (8005b04 <_dtoa_r+0x2e4>)
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	1e43      	subs	r3, r0, #1
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	e7df      	b.n	80058c0 <_dtoa_r+0xa0>
 8005900:	ec4b ab10 	vmov	d0, sl, fp
 8005904:	aa10      	add	r2, sp, #64	; 0x40
 8005906:	a911      	add	r1, sp, #68	; 0x44
 8005908:	4620      	mov	r0, r4
 800590a:	f001 f8b9 	bl	8006a80 <__d2b>
 800590e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005912:	ee08 0a10 	vmov	s16, r0
 8005916:	2d00      	cmp	r5, #0
 8005918:	f000 8084 	beq.w	8005a24 <_dtoa_r+0x204>
 800591c:	ee19 3a90 	vmov	r3, s19
 8005920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005924:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005928:	4656      	mov	r6, sl
 800592a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800592e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005932:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005936:	4b74      	ldr	r3, [pc, #464]	; (8005b08 <_dtoa_r+0x2e8>)
 8005938:	2200      	movs	r2, #0
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fcab 	bl	8000298 <__aeabi_dsub>
 8005942:	a365      	add	r3, pc, #404	; (adr r3, 8005ad8 <_dtoa_r+0x2b8>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f7fa fe5e 	bl	8000608 <__aeabi_dmul>
 800594c:	a364      	add	r3, pc, #400	; (adr r3, 8005ae0 <_dtoa_r+0x2c0>)
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f7fa fca3 	bl	800029c <__adddf3>
 8005956:	4606      	mov	r6, r0
 8005958:	4628      	mov	r0, r5
 800595a:	460f      	mov	r7, r1
 800595c:	f7fa fdea 	bl	8000534 <__aeabi_i2d>
 8005960:	a361      	add	r3, pc, #388	; (adr r3, 8005ae8 <_dtoa_r+0x2c8>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fe4f 	bl	8000608 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fc93 	bl	800029c <__adddf3>
 8005976:	4606      	mov	r6, r0
 8005978:	460f      	mov	r7, r1
 800597a:	f7fb f8f5 	bl	8000b68 <__aeabi_d2iz>
 800597e:	2200      	movs	r2, #0
 8005980:	9000      	str	r0, [sp, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f8b0 	bl	8000aec <__aeabi_dcmplt>
 800598c:	b150      	cbz	r0, 80059a4 <_dtoa_r+0x184>
 800598e:	9800      	ldr	r0, [sp, #0]
 8005990:	f7fa fdd0 	bl	8000534 <__aeabi_i2d>
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	f7fb f89e 	bl	8000ad8 <__aeabi_dcmpeq>
 800599c:	b910      	cbnz	r0, 80059a4 <_dtoa_r+0x184>
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	9b00      	ldr	r3, [sp, #0]
 80059a6:	2b16      	cmp	r3, #22
 80059a8:	d85a      	bhi.n	8005a60 <_dtoa_r+0x240>
 80059aa:	9a00      	ldr	r2, [sp, #0]
 80059ac:	4b57      	ldr	r3, [pc, #348]	; (8005b0c <_dtoa_r+0x2ec>)
 80059ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	ec51 0b19 	vmov	r0, r1, d9
 80059ba:	f7fb f897 	bl	8000aec <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d050      	beq.n	8005a64 <_dtoa_r+0x244>
 80059c2:	9b00      	ldr	r3, [sp, #0]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80059cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059ce:	1b5d      	subs	r5, r3, r5
 80059d0:	1e6b      	subs	r3, r5, #1
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	bf45      	ittet	mi
 80059d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80059da:	9304      	strmi	r3, [sp, #16]
 80059dc:	2300      	movpl	r3, #0
 80059de:	2300      	movmi	r3, #0
 80059e0:	bf4c      	ite	mi
 80059e2:	9305      	strmi	r3, [sp, #20]
 80059e4:	9304      	strpl	r3, [sp, #16]
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db3d      	blt.n	8005a68 <_dtoa_r+0x248>
 80059ec:	9b05      	ldr	r3, [sp, #20]
 80059ee:	9a00      	ldr	r2, [sp, #0]
 80059f0:	920a      	str	r2, [sp, #40]	; 0x28
 80059f2:	4413      	add	r3, r2
 80059f4:	9305      	str	r3, [sp, #20]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9307      	str	r3, [sp, #28]
 80059fa:	9b06      	ldr	r3, [sp, #24]
 80059fc:	2b09      	cmp	r3, #9
 80059fe:	f200 8089 	bhi.w	8005b14 <_dtoa_r+0x2f4>
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	bfc4      	itt	gt
 8005a06:	3b04      	subgt	r3, #4
 8005a08:	9306      	strgt	r3, [sp, #24]
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a10:	bfcc      	ite	gt
 8005a12:	2500      	movgt	r5, #0
 8005a14:	2501      	movle	r5, #1
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	f200 8087 	bhi.w	8005b2a <_dtoa_r+0x30a>
 8005a1c:	e8df f003 	tbb	[pc, r3]
 8005a20:	59383a2d 	.word	0x59383a2d
 8005a24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a28:	441d      	add	r5, r3
 8005a2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	bfc1      	itttt	gt
 8005a32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a42:	bfda      	itte	le
 8005a44:	f1c3 0320 	rsble	r3, r3, #32
 8005a48:	fa06 f003 	lslle.w	r0, r6, r3
 8005a4c:	4318      	orrgt	r0, r3
 8005a4e:	f7fa fd61 	bl	8000514 <__aeabi_ui2d>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4606      	mov	r6, r0
 8005a56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a5a:	3d01      	subs	r5, #1
 8005a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8005a5e:	e76a      	b.n	8005936 <_dtoa_r+0x116>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e7b2      	b.n	80059ca <_dtoa_r+0x1aa>
 8005a64:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a66:	e7b1      	b.n	80059cc <_dtoa_r+0x1ac>
 8005a68:	9b04      	ldr	r3, [sp, #16]
 8005a6a:	9a00      	ldr	r2, [sp, #0]
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	9304      	str	r3, [sp, #16]
 8005a70:	4253      	negs	r3, r2
 8005a72:	9307      	str	r3, [sp, #28]
 8005a74:	2300      	movs	r3, #0
 8005a76:	930a      	str	r3, [sp, #40]	; 0x28
 8005a78:	e7bf      	b.n	80059fa <_dtoa_r+0x1da>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9308      	str	r3, [sp, #32]
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc55      	bgt.n	8005b30 <_dtoa_r+0x310>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	e00c      	b.n	8005aaa <_dtoa_r+0x28a>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7f3      	b.n	8005a7c <_dtoa_r+0x25c>
 8005a94:	2300      	movs	r3, #0
 8005a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a98:	9308      	str	r3, [sp, #32]
 8005a9a:	9b00      	ldr	r3, [sp, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	bfb8      	it	lt
 8005aa8:	2301      	movlt	r3, #1
 8005aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005aac:	2200      	movs	r2, #0
 8005aae:	6042      	str	r2, [r0, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	f102 0614 	add.w	r6, r2, #20
 8005ab6:	429e      	cmp	r6, r3
 8005ab8:	6841      	ldr	r1, [r0, #4]
 8005aba:	d93d      	bls.n	8005b38 <_dtoa_r+0x318>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fcb7 	bl	8006430 <_Balloc>
 8005ac2:	9001      	str	r0, [sp, #4]
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d13b      	bne.n	8005b40 <_dtoa_r+0x320>
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_dtoa_r+0x2f0>)
 8005aca:	4602      	mov	r2, r0
 8005acc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ad0:	e6c0      	b.n	8005854 <_dtoa_r+0x34>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7df      	b.n	8005a96 <_dtoa_r+0x276>
 8005ad6:	bf00      	nop
 8005ad8:	636f4361 	.word	0x636f4361
 8005adc:	3fd287a7 	.word	0x3fd287a7
 8005ae0:	8b60c8b3 	.word	0x8b60c8b3
 8005ae4:	3fc68a28 	.word	0x3fc68a28
 8005ae8:	509f79fb 	.word	0x509f79fb
 8005aec:	3fd34413 	.word	0x3fd34413
 8005af0:	08007c65 	.word	0x08007c65
 8005af4:	08007c7c 	.word	0x08007c7c
 8005af8:	7ff00000 	.word	0x7ff00000
 8005afc:	08007c61 	.word	0x08007c61
 8005b00:	08007c58 	.word	0x08007c58
 8005b04:	08007c35 	.word	0x08007c35
 8005b08:	3ff80000 	.word	0x3ff80000
 8005b0c:	08007d70 	.word	0x08007d70
 8005b10:	08007cd7 	.word	0x08007cd7
 8005b14:	2501      	movs	r5, #1
 8005b16:	2300      	movs	r3, #0
 8005b18:	9306      	str	r3, [sp, #24]
 8005b1a:	9508      	str	r5, [sp, #32]
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2312      	movs	r3, #18
 8005b28:	e7b0      	b.n	8005a8c <_dtoa_r+0x26c>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	9308      	str	r3, [sp, #32]
 8005b2e:	e7f5      	b.n	8005b1c <_dtoa_r+0x2fc>
 8005b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b36:	e7b8      	b.n	8005aaa <_dtoa_r+0x28a>
 8005b38:	3101      	adds	r1, #1
 8005b3a:	6041      	str	r1, [r0, #4]
 8005b3c:	0052      	lsls	r2, r2, #1
 8005b3e:	e7b8      	b.n	8005ab2 <_dtoa_r+0x292>
 8005b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b42:	9a01      	ldr	r2, [sp, #4]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	2b0e      	cmp	r3, #14
 8005b4a:	f200 809d 	bhi.w	8005c88 <_dtoa_r+0x468>
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	f000 809a 	beq.w	8005c88 <_dtoa_r+0x468>
 8005b54:	9b00      	ldr	r3, [sp, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dd32      	ble.n	8005bc0 <_dtoa_r+0x3a0>
 8005b5a:	4ab7      	ldr	r2, [pc, #732]	; (8005e38 <_dtoa_r+0x618>)
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b68:	9b00      	ldr	r3, [sp, #0]
 8005b6a:	05d8      	lsls	r0, r3, #23
 8005b6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005b70:	d516      	bpl.n	8005ba0 <_dtoa_r+0x380>
 8005b72:	4bb2      	ldr	r3, [pc, #712]	; (8005e3c <_dtoa_r+0x61c>)
 8005b74:	ec51 0b19 	vmov	r0, r1, d9
 8005b78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b7c:	f7fa fe6e 	bl	800085c <__aeabi_ddiv>
 8005b80:	f007 070f 	and.w	r7, r7, #15
 8005b84:	4682      	mov	sl, r0
 8005b86:	468b      	mov	fp, r1
 8005b88:	2503      	movs	r5, #3
 8005b8a:	4eac      	ldr	r6, [pc, #688]	; (8005e3c <_dtoa_r+0x61c>)
 8005b8c:	b957      	cbnz	r7, 8005ba4 <_dtoa_r+0x384>
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	4650      	mov	r0, sl
 8005b94:	4659      	mov	r1, fp
 8005b96:	f7fa fe61 	bl	800085c <__aeabi_ddiv>
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	468b      	mov	fp, r1
 8005b9e:	e028      	b.n	8005bf2 <_dtoa_r+0x3d2>
 8005ba0:	2502      	movs	r5, #2
 8005ba2:	e7f2      	b.n	8005b8a <_dtoa_r+0x36a>
 8005ba4:	07f9      	lsls	r1, r7, #31
 8005ba6:	d508      	bpl.n	8005bba <_dtoa_r+0x39a>
 8005ba8:	4640      	mov	r0, r8
 8005baa:	4649      	mov	r1, r9
 8005bac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bb0:	f7fa fd2a 	bl	8000608 <__aeabi_dmul>
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	4689      	mov	r9, r1
 8005bba:	107f      	asrs	r7, r7, #1
 8005bbc:	3608      	adds	r6, #8
 8005bbe:	e7e5      	b.n	8005b8c <_dtoa_r+0x36c>
 8005bc0:	f000 809b 	beq.w	8005cfa <_dtoa_r+0x4da>
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	4f9d      	ldr	r7, [pc, #628]	; (8005e3c <_dtoa_r+0x61c>)
 8005bc8:	425e      	negs	r6, r3
 8005bca:	4b9b      	ldr	r3, [pc, #620]	; (8005e38 <_dtoa_r+0x618>)
 8005bcc:	f006 020f 	and.w	r2, r6, #15
 8005bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	ec51 0b19 	vmov	r0, r1, d9
 8005bdc:	f7fa fd14 	bl	8000608 <__aeabi_dmul>
 8005be0:	1136      	asrs	r6, r6, #4
 8005be2:	4682      	mov	sl, r0
 8005be4:	468b      	mov	fp, r1
 8005be6:	2300      	movs	r3, #0
 8005be8:	2502      	movs	r5, #2
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	d17a      	bne.n	8005ce4 <_dtoa_r+0x4c4>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d3      	bne.n	8005b9a <_dtoa_r+0x37a>
 8005bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8082 	beq.w	8005cfe <_dtoa_r+0x4de>
 8005bfa:	4b91      	ldr	r3, [pc, #580]	; (8005e40 <_dtoa_r+0x620>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4650      	mov	r0, sl
 8005c00:	4659      	mov	r1, fp
 8005c02:	f7fa ff73 	bl	8000aec <__aeabi_dcmplt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d079      	beq.n	8005cfe <_dtoa_r+0x4de>
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d076      	beq.n	8005cfe <_dtoa_r+0x4de>
 8005c10:	9b02      	ldr	r3, [sp, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dd36      	ble.n	8005c84 <_dtoa_r+0x464>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	4650      	mov	r0, sl
 8005c1a:	4659      	mov	r1, fp
 8005c1c:	1e5f      	subs	r7, r3, #1
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4b88      	ldr	r3, [pc, #544]	; (8005e44 <_dtoa_r+0x624>)
 8005c22:	f7fa fcf1 	bl	8000608 <__aeabi_dmul>
 8005c26:	9e02      	ldr	r6, [sp, #8]
 8005c28:	4682      	mov	sl, r0
 8005c2a:	468b      	mov	fp, r1
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7fa fc80 	bl	8000534 <__aeabi_i2d>
 8005c34:	4652      	mov	r2, sl
 8005c36:	465b      	mov	r3, fp
 8005c38:	f7fa fce6 	bl	8000608 <__aeabi_dmul>
 8005c3c:	4b82      	ldr	r3, [pc, #520]	; (8005e48 <_dtoa_r+0x628>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f7fa fb2c 	bl	800029c <__adddf3>
 8005c44:	46d0      	mov	r8, sl
 8005c46:	46d9      	mov	r9, fp
 8005c48:	4682      	mov	sl, r0
 8005c4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	d158      	bne.n	8005d04 <_dtoa_r+0x4e4>
 8005c52:	4b7e      	ldr	r3, [pc, #504]	; (8005e4c <_dtoa_r+0x62c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	4640      	mov	r0, r8
 8005c58:	4649      	mov	r1, r9
 8005c5a:	f7fa fb1d 	bl	8000298 <__aeabi_dsub>
 8005c5e:	4652      	mov	r2, sl
 8005c60:	465b      	mov	r3, fp
 8005c62:	4680      	mov	r8, r0
 8005c64:	4689      	mov	r9, r1
 8005c66:	f7fa ff5f 	bl	8000b28 <__aeabi_dcmpgt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f040 8295 	bne.w	800619a <_dtoa_r+0x97a>
 8005c70:	4652      	mov	r2, sl
 8005c72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa ff37 	bl	8000aec <__aeabi_dcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f040 8289 	bne.w	8006196 <_dtoa_r+0x976>
 8005c84:	ec5b ab19 	vmov	sl, fp, d9
 8005c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f2c0 8148 	blt.w	8005f20 <_dtoa_r+0x700>
 8005c90:	9a00      	ldr	r2, [sp, #0]
 8005c92:	2a0e      	cmp	r2, #14
 8005c94:	f300 8144 	bgt.w	8005f20 <_dtoa_r+0x700>
 8005c98:	4b67      	ldr	r3, [pc, #412]	; (8005e38 <_dtoa_r+0x618>)
 8005c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f280 80d5 	bge.w	8005e54 <_dtoa_r+0x634>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f300 80d1 	bgt.w	8005e54 <_dtoa_r+0x634>
 8005cb2:	f040 826f 	bne.w	8006194 <_dtoa_r+0x974>
 8005cb6:	4b65      	ldr	r3, [pc, #404]	; (8005e4c <_dtoa_r+0x62c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	465b      	mov	r3, fp
 8005cc6:	f7fa ff25 	bl	8000b14 <__aeabi_dcmpge>
 8005cca:	9e03      	ldr	r6, [sp, #12]
 8005ccc:	4637      	mov	r7, r6
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f040 8245 	bne.w	800615e <_dtoa_r+0x93e>
 8005cd4:	9d01      	ldr	r5, [sp, #4]
 8005cd6:	2331      	movs	r3, #49	; 0x31
 8005cd8:	f805 3b01 	strb.w	r3, [r5], #1
 8005cdc:	9b00      	ldr	r3, [sp, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	e240      	b.n	8006166 <_dtoa_r+0x946>
 8005ce4:	07f2      	lsls	r2, r6, #31
 8005ce6:	d505      	bpl.n	8005cf4 <_dtoa_r+0x4d4>
 8005ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cec:	f7fa fc8c 	bl	8000608 <__aeabi_dmul>
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	1076      	asrs	r6, r6, #1
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	e777      	b.n	8005bea <_dtoa_r+0x3ca>
 8005cfa:	2502      	movs	r5, #2
 8005cfc:	e779      	b.n	8005bf2 <_dtoa_r+0x3d2>
 8005cfe:	9f00      	ldr	r7, [sp, #0]
 8005d00:	9e03      	ldr	r6, [sp, #12]
 8005d02:	e794      	b.n	8005c2e <_dtoa_r+0x40e>
 8005d04:	9901      	ldr	r1, [sp, #4]
 8005d06:	4b4c      	ldr	r3, [pc, #304]	; (8005e38 <_dtoa_r+0x618>)
 8005d08:	4431      	add	r1, r6
 8005d0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d0c:	9908      	ldr	r1, [sp, #32]
 8005d0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d16:	2900      	cmp	r1, #0
 8005d18:	d043      	beq.n	8005da2 <_dtoa_r+0x582>
 8005d1a:	494d      	ldr	r1, [pc, #308]	; (8005e50 <_dtoa_r+0x630>)
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fa fd9d 	bl	800085c <__aeabi_ddiv>
 8005d22:	4652      	mov	r2, sl
 8005d24:	465b      	mov	r3, fp
 8005d26:	f7fa fab7 	bl	8000298 <__aeabi_dsub>
 8005d2a:	9d01      	ldr	r5, [sp, #4]
 8005d2c:	4682      	mov	sl, r0
 8005d2e:	468b      	mov	fp, r1
 8005d30:	4649      	mov	r1, r9
 8005d32:	4640      	mov	r0, r8
 8005d34:	f7fa ff18 	bl	8000b68 <__aeabi_d2iz>
 8005d38:	4606      	mov	r6, r0
 8005d3a:	f7fa fbfb 	bl	8000534 <__aeabi_i2d>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa faa7 	bl	8000298 <__aeabi_dsub>
 8005d4a:	3630      	adds	r6, #48	; 0x30
 8005d4c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	465b      	mov	r3, fp
 8005d54:	4680      	mov	r8, r0
 8005d56:	4689      	mov	r9, r1
 8005d58:	f7fa fec8 	bl	8000aec <__aeabi_dcmplt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d163      	bne.n	8005e28 <_dtoa_r+0x608>
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	4936      	ldr	r1, [pc, #216]	; (8005e40 <_dtoa_r+0x620>)
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fa fa96 	bl	8000298 <__aeabi_dsub>
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	465b      	mov	r3, fp
 8005d70:	f7fa febc 	bl	8000aec <__aeabi_dcmplt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f040 80b5 	bne.w	8005ee4 <_dtoa_r+0x6c4>
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	d081      	beq.n	8005c84 <_dtoa_r+0x464>
 8005d80:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <_dtoa_r+0x624>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	4650      	mov	r0, sl
 8005d86:	4659      	mov	r1, fp
 8005d88:	f7fa fc3e 	bl	8000608 <__aeabi_dmul>
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <_dtoa_r+0x624>)
 8005d8e:	4682      	mov	sl, r0
 8005d90:	468b      	mov	fp, r1
 8005d92:	4640      	mov	r0, r8
 8005d94:	4649      	mov	r1, r9
 8005d96:	2200      	movs	r2, #0
 8005d98:	f7fa fc36 	bl	8000608 <__aeabi_dmul>
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4689      	mov	r9, r1
 8005da0:	e7c6      	b.n	8005d30 <_dtoa_r+0x510>
 8005da2:	4650      	mov	r0, sl
 8005da4:	4659      	mov	r1, fp
 8005da6:	f7fa fc2f 	bl	8000608 <__aeabi_dmul>
 8005daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dac:	9d01      	ldr	r5, [sp, #4]
 8005dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005db0:	4682      	mov	sl, r0
 8005db2:	468b      	mov	fp, r1
 8005db4:	4649      	mov	r1, r9
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7fa fed6 	bl	8000b68 <__aeabi_d2iz>
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	f7fa fbb9 	bl	8000534 <__aeabi_i2d>
 8005dc2:	3630      	adds	r6, #48	; 0x30
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4649      	mov	r1, r9
 8005dcc:	f7fa fa64 	bl	8000298 <__aeabi_dsub>
 8005dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4689      	mov	r9, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	d124      	bne.n	8005e2c <_dtoa_r+0x60c>
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <_dtoa_r+0x630>)
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	f7fa fa58 	bl	800029c <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa fe98 	bl	8000b28 <__aeabi_dcmpgt>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d173      	bne.n	8005ee4 <_dtoa_r+0x6c4>
 8005dfc:	4652      	mov	r2, sl
 8005dfe:	465b      	mov	r3, fp
 8005e00:	4913      	ldr	r1, [pc, #76]	; (8005e50 <_dtoa_r+0x630>)
 8005e02:	2000      	movs	r0, #0
 8005e04:	f7fa fa48 	bl	8000298 <__aeabi_dsub>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa fe6c 	bl	8000aec <__aeabi_dcmplt>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f43f af35 	beq.w	8005c84 <_dtoa_r+0x464>
 8005e1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e1c:	1e6b      	subs	r3, r5, #1
 8005e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e24:	2b30      	cmp	r3, #48	; 0x30
 8005e26:	d0f8      	beq.n	8005e1a <_dtoa_r+0x5fa>
 8005e28:	9700      	str	r7, [sp, #0]
 8005e2a:	e049      	b.n	8005ec0 <_dtoa_r+0x6a0>
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <_dtoa_r+0x624>)
 8005e2e:	f7fa fbeb 	bl	8000608 <__aeabi_dmul>
 8005e32:	4680      	mov	r8, r0
 8005e34:	4689      	mov	r9, r1
 8005e36:	e7bd      	b.n	8005db4 <_dtoa_r+0x594>
 8005e38:	08007d70 	.word	0x08007d70
 8005e3c:	08007d48 	.word	0x08007d48
 8005e40:	3ff00000 	.word	0x3ff00000
 8005e44:	40240000 	.word	0x40240000
 8005e48:	401c0000 	.word	0x401c0000
 8005e4c:	40140000 	.word	0x40140000
 8005e50:	3fe00000 	.word	0x3fe00000
 8005e54:	9d01      	ldr	r5, [sp, #4]
 8005e56:	4656      	mov	r6, sl
 8005e58:	465f      	mov	r7, fp
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fcfb 	bl	800085c <__aeabi_ddiv>
 8005e66:	f7fa fe7f 	bl	8000b68 <__aeabi_d2iz>
 8005e6a:	4682      	mov	sl, r0
 8005e6c:	f7fa fb62 	bl	8000534 <__aeabi_i2d>
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	f7fa fbc8 	bl	8000608 <__aeabi_dmul>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005e84:	f7fa fa08 	bl	8000298 <__aeabi_dsub>
 8005e88:	f805 6b01 	strb.w	r6, [r5], #1
 8005e8c:	9e01      	ldr	r6, [sp, #4]
 8005e8e:	9f03      	ldr	r7, [sp, #12]
 8005e90:	1bae      	subs	r6, r5, r6
 8005e92:	42b7      	cmp	r7, r6
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	d135      	bne.n	8005f06 <_dtoa_r+0x6e6>
 8005e9a:	f7fa f9ff 	bl	800029c <__adddf3>
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	f7fa fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 8005eaa:	b9d0      	cbnz	r0, 8005ee2 <_dtoa_r+0x6c2>
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eb8:	b110      	cbz	r0, 8005ec0 <_dtoa_r+0x6a0>
 8005eba:	f01a 0f01 	tst.w	sl, #1
 8005ebe:	d110      	bne.n	8005ee2 <_dtoa_r+0x6c2>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	ee18 1a10 	vmov	r1, s16
 8005ec6:	f000 faf3 	bl	80064b0 <_Bfree>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9800      	ldr	r0, [sp, #0]
 8005ece:	702b      	strb	r3, [r5, #0]
 8005ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	6018      	str	r0, [r3, #0]
 8005ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f43f acf1 	beq.w	80058c0 <_dtoa_r+0xa0>
 8005ede:	601d      	str	r5, [r3, #0]
 8005ee0:	e4ee      	b.n	80058c0 <_dtoa_r+0xa0>
 8005ee2:	9f00      	ldr	r7, [sp, #0]
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	461d      	mov	r5, r3
 8005ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eec:	2a39      	cmp	r2, #57	; 0x39
 8005eee:	d106      	bne.n	8005efe <_dtoa_r+0x6de>
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d1f7      	bne.n	8005ee6 <_dtoa_r+0x6c6>
 8005ef6:	9901      	ldr	r1, [sp, #4]
 8005ef8:	2230      	movs	r2, #48	; 0x30
 8005efa:	3701      	adds	r7, #1
 8005efc:	700a      	strb	r2, [r1, #0]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	3201      	adds	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e790      	b.n	8005e28 <_dtoa_r+0x608>
 8005f06:	4ba6      	ldr	r3, [pc, #664]	; (80061a0 <_dtoa_r+0x980>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f7fa fb7d 	bl	8000608 <__aeabi_dmul>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2300      	movs	r3, #0
 8005f12:	4606      	mov	r6, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	f7fa fddf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d09d      	beq.n	8005e5a <_dtoa_r+0x63a>
 8005f1e:	e7cf      	b.n	8005ec0 <_dtoa_r+0x6a0>
 8005f20:	9a08      	ldr	r2, [sp, #32]
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	f000 80d7 	beq.w	80060d6 <_dtoa_r+0x8b6>
 8005f28:	9a06      	ldr	r2, [sp, #24]
 8005f2a:	2a01      	cmp	r2, #1
 8005f2c:	f300 80ba 	bgt.w	80060a4 <_dtoa_r+0x884>
 8005f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	f000 80b2 	beq.w	800609c <_dtoa_r+0x87c>
 8005f38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f3c:	9e07      	ldr	r6, [sp, #28]
 8005f3e:	9d04      	ldr	r5, [sp, #16]
 8005f40:	9a04      	ldr	r2, [sp, #16]
 8005f42:	441a      	add	r2, r3
 8005f44:	9204      	str	r2, [sp, #16]
 8005f46:	9a05      	ldr	r2, [sp, #20]
 8005f48:	2101      	movs	r1, #1
 8005f4a:	441a      	add	r2, r3
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	9205      	str	r2, [sp, #20]
 8005f50:	f000 fb66 	bl	8006620 <__i2b>
 8005f54:	4607      	mov	r7, r0
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	dd0c      	ble.n	8005f74 <_dtoa_r+0x754>
 8005f5a:	9b05      	ldr	r3, [sp, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd09      	ble.n	8005f74 <_dtoa_r+0x754>
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	9a04      	ldr	r2, [sp, #16]
 8005f64:	bfa8      	it	ge
 8005f66:	462b      	movge	r3, r5
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	9204      	str	r2, [sp, #16]
 8005f6c:	9a05      	ldr	r2, [sp, #20]
 8005f6e:	1aed      	subs	r5, r5, r3
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	9305      	str	r3, [sp, #20]
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	b31b      	cbz	r3, 8005fc0 <_dtoa_r+0x7a0>
 8005f78:	9b08      	ldr	r3, [sp, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80af 	beq.w	80060de <_dtoa_r+0x8be>
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	dd13      	ble.n	8005fac <_dtoa_r+0x78c>
 8005f84:	4639      	mov	r1, r7
 8005f86:	4632      	mov	r2, r6
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fc09 	bl	80067a0 <__pow5mult>
 8005f8e:	ee18 2a10 	vmov	r2, s16
 8005f92:	4601      	mov	r1, r0
 8005f94:	4607      	mov	r7, r0
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 fb58 	bl	800664c <__multiply>
 8005f9c:	ee18 1a10 	vmov	r1, s16
 8005fa0:	4680      	mov	r8, r0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fa84 	bl	80064b0 <_Bfree>
 8005fa8:	ee08 8a10 	vmov	s16, r8
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	1b9a      	subs	r2, r3, r6
 8005fb0:	d006      	beq.n	8005fc0 <_dtoa_r+0x7a0>
 8005fb2:	ee18 1a10 	vmov	r1, s16
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 fbf2 	bl	80067a0 <__pow5mult>
 8005fbc:	ee08 0a10 	vmov	s16, r0
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fb2c 	bl	8006620 <__i2b>
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	4606      	mov	r6, r0
 8005fce:	f340 8088 	ble.w	80060e2 <_dtoa_r+0x8c2>
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4601      	mov	r1, r0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 fbe2 	bl	80067a0 <__pow5mult>
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	f340 8081 	ble.w	80060e8 <_dtoa_r+0x8c8>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	6933      	ldr	r3, [r6, #16]
 8005fec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ff0:	6918      	ldr	r0, [r3, #16]
 8005ff2:	f000 fac5 	bl	8006580 <__hi0bits>
 8005ff6:	f1c0 0020 	rsb	r0, r0, #32
 8005ffa:	9b05      	ldr	r3, [sp, #20]
 8005ffc:	4418      	add	r0, r3
 8005ffe:	f010 001f 	ands.w	r0, r0, #31
 8006002:	f000 8092 	beq.w	800612a <_dtoa_r+0x90a>
 8006006:	f1c0 0320 	rsb	r3, r0, #32
 800600a:	2b04      	cmp	r3, #4
 800600c:	f340 808a 	ble.w	8006124 <_dtoa_r+0x904>
 8006010:	f1c0 001c 	rsb	r0, r0, #28
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	4403      	add	r3, r0
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	9b05      	ldr	r3, [sp, #20]
 800601c:	4403      	add	r3, r0
 800601e:	4405      	add	r5, r0
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dd07      	ble.n	8006038 <_dtoa_r+0x818>
 8006028:	ee18 1a10 	vmov	r1, s16
 800602c:	461a      	mov	r2, r3
 800602e:	4620      	mov	r0, r4
 8006030:	f000 fc10 	bl	8006854 <__lshift>
 8006034:	ee08 0a10 	vmov	s16, r0
 8006038:	9b05      	ldr	r3, [sp, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd05      	ble.n	800604a <_dtoa_r+0x82a>
 800603e:	4631      	mov	r1, r6
 8006040:	461a      	mov	r2, r3
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fc06 	bl	8006854 <__lshift>
 8006048:	4606      	mov	r6, r0
 800604a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d06e      	beq.n	800612e <_dtoa_r+0x90e>
 8006050:	ee18 0a10 	vmov	r0, s16
 8006054:	4631      	mov	r1, r6
 8006056:	f000 fc6d 	bl	8006934 <__mcmp>
 800605a:	2800      	cmp	r0, #0
 800605c:	da67      	bge.n	800612e <_dtoa_r+0x90e>
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	3b01      	subs	r3, #1
 8006062:	ee18 1a10 	vmov	r1, s16
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	220a      	movs	r2, #10
 800606a:	2300      	movs	r3, #0
 800606c:	4620      	mov	r0, r4
 800606e:	f000 fa41 	bl	80064f4 <__multadd>
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	ee08 0a10 	vmov	s16, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 81b1 	beq.w	80063e0 <_dtoa_r+0xbc0>
 800607e:	2300      	movs	r3, #0
 8006080:	4639      	mov	r1, r7
 8006082:	220a      	movs	r2, #10
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fa35 	bl	80064f4 <__multadd>
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	4607      	mov	r7, r0
 8006090:	f300 808e 	bgt.w	80061b0 <_dtoa_r+0x990>
 8006094:	9b06      	ldr	r3, [sp, #24]
 8006096:	2b02      	cmp	r3, #2
 8006098:	dc51      	bgt.n	800613e <_dtoa_r+0x91e>
 800609a:	e089      	b.n	80061b0 <_dtoa_r+0x990>
 800609c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800609e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060a2:	e74b      	b.n	8005f3c <_dtoa_r+0x71c>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	1e5e      	subs	r6, r3, #1
 80060a8:	9b07      	ldr	r3, [sp, #28]
 80060aa:	42b3      	cmp	r3, r6
 80060ac:	bfbf      	itttt	lt
 80060ae:	9b07      	ldrlt	r3, [sp, #28]
 80060b0:	9607      	strlt	r6, [sp, #28]
 80060b2:	1af2      	sublt	r2, r6, r3
 80060b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060b6:	bfb6      	itet	lt
 80060b8:	189b      	addlt	r3, r3, r2
 80060ba:	1b9e      	subge	r6, r3, r6
 80060bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	bfb8      	it	lt
 80060c2:	2600      	movlt	r6, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bfb7      	itett	lt
 80060c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80060cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80060d0:	1a9d      	sublt	r5, r3, r2
 80060d2:	2300      	movlt	r3, #0
 80060d4:	e734      	b.n	8005f40 <_dtoa_r+0x720>
 80060d6:	9e07      	ldr	r6, [sp, #28]
 80060d8:	9d04      	ldr	r5, [sp, #16]
 80060da:	9f08      	ldr	r7, [sp, #32]
 80060dc:	e73b      	b.n	8005f56 <_dtoa_r+0x736>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	e767      	b.n	8005fb2 <_dtoa_r+0x792>
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	dc18      	bgt.n	800611a <_dtoa_r+0x8fa>
 80060e8:	f1ba 0f00 	cmp.w	sl, #0
 80060ec:	d115      	bne.n	800611a <_dtoa_r+0x8fa>
 80060ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060f2:	b993      	cbnz	r3, 800611a <_dtoa_r+0x8fa>
 80060f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060f8:	0d1b      	lsrs	r3, r3, #20
 80060fa:	051b      	lsls	r3, r3, #20
 80060fc:	b183      	cbz	r3, 8006120 <_dtoa_r+0x900>
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	9b05      	ldr	r3, [sp, #20]
 8006106:	3301      	adds	r3, #1
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	f04f 0801 	mov.w	r8, #1
 800610e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	f47f af6a 	bne.w	8005fea <_dtoa_r+0x7ca>
 8006116:	2001      	movs	r0, #1
 8006118:	e76f      	b.n	8005ffa <_dtoa_r+0x7da>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	e7f6      	b.n	800610e <_dtoa_r+0x8ee>
 8006120:	4698      	mov	r8, r3
 8006122:	e7f4      	b.n	800610e <_dtoa_r+0x8ee>
 8006124:	f43f af7d 	beq.w	8006022 <_dtoa_r+0x802>
 8006128:	4618      	mov	r0, r3
 800612a:	301c      	adds	r0, #28
 800612c:	e772      	b.n	8006014 <_dtoa_r+0x7f4>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	dc37      	bgt.n	80061a4 <_dtoa_r+0x984>
 8006134:	9b06      	ldr	r3, [sp, #24]
 8006136:	2b02      	cmp	r3, #2
 8006138:	dd34      	ble.n	80061a4 <_dtoa_r+0x984>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	9302      	str	r3, [sp, #8]
 800613e:	9b02      	ldr	r3, [sp, #8]
 8006140:	b96b      	cbnz	r3, 800615e <_dtoa_r+0x93e>
 8006142:	4631      	mov	r1, r6
 8006144:	2205      	movs	r2, #5
 8006146:	4620      	mov	r0, r4
 8006148:	f000 f9d4 	bl	80064f4 <__multadd>
 800614c:	4601      	mov	r1, r0
 800614e:	4606      	mov	r6, r0
 8006150:	ee18 0a10 	vmov	r0, s16
 8006154:	f000 fbee 	bl	8006934 <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	f73f adbb 	bgt.w	8005cd4 <_dtoa_r+0x4b4>
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	9d01      	ldr	r5, [sp, #4]
 8006162:	43db      	mvns	r3, r3
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	f04f 0800 	mov.w	r8, #0
 800616a:	4631      	mov	r1, r6
 800616c:	4620      	mov	r0, r4
 800616e:	f000 f99f 	bl	80064b0 <_Bfree>
 8006172:	2f00      	cmp	r7, #0
 8006174:	f43f aea4 	beq.w	8005ec0 <_dtoa_r+0x6a0>
 8006178:	f1b8 0f00 	cmp.w	r8, #0
 800617c:	d005      	beq.n	800618a <_dtoa_r+0x96a>
 800617e:	45b8      	cmp	r8, r7
 8006180:	d003      	beq.n	800618a <_dtoa_r+0x96a>
 8006182:	4641      	mov	r1, r8
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f993 	bl	80064b0 <_Bfree>
 800618a:	4639      	mov	r1, r7
 800618c:	4620      	mov	r0, r4
 800618e:	f000 f98f 	bl	80064b0 <_Bfree>
 8006192:	e695      	b.n	8005ec0 <_dtoa_r+0x6a0>
 8006194:	2600      	movs	r6, #0
 8006196:	4637      	mov	r7, r6
 8006198:	e7e1      	b.n	800615e <_dtoa_r+0x93e>
 800619a:	9700      	str	r7, [sp, #0]
 800619c:	4637      	mov	r7, r6
 800619e:	e599      	b.n	8005cd4 <_dtoa_r+0x4b4>
 80061a0:	40240000 	.word	0x40240000
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80ca 	beq.w	8006340 <_dtoa_r+0xb20>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	dd05      	ble.n	80061c0 <_dtoa_r+0x9a0>
 80061b4:	4639      	mov	r1, r7
 80061b6:	462a      	mov	r2, r5
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fb4b 	bl	8006854 <__lshift>
 80061be:	4607      	mov	r7, r0
 80061c0:	f1b8 0f00 	cmp.w	r8, #0
 80061c4:	d05b      	beq.n	800627e <_dtoa_r+0xa5e>
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 f931 	bl	8006430 <_Balloc>
 80061ce:	4605      	mov	r5, r0
 80061d0:	b928      	cbnz	r0, 80061de <_dtoa_r+0x9be>
 80061d2:	4b87      	ldr	r3, [pc, #540]	; (80063f0 <_dtoa_r+0xbd0>)
 80061d4:	4602      	mov	r2, r0
 80061d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061da:	f7ff bb3b 	b.w	8005854 <_dtoa_r+0x34>
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	3202      	adds	r2, #2
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	f107 010c 	add.w	r1, r7, #12
 80061e8:	300c      	adds	r0, #12
 80061ea:	f000 f913 	bl	8006414 <memcpy>
 80061ee:	2201      	movs	r2, #1
 80061f0:	4629      	mov	r1, r5
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fb2e 	bl	8006854 <__lshift>
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	f103 0901 	add.w	r9, r3, #1
 80061fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006202:	4413      	add	r3, r2
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	f00a 0301 	and.w	r3, sl, #1
 800620a:	46b8      	mov	r8, r7
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	4607      	mov	r7, r0
 8006210:	4631      	mov	r1, r6
 8006212:	ee18 0a10 	vmov	r0, s16
 8006216:	f7ff fa75 	bl	8005704 <quorem>
 800621a:	4641      	mov	r1, r8
 800621c:	9002      	str	r0, [sp, #8]
 800621e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006222:	ee18 0a10 	vmov	r0, s16
 8006226:	f000 fb85 	bl	8006934 <__mcmp>
 800622a:	463a      	mov	r2, r7
 800622c:	9003      	str	r0, [sp, #12]
 800622e:	4631      	mov	r1, r6
 8006230:	4620      	mov	r0, r4
 8006232:	f000 fb9b 	bl	800696c <__mdiff>
 8006236:	68c2      	ldr	r2, [r0, #12]
 8006238:	f109 3bff 	add.w	fp, r9, #4294967295
 800623c:	4605      	mov	r5, r0
 800623e:	bb02      	cbnz	r2, 8006282 <_dtoa_r+0xa62>
 8006240:	4601      	mov	r1, r0
 8006242:	ee18 0a10 	vmov	r0, s16
 8006246:	f000 fb75 	bl	8006934 <__mcmp>
 800624a:	4602      	mov	r2, r0
 800624c:	4629      	mov	r1, r5
 800624e:	4620      	mov	r0, r4
 8006250:	9207      	str	r2, [sp, #28]
 8006252:	f000 f92d 	bl	80064b0 <_Bfree>
 8006256:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800625a:	ea43 0102 	orr.w	r1, r3, r2
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	430b      	orrs	r3, r1
 8006262:	464d      	mov	r5, r9
 8006264:	d10f      	bne.n	8006286 <_dtoa_r+0xa66>
 8006266:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800626a:	d02a      	beq.n	80062c2 <_dtoa_r+0xaa2>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	dd02      	ble.n	8006278 <_dtoa_r+0xa58>
 8006272:	9b02      	ldr	r3, [sp, #8]
 8006274:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006278:	f88b a000 	strb.w	sl, [fp]
 800627c:	e775      	b.n	800616a <_dtoa_r+0x94a>
 800627e:	4638      	mov	r0, r7
 8006280:	e7ba      	b.n	80061f8 <_dtoa_r+0x9d8>
 8006282:	2201      	movs	r2, #1
 8006284:	e7e2      	b.n	800624c <_dtoa_r+0xa2c>
 8006286:	9b03      	ldr	r3, [sp, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db04      	blt.n	8006296 <_dtoa_r+0xa76>
 800628c:	9906      	ldr	r1, [sp, #24]
 800628e:	430b      	orrs	r3, r1
 8006290:	9904      	ldr	r1, [sp, #16]
 8006292:	430b      	orrs	r3, r1
 8006294:	d122      	bne.n	80062dc <_dtoa_r+0xabc>
 8006296:	2a00      	cmp	r2, #0
 8006298:	ddee      	ble.n	8006278 <_dtoa_r+0xa58>
 800629a:	ee18 1a10 	vmov	r1, s16
 800629e:	2201      	movs	r2, #1
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fad7 	bl	8006854 <__lshift>
 80062a6:	4631      	mov	r1, r6
 80062a8:	ee08 0a10 	vmov	s16, r0
 80062ac:	f000 fb42 	bl	8006934 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dc03      	bgt.n	80062bc <_dtoa_r+0xa9c>
 80062b4:	d1e0      	bne.n	8006278 <_dtoa_r+0xa58>
 80062b6:	f01a 0f01 	tst.w	sl, #1
 80062ba:	d0dd      	beq.n	8006278 <_dtoa_r+0xa58>
 80062bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062c0:	d1d7      	bne.n	8006272 <_dtoa_r+0xa52>
 80062c2:	2339      	movs	r3, #57	; 0x39
 80062c4:	f88b 3000 	strb.w	r3, [fp]
 80062c8:	462b      	mov	r3, r5
 80062ca:	461d      	mov	r5, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062d2:	2a39      	cmp	r2, #57	; 0x39
 80062d4:	d071      	beq.n	80063ba <_dtoa_r+0xb9a>
 80062d6:	3201      	adds	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e746      	b.n	800616a <_dtoa_r+0x94a>
 80062dc:	2a00      	cmp	r2, #0
 80062de:	dd07      	ble.n	80062f0 <_dtoa_r+0xad0>
 80062e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062e4:	d0ed      	beq.n	80062c2 <_dtoa_r+0xaa2>
 80062e6:	f10a 0301 	add.w	r3, sl, #1
 80062ea:	f88b 3000 	strb.w	r3, [fp]
 80062ee:	e73c      	b.n	800616a <_dtoa_r+0x94a>
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80062f6:	4599      	cmp	r9, r3
 80062f8:	d047      	beq.n	800638a <_dtoa_r+0xb6a>
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	2300      	movs	r3, #0
 8006300:	220a      	movs	r2, #10
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f8f6 	bl	80064f4 <__multadd>
 8006308:	45b8      	cmp	r8, r7
 800630a:	ee08 0a10 	vmov	s16, r0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	f04f 020a 	mov.w	r2, #10
 8006316:	4641      	mov	r1, r8
 8006318:	4620      	mov	r0, r4
 800631a:	d106      	bne.n	800632a <_dtoa_r+0xb0a>
 800631c:	f000 f8ea 	bl	80064f4 <__multadd>
 8006320:	4680      	mov	r8, r0
 8006322:	4607      	mov	r7, r0
 8006324:	f109 0901 	add.w	r9, r9, #1
 8006328:	e772      	b.n	8006210 <_dtoa_r+0x9f0>
 800632a:	f000 f8e3 	bl	80064f4 <__multadd>
 800632e:	4639      	mov	r1, r7
 8006330:	4680      	mov	r8, r0
 8006332:	2300      	movs	r3, #0
 8006334:	220a      	movs	r2, #10
 8006336:	4620      	mov	r0, r4
 8006338:	f000 f8dc 	bl	80064f4 <__multadd>
 800633c:	4607      	mov	r7, r0
 800633e:	e7f1      	b.n	8006324 <_dtoa_r+0xb04>
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	9d01      	ldr	r5, [sp, #4]
 8006346:	ee18 0a10 	vmov	r0, s16
 800634a:	4631      	mov	r1, r6
 800634c:	f7ff f9da 	bl	8005704 <quorem>
 8006350:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	f805 ab01 	strb.w	sl, [r5], #1
 800635a:	1aea      	subs	r2, r5, r3
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	4293      	cmp	r3, r2
 8006360:	dd09      	ble.n	8006376 <_dtoa_r+0xb56>
 8006362:	ee18 1a10 	vmov	r1, s16
 8006366:	2300      	movs	r3, #0
 8006368:	220a      	movs	r2, #10
 800636a:	4620      	mov	r0, r4
 800636c:	f000 f8c2 	bl	80064f4 <__multadd>
 8006370:	ee08 0a10 	vmov	s16, r0
 8006374:	e7e7      	b.n	8006346 <_dtoa_r+0xb26>
 8006376:	9b02      	ldr	r3, [sp, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	bfc8      	it	gt
 800637c:	461d      	movgt	r5, r3
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	bfd8      	it	le
 8006382:	2501      	movle	r5, #1
 8006384:	441d      	add	r5, r3
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	ee18 1a10 	vmov	r1, s16
 800638e:	2201      	movs	r2, #1
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fa5f 	bl	8006854 <__lshift>
 8006396:	4631      	mov	r1, r6
 8006398:	ee08 0a10 	vmov	s16, r0
 800639c:	f000 faca 	bl	8006934 <__mcmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dc91      	bgt.n	80062c8 <_dtoa_r+0xaa8>
 80063a4:	d102      	bne.n	80063ac <_dtoa_r+0xb8c>
 80063a6:	f01a 0f01 	tst.w	sl, #1
 80063aa:	d18d      	bne.n	80062c8 <_dtoa_r+0xaa8>
 80063ac:	462b      	mov	r3, r5
 80063ae:	461d      	mov	r5, r3
 80063b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063b4:	2a30      	cmp	r2, #48	; 0x30
 80063b6:	d0fa      	beq.n	80063ae <_dtoa_r+0xb8e>
 80063b8:	e6d7      	b.n	800616a <_dtoa_r+0x94a>
 80063ba:	9a01      	ldr	r2, [sp, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d184      	bne.n	80062ca <_dtoa_r+0xaaa>
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2331      	movs	r3, #49	; 0x31
 80063c8:	7013      	strb	r3, [r2, #0]
 80063ca:	e6ce      	b.n	800616a <_dtoa_r+0x94a>
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <_dtoa_r+0xbd4>)
 80063ce:	f7ff ba95 	b.w	80058fc <_dtoa_r+0xdc>
 80063d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f aa6e 	bne.w	80058b6 <_dtoa_r+0x96>
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <_dtoa_r+0xbd8>)
 80063dc:	f7ff ba8e 	b.w	80058fc <_dtoa_r+0xdc>
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dcae      	bgt.n	8006344 <_dtoa_r+0xb24>
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f73f aea8 	bgt.w	800613e <_dtoa_r+0x91e>
 80063ee:	e7a9      	b.n	8006344 <_dtoa_r+0xb24>
 80063f0:	08007cd7 	.word	0x08007cd7
 80063f4:	08007c34 	.word	0x08007c34
 80063f8:	08007c58 	.word	0x08007c58

080063fc <_localeconv_r>:
 80063fc:	4800      	ldr	r0, [pc, #0]	; (8006400 <_localeconv_r+0x4>)
 80063fe:	4770      	bx	lr
 8006400:	20000160 	.word	0x20000160

08006404 <malloc>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <malloc+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f000 bc17 	b.w	8006c3c <_malloc_r>
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c

08006414 <memcpy>:
 8006414:	440a      	add	r2, r1
 8006416:	4291      	cmp	r1, r2
 8006418:	f100 33ff 	add.w	r3, r0, #4294967295
 800641c:	d100      	bne.n	8006420 <memcpy+0xc>
 800641e:	4770      	bx	lr
 8006420:	b510      	push	{r4, lr}
 8006422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642a:	4291      	cmp	r1, r2
 800642c:	d1f9      	bne.n	8006422 <memcpy+0xe>
 800642e:	bd10      	pop	{r4, pc}

08006430 <_Balloc>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006434:	4604      	mov	r4, r0
 8006436:	460d      	mov	r5, r1
 8006438:	b976      	cbnz	r6, 8006458 <_Balloc+0x28>
 800643a:	2010      	movs	r0, #16
 800643c:	f7ff ffe2 	bl	8006404 <malloc>
 8006440:	4602      	mov	r2, r0
 8006442:	6260      	str	r0, [r4, #36]	; 0x24
 8006444:	b920      	cbnz	r0, 8006450 <_Balloc+0x20>
 8006446:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <_Balloc+0x78>)
 8006448:	4818      	ldr	r0, [pc, #96]	; (80064ac <_Balloc+0x7c>)
 800644a:	2166      	movs	r1, #102	; 0x66
 800644c:	f000 fdd6 	bl	8006ffc <__assert_func>
 8006450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006454:	6006      	str	r6, [r0, #0]
 8006456:	60c6      	str	r6, [r0, #12]
 8006458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800645a:	68f3      	ldr	r3, [r6, #12]
 800645c:	b183      	cbz	r3, 8006480 <_Balloc+0x50>
 800645e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006466:	b9b8      	cbnz	r0, 8006498 <_Balloc+0x68>
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f605 	lsl.w	r6, r1, r5
 800646e:	1d72      	adds	r2, r6, #5
 8006470:	0092      	lsls	r2, r2, #2
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fb60 	bl	8006b38 <_calloc_r>
 8006478:	b160      	cbz	r0, 8006494 <_Balloc+0x64>
 800647a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800647e:	e00e      	b.n	800649e <_Balloc+0x6e>
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	2104      	movs	r1, #4
 8006484:	4620      	mov	r0, r4
 8006486:	f000 fb57 	bl	8006b38 <_calloc_r>
 800648a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648c:	60f0      	str	r0, [r6, #12]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e4      	bne.n	800645e <_Balloc+0x2e>
 8006494:	2000      	movs	r0, #0
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	6802      	ldr	r2, [r0, #0]
 800649a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800649e:	2300      	movs	r3, #0
 80064a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064a4:	e7f7      	b.n	8006496 <_Balloc+0x66>
 80064a6:	bf00      	nop
 80064a8:	08007c65 	.word	0x08007c65
 80064ac:	08007ce8 	.word	0x08007ce8

080064b0 <_Bfree>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064b4:	4605      	mov	r5, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	b976      	cbnz	r6, 80064d8 <_Bfree+0x28>
 80064ba:	2010      	movs	r0, #16
 80064bc:	f7ff ffa2 	bl	8006404 <malloc>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6268      	str	r0, [r5, #36]	; 0x24
 80064c4:	b920      	cbnz	r0, 80064d0 <_Bfree+0x20>
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <_Bfree+0x3c>)
 80064c8:	4809      	ldr	r0, [pc, #36]	; (80064f0 <_Bfree+0x40>)
 80064ca:	218a      	movs	r1, #138	; 0x8a
 80064cc:	f000 fd96 	bl	8006ffc <__assert_func>
 80064d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064d4:	6006      	str	r6, [r0, #0]
 80064d6:	60c6      	str	r6, [r0, #12]
 80064d8:	b13c      	cbz	r4, 80064ea <_Bfree+0x3a>
 80064da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064dc:	6862      	ldr	r2, [r4, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064e4:	6021      	str	r1, [r4, #0]
 80064e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	08007c65 	.word	0x08007c65
 80064f0:	08007ce8 	.word	0x08007ce8

080064f4 <__multadd>:
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	690d      	ldr	r5, [r1, #16]
 80064fa:	4607      	mov	r7, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	461e      	mov	r6, r3
 8006500:	f101 0c14 	add.w	ip, r1, #20
 8006504:	2000      	movs	r0, #0
 8006506:	f8dc 3000 	ldr.w	r3, [ip]
 800650a:	b299      	uxth	r1, r3
 800650c:	fb02 6101 	mla	r1, r2, r1, r6
 8006510:	0c1e      	lsrs	r6, r3, #16
 8006512:	0c0b      	lsrs	r3, r1, #16
 8006514:	fb02 3306 	mla	r3, r2, r6, r3
 8006518:	b289      	uxth	r1, r1
 800651a:	3001      	adds	r0, #1
 800651c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006520:	4285      	cmp	r5, r0
 8006522:	f84c 1b04 	str.w	r1, [ip], #4
 8006526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800652a:	dcec      	bgt.n	8006506 <__multadd+0x12>
 800652c:	b30e      	cbz	r6, 8006572 <__multadd+0x7e>
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	42ab      	cmp	r3, r5
 8006532:	dc19      	bgt.n	8006568 <__multadd+0x74>
 8006534:	6861      	ldr	r1, [r4, #4]
 8006536:	4638      	mov	r0, r7
 8006538:	3101      	adds	r1, #1
 800653a:	f7ff ff79 	bl	8006430 <_Balloc>
 800653e:	4680      	mov	r8, r0
 8006540:	b928      	cbnz	r0, 800654e <__multadd+0x5a>
 8006542:	4602      	mov	r2, r0
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <__multadd+0x84>)
 8006546:	480d      	ldr	r0, [pc, #52]	; (800657c <__multadd+0x88>)
 8006548:	21b5      	movs	r1, #181	; 0xb5
 800654a:	f000 fd57 	bl	8006ffc <__assert_func>
 800654e:	6922      	ldr	r2, [r4, #16]
 8006550:	3202      	adds	r2, #2
 8006552:	f104 010c 	add.w	r1, r4, #12
 8006556:	0092      	lsls	r2, r2, #2
 8006558:	300c      	adds	r0, #12
 800655a:	f7ff ff5b 	bl	8006414 <memcpy>
 800655e:	4621      	mov	r1, r4
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ffa5 	bl	80064b0 <_Bfree>
 8006566:	4644      	mov	r4, r8
 8006568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800656c:	3501      	adds	r5, #1
 800656e:	615e      	str	r6, [r3, #20]
 8006570:	6125      	str	r5, [r4, #16]
 8006572:	4620      	mov	r0, r4
 8006574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006578:	08007cd7 	.word	0x08007cd7
 800657c:	08007ce8 	.word	0x08007ce8

08006580 <__hi0bits>:
 8006580:	0c03      	lsrs	r3, r0, #16
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	b9d3      	cbnz	r3, 80065bc <__hi0bits+0x3c>
 8006586:	0400      	lsls	r0, r0, #16
 8006588:	2310      	movs	r3, #16
 800658a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800658e:	bf04      	itt	eq
 8006590:	0200      	lsleq	r0, r0, #8
 8006592:	3308      	addeq	r3, #8
 8006594:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006598:	bf04      	itt	eq
 800659a:	0100      	lsleq	r0, r0, #4
 800659c:	3304      	addeq	r3, #4
 800659e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065a2:	bf04      	itt	eq
 80065a4:	0080      	lsleq	r0, r0, #2
 80065a6:	3302      	addeq	r3, #2
 80065a8:	2800      	cmp	r0, #0
 80065aa:	db05      	blt.n	80065b8 <__hi0bits+0x38>
 80065ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065b0:	f103 0301 	add.w	r3, r3, #1
 80065b4:	bf08      	it	eq
 80065b6:	2320      	moveq	r3, #32
 80065b8:	4618      	mov	r0, r3
 80065ba:	4770      	bx	lr
 80065bc:	2300      	movs	r3, #0
 80065be:	e7e4      	b.n	800658a <__hi0bits+0xa>

080065c0 <__lo0bits>:
 80065c0:	6803      	ldr	r3, [r0, #0]
 80065c2:	f013 0207 	ands.w	r2, r3, #7
 80065c6:	4601      	mov	r1, r0
 80065c8:	d00b      	beq.n	80065e2 <__lo0bits+0x22>
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d423      	bmi.n	8006616 <__lo0bits+0x56>
 80065ce:	0798      	lsls	r0, r3, #30
 80065d0:	bf49      	itett	mi
 80065d2:	085b      	lsrmi	r3, r3, #1
 80065d4:	089b      	lsrpl	r3, r3, #2
 80065d6:	2001      	movmi	r0, #1
 80065d8:	600b      	strmi	r3, [r1, #0]
 80065da:	bf5c      	itt	pl
 80065dc:	600b      	strpl	r3, [r1, #0]
 80065de:	2002      	movpl	r0, #2
 80065e0:	4770      	bx	lr
 80065e2:	b298      	uxth	r0, r3
 80065e4:	b9a8      	cbnz	r0, 8006612 <__lo0bits+0x52>
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	2010      	movs	r0, #16
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	b90a      	cbnz	r2, 80065f2 <__lo0bits+0x32>
 80065ee:	3008      	adds	r0, #8
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	071a      	lsls	r2, r3, #28
 80065f4:	bf04      	itt	eq
 80065f6:	091b      	lsreq	r3, r3, #4
 80065f8:	3004      	addeq	r0, #4
 80065fa:	079a      	lsls	r2, r3, #30
 80065fc:	bf04      	itt	eq
 80065fe:	089b      	lsreq	r3, r3, #2
 8006600:	3002      	addeq	r0, #2
 8006602:	07da      	lsls	r2, r3, #31
 8006604:	d403      	bmi.n	800660e <__lo0bits+0x4e>
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	f100 0001 	add.w	r0, r0, #1
 800660c:	d005      	beq.n	800661a <__lo0bits+0x5a>
 800660e:	600b      	str	r3, [r1, #0]
 8006610:	4770      	bx	lr
 8006612:	4610      	mov	r0, r2
 8006614:	e7e9      	b.n	80065ea <__lo0bits+0x2a>
 8006616:	2000      	movs	r0, #0
 8006618:	4770      	bx	lr
 800661a:	2020      	movs	r0, #32
 800661c:	4770      	bx	lr
	...

08006620 <__i2b>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	2101      	movs	r1, #1
 8006626:	f7ff ff03 	bl	8006430 <_Balloc>
 800662a:	4602      	mov	r2, r0
 800662c:	b928      	cbnz	r0, 800663a <__i2b+0x1a>
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <__i2b+0x24>)
 8006630:	4805      	ldr	r0, [pc, #20]	; (8006648 <__i2b+0x28>)
 8006632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006636:	f000 fce1 	bl	8006ffc <__assert_func>
 800663a:	2301      	movs	r3, #1
 800663c:	6144      	str	r4, [r0, #20]
 800663e:	6103      	str	r3, [r0, #16]
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	08007cd7 	.word	0x08007cd7
 8006648:	08007ce8 	.word	0x08007ce8

0800664c <__multiply>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	4691      	mov	r9, r2
 8006652:	690a      	ldr	r2, [r1, #16]
 8006654:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	bfb8      	it	lt
 800665c:	460b      	movlt	r3, r1
 800665e:	460c      	mov	r4, r1
 8006660:	bfbc      	itt	lt
 8006662:	464c      	movlt	r4, r9
 8006664:	4699      	movlt	r9, r3
 8006666:	6927      	ldr	r7, [r4, #16]
 8006668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	6861      	ldr	r1, [r4, #4]
 8006670:	eb07 060a 	add.w	r6, r7, sl
 8006674:	42b3      	cmp	r3, r6
 8006676:	b085      	sub	sp, #20
 8006678:	bfb8      	it	lt
 800667a:	3101      	addlt	r1, #1
 800667c:	f7ff fed8 	bl	8006430 <_Balloc>
 8006680:	b930      	cbnz	r0, 8006690 <__multiply+0x44>
 8006682:	4602      	mov	r2, r0
 8006684:	4b44      	ldr	r3, [pc, #272]	; (8006798 <__multiply+0x14c>)
 8006686:	4845      	ldr	r0, [pc, #276]	; (800679c <__multiply+0x150>)
 8006688:	f240 115d 	movw	r1, #349	; 0x15d
 800668c:	f000 fcb6 	bl	8006ffc <__assert_func>
 8006690:	f100 0514 	add.w	r5, r0, #20
 8006694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006698:	462b      	mov	r3, r5
 800669a:	2200      	movs	r2, #0
 800669c:	4543      	cmp	r3, r8
 800669e:	d321      	bcc.n	80066e4 <__multiply+0x98>
 80066a0:	f104 0314 	add.w	r3, r4, #20
 80066a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066a8:	f109 0314 	add.w	r3, r9, #20
 80066ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066b0:	9202      	str	r2, [sp, #8]
 80066b2:	1b3a      	subs	r2, r7, r4
 80066b4:	3a15      	subs	r2, #21
 80066b6:	f022 0203 	bic.w	r2, r2, #3
 80066ba:	3204      	adds	r2, #4
 80066bc:	f104 0115 	add.w	r1, r4, #21
 80066c0:	428f      	cmp	r7, r1
 80066c2:	bf38      	it	cc
 80066c4:	2204      	movcc	r2, #4
 80066c6:	9201      	str	r2, [sp, #4]
 80066c8:	9a02      	ldr	r2, [sp, #8]
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d80c      	bhi.n	80066ea <__multiply+0x9e>
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	dd03      	ble.n	80066dc <__multiply+0x90>
 80066d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d05a      	beq.n	8006792 <__multiply+0x146>
 80066dc:	6106      	str	r6, [r0, #16]
 80066de:	b005      	add	sp, #20
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	f843 2b04 	str.w	r2, [r3], #4
 80066e8:	e7d8      	b.n	800669c <__multiply+0x50>
 80066ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80066ee:	f1ba 0f00 	cmp.w	sl, #0
 80066f2:	d024      	beq.n	800673e <__multiply+0xf2>
 80066f4:	f104 0e14 	add.w	lr, r4, #20
 80066f8:	46a9      	mov	r9, r5
 80066fa:	f04f 0c00 	mov.w	ip, #0
 80066fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006702:	f8d9 1000 	ldr.w	r1, [r9]
 8006706:	fa1f fb82 	uxth.w	fp, r2
 800670a:	b289      	uxth	r1, r1
 800670c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006710:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006714:	f8d9 2000 	ldr.w	r2, [r9]
 8006718:	4461      	add	r1, ip
 800671a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800671e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006726:	b289      	uxth	r1, r1
 8006728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800672c:	4577      	cmp	r7, lr
 800672e:	f849 1b04 	str.w	r1, [r9], #4
 8006732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006736:	d8e2      	bhi.n	80066fe <__multiply+0xb2>
 8006738:	9a01      	ldr	r2, [sp, #4]
 800673a:	f845 c002 	str.w	ip, [r5, r2]
 800673e:	9a03      	ldr	r2, [sp, #12]
 8006740:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006744:	3304      	adds	r3, #4
 8006746:	f1b9 0f00 	cmp.w	r9, #0
 800674a:	d020      	beq.n	800678e <__multiply+0x142>
 800674c:	6829      	ldr	r1, [r5, #0]
 800674e:	f104 0c14 	add.w	ip, r4, #20
 8006752:	46ae      	mov	lr, r5
 8006754:	f04f 0a00 	mov.w	sl, #0
 8006758:	f8bc b000 	ldrh.w	fp, [ip]
 800675c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006760:	fb09 220b 	mla	r2, r9, fp, r2
 8006764:	4492      	add	sl, r2
 8006766:	b289      	uxth	r1, r1
 8006768:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800676c:	f84e 1b04 	str.w	r1, [lr], #4
 8006770:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006774:	f8be 1000 	ldrh.w	r1, [lr]
 8006778:	0c12      	lsrs	r2, r2, #16
 800677a:	fb09 1102 	mla	r1, r9, r2, r1
 800677e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006782:	4567      	cmp	r7, ip
 8006784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006788:	d8e6      	bhi.n	8006758 <__multiply+0x10c>
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	50a9      	str	r1, [r5, r2]
 800678e:	3504      	adds	r5, #4
 8006790:	e79a      	b.n	80066c8 <__multiply+0x7c>
 8006792:	3e01      	subs	r6, #1
 8006794:	e79c      	b.n	80066d0 <__multiply+0x84>
 8006796:	bf00      	nop
 8006798:	08007cd7 	.word	0x08007cd7
 800679c:	08007ce8 	.word	0x08007ce8

080067a0 <__pow5mult>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	4615      	mov	r5, r2
 80067a6:	f012 0203 	ands.w	r2, r2, #3
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	d007      	beq.n	80067c0 <__pow5mult+0x20>
 80067b0:	4c25      	ldr	r4, [pc, #148]	; (8006848 <__pow5mult+0xa8>)
 80067b2:	3a01      	subs	r2, #1
 80067b4:	2300      	movs	r3, #0
 80067b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ba:	f7ff fe9b 	bl	80064f4 <__multadd>
 80067be:	4607      	mov	r7, r0
 80067c0:	10ad      	asrs	r5, r5, #2
 80067c2:	d03d      	beq.n	8006840 <__pow5mult+0xa0>
 80067c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067c6:	b97c      	cbnz	r4, 80067e8 <__pow5mult+0x48>
 80067c8:	2010      	movs	r0, #16
 80067ca:	f7ff fe1b 	bl	8006404 <malloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6270      	str	r0, [r6, #36]	; 0x24
 80067d2:	b928      	cbnz	r0, 80067e0 <__pow5mult+0x40>
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <__pow5mult+0xac>)
 80067d6:	481e      	ldr	r0, [pc, #120]	; (8006850 <__pow5mult+0xb0>)
 80067d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067dc:	f000 fc0e 	bl	8006ffc <__assert_func>
 80067e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067e4:	6004      	str	r4, [r0, #0]
 80067e6:	60c4      	str	r4, [r0, #12]
 80067e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067f0:	b94c      	cbnz	r4, 8006806 <__pow5mult+0x66>
 80067f2:	f240 2171 	movw	r1, #625	; 0x271
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff ff12 	bl	8006620 <__i2b>
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006802:	4604      	mov	r4, r0
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	f04f 0900 	mov.w	r9, #0
 800680a:	07eb      	lsls	r3, r5, #31
 800680c:	d50a      	bpl.n	8006824 <__pow5mult+0x84>
 800680e:	4639      	mov	r1, r7
 8006810:	4622      	mov	r2, r4
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff ff1a 	bl	800664c <__multiply>
 8006818:	4639      	mov	r1, r7
 800681a:	4680      	mov	r8, r0
 800681c:	4630      	mov	r0, r6
 800681e:	f7ff fe47 	bl	80064b0 <_Bfree>
 8006822:	4647      	mov	r7, r8
 8006824:	106d      	asrs	r5, r5, #1
 8006826:	d00b      	beq.n	8006840 <__pow5mult+0xa0>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	b938      	cbnz	r0, 800683c <__pow5mult+0x9c>
 800682c:	4622      	mov	r2, r4
 800682e:	4621      	mov	r1, r4
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff ff0b 	bl	800664c <__multiply>
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	f8c0 9000 	str.w	r9, [r0]
 800683c:	4604      	mov	r4, r0
 800683e:	e7e4      	b.n	800680a <__pow5mult+0x6a>
 8006840:	4638      	mov	r0, r7
 8006842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006846:	bf00      	nop
 8006848:	08007e38 	.word	0x08007e38
 800684c:	08007c65 	.word	0x08007c65
 8006850:	08007ce8 	.word	0x08007ce8

08006854 <__lshift>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	460c      	mov	r4, r1
 800685a:	6849      	ldr	r1, [r1, #4]
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	4607      	mov	r7, r0
 8006866:	4691      	mov	r9, r2
 8006868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800686c:	f108 0601 	add.w	r6, r8, #1
 8006870:	42b3      	cmp	r3, r6
 8006872:	db0b      	blt.n	800688c <__lshift+0x38>
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff fddb 	bl	8006430 <_Balloc>
 800687a:	4605      	mov	r5, r0
 800687c:	b948      	cbnz	r0, 8006892 <__lshift+0x3e>
 800687e:	4602      	mov	r2, r0
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <__lshift+0xd8>)
 8006882:	482b      	ldr	r0, [pc, #172]	; (8006930 <__lshift+0xdc>)
 8006884:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006888:	f000 fbb8 	bl	8006ffc <__assert_func>
 800688c:	3101      	adds	r1, #1
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	e7ee      	b.n	8006870 <__lshift+0x1c>
 8006892:	2300      	movs	r3, #0
 8006894:	f100 0114 	add.w	r1, r0, #20
 8006898:	f100 0210 	add.w	r2, r0, #16
 800689c:	4618      	mov	r0, r3
 800689e:	4553      	cmp	r3, sl
 80068a0:	db37      	blt.n	8006912 <__lshift+0xbe>
 80068a2:	6920      	ldr	r0, [r4, #16]
 80068a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068a8:	f104 0314 	add.w	r3, r4, #20
 80068ac:	f019 091f 	ands.w	r9, r9, #31
 80068b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068b8:	d02f      	beq.n	800691a <__lshift+0xc6>
 80068ba:	f1c9 0e20 	rsb	lr, r9, #32
 80068be:	468a      	mov	sl, r1
 80068c0:	f04f 0c00 	mov.w	ip, #0
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	fa02 f209 	lsl.w	r2, r2, r9
 80068ca:	ea42 020c 	orr.w	r2, r2, ip
 80068ce:	f84a 2b04 	str.w	r2, [sl], #4
 80068d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d6:	4298      	cmp	r0, r3
 80068d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068dc:	d8f2      	bhi.n	80068c4 <__lshift+0x70>
 80068de:	1b03      	subs	r3, r0, r4
 80068e0:	3b15      	subs	r3, #21
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	3304      	adds	r3, #4
 80068e8:	f104 0215 	add.w	r2, r4, #21
 80068ec:	4290      	cmp	r0, r2
 80068ee:	bf38      	it	cc
 80068f0:	2304      	movcc	r3, #4
 80068f2:	f841 c003 	str.w	ip, [r1, r3]
 80068f6:	f1bc 0f00 	cmp.w	ip, #0
 80068fa:	d001      	beq.n	8006900 <__lshift+0xac>
 80068fc:	f108 0602 	add.w	r6, r8, #2
 8006900:	3e01      	subs	r6, #1
 8006902:	4638      	mov	r0, r7
 8006904:	612e      	str	r6, [r5, #16]
 8006906:	4621      	mov	r1, r4
 8006908:	f7ff fdd2 	bl	80064b0 <_Bfree>
 800690c:	4628      	mov	r0, r5
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	f842 0f04 	str.w	r0, [r2, #4]!
 8006916:	3301      	adds	r3, #1
 8006918:	e7c1      	b.n	800689e <__lshift+0x4a>
 800691a:	3904      	subs	r1, #4
 800691c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006920:	f841 2f04 	str.w	r2, [r1, #4]!
 8006924:	4298      	cmp	r0, r3
 8006926:	d8f9      	bhi.n	800691c <__lshift+0xc8>
 8006928:	e7ea      	b.n	8006900 <__lshift+0xac>
 800692a:	bf00      	nop
 800692c:	08007cd7 	.word	0x08007cd7
 8006930:	08007ce8 	.word	0x08007ce8

08006934 <__mcmp>:
 8006934:	b530      	push	{r4, r5, lr}
 8006936:	6902      	ldr	r2, [r0, #16]
 8006938:	690c      	ldr	r4, [r1, #16]
 800693a:	1b12      	subs	r2, r2, r4
 800693c:	d10e      	bne.n	800695c <__mcmp+0x28>
 800693e:	f100 0314 	add.w	r3, r0, #20
 8006942:	3114      	adds	r1, #20
 8006944:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006948:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800694c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006950:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006954:	42a5      	cmp	r5, r4
 8006956:	d003      	beq.n	8006960 <__mcmp+0x2c>
 8006958:	d305      	bcc.n	8006966 <__mcmp+0x32>
 800695a:	2201      	movs	r2, #1
 800695c:	4610      	mov	r0, r2
 800695e:	bd30      	pop	{r4, r5, pc}
 8006960:	4283      	cmp	r3, r0
 8006962:	d3f3      	bcc.n	800694c <__mcmp+0x18>
 8006964:	e7fa      	b.n	800695c <__mcmp+0x28>
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	e7f7      	b.n	800695c <__mcmp+0x28>

0800696c <__mdiff>:
 800696c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	460c      	mov	r4, r1
 8006972:	4606      	mov	r6, r0
 8006974:	4611      	mov	r1, r2
 8006976:	4620      	mov	r0, r4
 8006978:	4690      	mov	r8, r2
 800697a:	f7ff ffdb 	bl	8006934 <__mcmp>
 800697e:	1e05      	subs	r5, r0, #0
 8006980:	d110      	bne.n	80069a4 <__mdiff+0x38>
 8006982:	4629      	mov	r1, r5
 8006984:	4630      	mov	r0, r6
 8006986:	f7ff fd53 	bl	8006430 <_Balloc>
 800698a:	b930      	cbnz	r0, 800699a <__mdiff+0x2e>
 800698c:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <__mdiff+0x10c>)
 800698e:	4602      	mov	r2, r0
 8006990:	f240 2132 	movw	r1, #562	; 0x232
 8006994:	4839      	ldr	r0, [pc, #228]	; (8006a7c <__mdiff+0x110>)
 8006996:	f000 fb31 	bl	8006ffc <__assert_func>
 800699a:	2301      	movs	r3, #1
 800699c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	bfa4      	itt	ge
 80069a6:	4643      	movge	r3, r8
 80069a8:	46a0      	movge	r8, r4
 80069aa:	4630      	mov	r0, r6
 80069ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069b0:	bfa6      	itte	ge
 80069b2:	461c      	movge	r4, r3
 80069b4:	2500      	movge	r5, #0
 80069b6:	2501      	movlt	r5, #1
 80069b8:	f7ff fd3a 	bl	8006430 <_Balloc>
 80069bc:	b920      	cbnz	r0, 80069c8 <__mdiff+0x5c>
 80069be:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <__mdiff+0x10c>)
 80069c0:	4602      	mov	r2, r0
 80069c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069c6:	e7e5      	b.n	8006994 <__mdiff+0x28>
 80069c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069cc:	6926      	ldr	r6, [r4, #16]
 80069ce:	60c5      	str	r5, [r0, #12]
 80069d0:	f104 0914 	add.w	r9, r4, #20
 80069d4:	f108 0514 	add.w	r5, r8, #20
 80069d8:	f100 0e14 	add.w	lr, r0, #20
 80069dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069e4:	f108 0210 	add.w	r2, r8, #16
 80069e8:	46f2      	mov	sl, lr
 80069ea:	2100      	movs	r1, #0
 80069ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80069f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069f4:	fa1f f883 	uxth.w	r8, r3
 80069f8:	fa11 f18b 	uxtah	r1, r1, fp
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	eba1 0808 	sub.w	r8, r1, r8
 8006a02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a0a:	fa1f f888 	uxth.w	r8, r8
 8006a0e:	1419      	asrs	r1, r3, #16
 8006a10:	454e      	cmp	r6, r9
 8006a12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a16:	f84a 3b04 	str.w	r3, [sl], #4
 8006a1a:	d8e7      	bhi.n	80069ec <__mdiff+0x80>
 8006a1c:	1b33      	subs	r3, r6, r4
 8006a1e:	3b15      	subs	r3, #21
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	3304      	adds	r3, #4
 8006a26:	3415      	adds	r4, #21
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	bf38      	it	cc
 8006a2c:	2304      	movcc	r3, #4
 8006a2e:	441d      	add	r5, r3
 8006a30:	4473      	add	r3, lr
 8006a32:	469e      	mov	lr, r3
 8006a34:	462e      	mov	r6, r5
 8006a36:	4566      	cmp	r6, ip
 8006a38:	d30e      	bcc.n	8006a58 <__mdiff+0xec>
 8006a3a:	f10c 0203 	add.w	r2, ip, #3
 8006a3e:	1b52      	subs	r2, r2, r5
 8006a40:	f022 0203 	bic.w	r2, r2, #3
 8006a44:	3d03      	subs	r5, #3
 8006a46:	45ac      	cmp	ip, r5
 8006a48:	bf38      	it	cc
 8006a4a:	2200      	movcc	r2, #0
 8006a4c:	441a      	add	r2, r3
 8006a4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a52:	b17b      	cbz	r3, 8006a74 <__mdiff+0x108>
 8006a54:	6107      	str	r7, [r0, #16]
 8006a56:	e7a3      	b.n	80069a0 <__mdiff+0x34>
 8006a58:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a5c:	fa11 f288 	uxtah	r2, r1, r8
 8006a60:	1414      	asrs	r4, r2, #16
 8006a62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a66:	b292      	uxth	r2, r2
 8006a68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a6c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a70:	1421      	asrs	r1, r4, #16
 8006a72:	e7e0      	b.n	8006a36 <__mdiff+0xca>
 8006a74:	3f01      	subs	r7, #1
 8006a76:	e7ea      	b.n	8006a4e <__mdiff+0xe2>
 8006a78:	08007cd7 	.word	0x08007cd7
 8006a7c:	08007ce8 	.word	0x08007ce8

08006a80 <__d2b>:
 8006a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a84:	4689      	mov	r9, r1
 8006a86:	2101      	movs	r1, #1
 8006a88:	ec57 6b10 	vmov	r6, r7, d0
 8006a8c:	4690      	mov	r8, r2
 8006a8e:	f7ff fccf 	bl	8006430 <_Balloc>
 8006a92:	4604      	mov	r4, r0
 8006a94:	b930      	cbnz	r0, 8006aa4 <__d2b+0x24>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <__d2b+0xb0>)
 8006a9a:	4826      	ldr	r0, [pc, #152]	; (8006b34 <__d2b+0xb4>)
 8006a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8006aa0:	f000 faac 	bl	8006ffc <__assert_func>
 8006aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006aac:	bb35      	cbnz	r5, 8006afc <__d2b+0x7c>
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	d028      	beq.n	8006b06 <__d2b+0x86>
 8006ab4:	4668      	mov	r0, sp
 8006ab6:	9600      	str	r6, [sp, #0]
 8006ab8:	f7ff fd82 	bl	80065c0 <__lo0bits>
 8006abc:	9900      	ldr	r1, [sp, #0]
 8006abe:	b300      	cbz	r0, 8006b02 <__d2b+0x82>
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	f1c0 0320 	rsb	r3, r0, #32
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	430b      	orrs	r3, r1
 8006acc:	40c2      	lsrs	r2, r0
 8006ace:	6163      	str	r3, [r4, #20]
 8006ad0:	9201      	str	r2, [sp, #4]
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	61a3      	str	r3, [r4, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf14      	ite	ne
 8006ada:	2202      	movne	r2, #2
 8006adc:	2201      	moveq	r2, #1
 8006ade:	6122      	str	r2, [r4, #16]
 8006ae0:	b1d5      	cbz	r5, 8006b18 <__d2b+0x98>
 8006ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ae6:	4405      	add	r5, r0
 8006ae8:	f8c9 5000 	str.w	r5, [r9]
 8006aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006af0:	f8c8 0000 	str.w	r0, [r8]
 8006af4:	4620      	mov	r0, r4
 8006af6:	b003      	add	sp, #12
 8006af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b00:	e7d5      	b.n	8006aae <__d2b+0x2e>
 8006b02:	6161      	str	r1, [r4, #20]
 8006b04:	e7e5      	b.n	8006ad2 <__d2b+0x52>
 8006b06:	a801      	add	r0, sp, #4
 8006b08:	f7ff fd5a 	bl	80065c0 <__lo0bits>
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	6163      	str	r3, [r4, #20]
 8006b10:	2201      	movs	r2, #1
 8006b12:	6122      	str	r2, [r4, #16]
 8006b14:	3020      	adds	r0, #32
 8006b16:	e7e3      	b.n	8006ae0 <__d2b+0x60>
 8006b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b20:	f8c9 0000 	str.w	r0, [r9]
 8006b24:	6918      	ldr	r0, [r3, #16]
 8006b26:	f7ff fd2b 	bl	8006580 <__hi0bits>
 8006b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b2e:	e7df      	b.n	8006af0 <__d2b+0x70>
 8006b30:	08007cd7 	.word	0x08007cd7
 8006b34:	08007ce8 	.word	0x08007ce8

08006b38 <_calloc_r>:
 8006b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3a:	fba1 2402 	umull	r2, r4, r1, r2
 8006b3e:	b94c      	cbnz	r4, 8006b54 <_calloc_r+0x1c>
 8006b40:	4611      	mov	r1, r2
 8006b42:	9201      	str	r2, [sp, #4]
 8006b44:	f000 f87a 	bl	8006c3c <_malloc_r>
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	b930      	cbnz	r0, 8006b5c <_calloc_r+0x24>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	b003      	add	sp, #12
 8006b52:	bd30      	pop	{r4, r5, pc}
 8006b54:	220c      	movs	r2, #12
 8006b56:	6002      	str	r2, [r0, #0]
 8006b58:	2500      	movs	r5, #0
 8006b5a:	e7f8      	b.n	8006b4e <_calloc_r+0x16>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	f7fe f93f 	bl	8004de0 <memset>
 8006b62:	e7f4      	b.n	8006b4e <_calloc_r+0x16>

08006b64 <_free_r>:
 8006b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d044      	beq.n	8006bf4 <_free_r+0x90>
 8006b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6e:	9001      	str	r0, [sp, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f1a1 0404 	sub.w	r4, r1, #4
 8006b76:	bfb8      	it	lt
 8006b78:	18e4      	addlt	r4, r4, r3
 8006b7a:	f000 fa9b 	bl	80070b4 <__malloc_lock>
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <_free_r+0x94>)
 8006b80:	9801      	ldr	r0, [sp, #4]
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	b933      	cbnz	r3, 8006b94 <_free_r+0x30>
 8006b86:	6063      	str	r3, [r4, #4]
 8006b88:	6014      	str	r4, [r2, #0]
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b90:	f000 ba96 	b.w	80070c0 <__malloc_unlock>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d908      	bls.n	8006baa <_free_r+0x46>
 8006b98:	6825      	ldr	r5, [r4, #0]
 8006b9a:	1961      	adds	r1, r4, r5
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	bf01      	itttt	eq
 8006ba0:	6819      	ldreq	r1, [r3, #0]
 8006ba2:	685b      	ldreq	r3, [r3, #4]
 8006ba4:	1949      	addeq	r1, r1, r5
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	e7ed      	b.n	8006b86 <_free_r+0x22>
 8006baa:	461a      	mov	r2, r3
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	b10b      	cbz	r3, 8006bb4 <_free_r+0x50>
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d9fa      	bls.n	8006baa <_free_r+0x46>
 8006bb4:	6811      	ldr	r1, [r2, #0]
 8006bb6:	1855      	adds	r5, r2, r1
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	d10b      	bne.n	8006bd4 <_free_r+0x70>
 8006bbc:	6824      	ldr	r4, [r4, #0]
 8006bbe:	4421      	add	r1, r4
 8006bc0:	1854      	adds	r4, r2, r1
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	d1e0      	bne.n	8006b8a <_free_r+0x26>
 8006bc8:	681c      	ldr	r4, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	6053      	str	r3, [r2, #4]
 8006bce:	4421      	add	r1, r4
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	e7da      	b.n	8006b8a <_free_r+0x26>
 8006bd4:	d902      	bls.n	8006bdc <_free_r+0x78>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	6003      	str	r3, [r0, #0]
 8006bda:	e7d6      	b.n	8006b8a <_free_r+0x26>
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	1961      	adds	r1, r4, r5
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf04      	itt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	bf04      	itt	eq
 8006bec:	1949      	addeq	r1, r1, r5
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	6054      	str	r4, [r2, #4]
 8006bf2:	e7ca      	b.n	8006b8a <_free_r+0x26>
 8006bf4:	b003      	add	sp, #12
 8006bf6:	bd30      	pop	{r4, r5, pc}
 8006bf8:	200002dc 	.word	0x200002dc

08006bfc <sbrk_aligned>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	4e0e      	ldr	r6, [pc, #56]	; (8006c38 <sbrk_aligned+0x3c>)
 8006c00:	460c      	mov	r4, r1
 8006c02:	6831      	ldr	r1, [r6, #0]
 8006c04:	4605      	mov	r5, r0
 8006c06:	b911      	cbnz	r1, 8006c0e <sbrk_aligned+0x12>
 8006c08:	f000 f9e8 	bl	8006fdc <_sbrk_r>
 8006c0c:	6030      	str	r0, [r6, #0]
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f9e3 	bl	8006fdc <_sbrk_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d00a      	beq.n	8006c30 <sbrk_aligned+0x34>
 8006c1a:	1cc4      	adds	r4, r0, #3
 8006c1c:	f024 0403 	bic.w	r4, r4, #3
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d007      	beq.n	8006c34 <sbrk_aligned+0x38>
 8006c24:	1a21      	subs	r1, r4, r0
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 f9d8 	bl	8006fdc <_sbrk_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d101      	bne.n	8006c34 <sbrk_aligned+0x38>
 8006c30:	f04f 34ff 	mov.w	r4, #4294967295
 8006c34:	4620      	mov	r0, r4
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	200002e0 	.word	0x200002e0

08006c3c <_malloc_r>:
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	1ccd      	adds	r5, r1, #3
 8006c42:	f025 0503 	bic.w	r5, r5, #3
 8006c46:	3508      	adds	r5, #8
 8006c48:	2d0c      	cmp	r5, #12
 8006c4a:	bf38      	it	cc
 8006c4c:	250c      	movcc	r5, #12
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	4607      	mov	r7, r0
 8006c52:	db01      	blt.n	8006c58 <_malloc_r+0x1c>
 8006c54:	42a9      	cmp	r1, r5
 8006c56:	d905      	bls.n	8006c64 <_malloc_r+0x28>
 8006c58:	230c      	movs	r3, #12
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	4e2e      	ldr	r6, [pc, #184]	; (8006d20 <_malloc_r+0xe4>)
 8006c66:	f000 fa25 	bl	80070b4 <__malloc_lock>
 8006c6a:	6833      	ldr	r3, [r6, #0]
 8006c6c:	461c      	mov	r4, r3
 8006c6e:	bb34      	cbnz	r4, 8006cbe <_malloc_r+0x82>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7ff ffc2 	bl	8006bfc <sbrk_aligned>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	d14d      	bne.n	8006d1a <_malloc_r+0xde>
 8006c7e:	6834      	ldr	r4, [r6, #0]
 8006c80:	4626      	mov	r6, r4
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	d140      	bne.n	8006d08 <_malloc_r+0xcc>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	eb04 0803 	add.w	r8, r4, r3
 8006c90:	f000 f9a4 	bl	8006fdc <_sbrk_r>
 8006c94:	4580      	cmp	r8, r0
 8006c96:	d13a      	bne.n	8006d0e <_malloc_r+0xd2>
 8006c98:	6821      	ldr	r1, [r4, #0]
 8006c9a:	3503      	adds	r5, #3
 8006c9c:	1a6d      	subs	r5, r5, r1
 8006c9e:	f025 0503 	bic.w	r5, r5, #3
 8006ca2:	3508      	adds	r5, #8
 8006ca4:	2d0c      	cmp	r5, #12
 8006ca6:	bf38      	it	cc
 8006ca8:	250c      	movcc	r5, #12
 8006caa:	4629      	mov	r1, r5
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff ffa5 	bl	8006bfc <sbrk_aligned>
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d02b      	beq.n	8006d0e <_malloc_r+0xd2>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	442b      	add	r3, r5
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	e00e      	b.n	8006cdc <_malloc_r+0xa0>
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	1b52      	subs	r2, r2, r5
 8006cc2:	d41e      	bmi.n	8006d02 <_malloc_r+0xc6>
 8006cc4:	2a0b      	cmp	r2, #11
 8006cc6:	d916      	bls.n	8006cf6 <_malloc_r+0xba>
 8006cc8:	1961      	adds	r1, r4, r5
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	6025      	str	r5, [r4, #0]
 8006cce:	bf18      	it	ne
 8006cd0:	6059      	strne	r1, [r3, #4]
 8006cd2:	6863      	ldr	r3, [r4, #4]
 8006cd4:	bf08      	it	eq
 8006cd6:	6031      	streq	r1, [r6, #0]
 8006cd8:	5162      	str	r2, [r4, r5]
 8006cda:	604b      	str	r3, [r1, #4]
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f104 060b 	add.w	r6, r4, #11
 8006ce2:	f000 f9ed 	bl	80070c0 <__malloc_unlock>
 8006ce6:	f026 0607 	bic.w	r6, r6, #7
 8006cea:	1d23      	adds	r3, r4, #4
 8006cec:	1af2      	subs	r2, r6, r3
 8006cee:	d0b6      	beq.n	8006c5e <_malloc_r+0x22>
 8006cf0:	1b9b      	subs	r3, r3, r6
 8006cf2:	50a3      	str	r3, [r4, r2]
 8006cf4:	e7b3      	b.n	8006c5e <_malloc_r+0x22>
 8006cf6:	6862      	ldr	r2, [r4, #4]
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	bf0c      	ite	eq
 8006cfc:	6032      	streq	r2, [r6, #0]
 8006cfe:	605a      	strne	r2, [r3, #4]
 8006d00:	e7ec      	b.n	8006cdc <_malloc_r+0xa0>
 8006d02:	4623      	mov	r3, r4
 8006d04:	6864      	ldr	r4, [r4, #4]
 8006d06:	e7b2      	b.n	8006c6e <_malloc_r+0x32>
 8006d08:	4634      	mov	r4, r6
 8006d0a:	6876      	ldr	r6, [r6, #4]
 8006d0c:	e7b9      	b.n	8006c82 <_malloc_r+0x46>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4638      	mov	r0, r7
 8006d14:	f000 f9d4 	bl	80070c0 <__malloc_unlock>
 8006d18:	e7a1      	b.n	8006c5e <_malloc_r+0x22>
 8006d1a:	6025      	str	r5, [r4, #0]
 8006d1c:	e7de      	b.n	8006cdc <_malloc_r+0xa0>
 8006d1e:	bf00      	nop
 8006d20:	200002dc 	.word	0x200002dc

08006d24 <__ssputs_r>:
 8006d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	688e      	ldr	r6, [r1, #8]
 8006d2a:	429e      	cmp	r6, r3
 8006d2c:	4682      	mov	sl, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	4690      	mov	r8, r2
 8006d32:	461f      	mov	r7, r3
 8006d34:	d838      	bhi.n	8006da8 <__ssputs_r+0x84>
 8006d36:	898a      	ldrh	r2, [r1, #12]
 8006d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d3c:	d032      	beq.n	8006da4 <__ssputs_r+0x80>
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	6909      	ldr	r1, [r1, #16]
 8006d42:	eba5 0901 	sub.w	r9, r5, r1
 8006d46:	6965      	ldr	r5, [r4, #20]
 8006d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d50:	3301      	adds	r3, #1
 8006d52:	444b      	add	r3, r9
 8006d54:	106d      	asrs	r5, r5, #1
 8006d56:	429d      	cmp	r5, r3
 8006d58:	bf38      	it	cc
 8006d5a:	461d      	movcc	r5, r3
 8006d5c:	0553      	lsls	r3, r2, #21
 8006d5e:	d531      	bpl.n	8006dc4 <__ssputs_r+0xa0>
 8006d60:	4629      	mov	r1, r5
 8006d62:	f7ff ff6b 	bl	8006c3c <_malloc_r>
 8006d66:	4606      	mov	r6, r0
 8006d68:	b950      	cbnz	r0, 8006d80 <__ssputs_r+0x5c>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	f8ca 3000 	str.w	r3, [sl]
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d80:	6921      	ldr	r1, [r4, #16]
 8006d82:	464a      	mov	r2, r9
 8006d84:	f7ff fb46 	bl	8006414 <memcpy>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	6126      	str	r6, [r4, #16]
 8006d96:	6165      	str	r5, [r4, #20]
 8006d98:	444e      	add	r6, r9
 8006d9a:	eba5 0509 	sub.w	r5, r5, r9
 8006d9e:	6026      	str	r6, [r4, #0]
 8006da0:	60a5      	str	r5, [r4, #8]
 8006da2:	463e      	mov	r6, r7
 8006da4:	42be      	cmp	r6, r7
 8006da6:	d900      	bls.n	8006daa <__ssputs_r+0x86>
 8006da8:	463e      	mov	r6, r7
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	4632      	mov	r2, r6
 8006dae:	4641      	mov	r1, r8
 8006db0:	f000 f966 	bl	8007080 <memmove>
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	1b9b      	subs	r3, r3, r6
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	4433      	add	r3, r6
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7db      	b.n	8006d7c <__ssputs_r+0x58>
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	f000 f981 	bl	80070cc <_realloc_r>
 8006dca:	4606      	mov	r6, r0
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d1e1      	bne.n	8006d94 <__ssputs_r+0x70>
 8006dd0:	6921      	ldr	r1, [r4, #16]
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	f7ff fec6 	bl	8006b64 <_free_r>
 8006dd8:	e7c7      	b.n	8006d6a <__ssputs_r+0x46>
	...

08006ddc <_svfiprintf_r>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	4698      	mov	r8, r3
 8006de2:	898b      	ldrh	r3, [r1, #12]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	b09d      	sub	sp, #116	; 0x74
 8006de8:	4607      	mov	r7, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	4614      	mov	r4, r2
 8006dee:	d50e      	bpl.n	8006e0e <_svfiprintf_r+0x32>
 8006df0:	690b      	ldr	r3, [r1, #16]
 8006df2:	b963      	cbnz	r3, 8006e0e <_svfiprintf_r+0x32>
 8006df4:	2140      	movs	r1, #64	; 0x40
 8006df6:	f7ff ff21 	bl	8006c3c <_malloc_r>
 8006dfa:	6028      	str	r0, [r5, #0]
 8006dfc:	6128      	str	r0, [r5, #16]
 8006dfe:	b920      	cbnz	r0, 8006e0a <_svfiprintf_r+0x2e>
 8006e00:	230c      	movs	r3, #12
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	e0d1      	b.n	8006fae <_svfiprintf_r+0x1d2>
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	616b      	str	r3, [r5, #20]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9309      	str	r3, [sp, #36]	; 0x24
 8006e12:	2320      	movs	r3, #32
 8006e14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1c:	2330      	movs	r3, #48	; 0x30
 8006e1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fc8 <_svfiprintf_r+0x1ec>
 8006e22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e26:	f04f 0901 	mov.w	r9, #1
 8006e2a:	4623      	mov	r3, r4
 8006e2c:	469a      	mov	sl, r3
 8006e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e32:	b10a      	cbz	r2, 8006e38 <_svfiprintf_r+0x5c>
 8006e34:	2a25      	cmp	r2, #37	; 0x25
 8006e36:	d1f9      	bne.n	8006e2c <_svfiprintf_r+0x50>
 8006e38:	ebba 0b04 	subs.w	fp, sl, r4
 8006e3c:	d00b      	beq.n	8006e56 <_svfiprintf_r+0x7a>
 8006e3e:	465b      	mov	r3, fp
 8006e40:	4622      	mov	r2, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ff6d 	bl	8006d24 <__ssputs_r>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f000 80aa 	beq.w	8006fa4 <_svfiprintf_r+0x1c8>
 8006e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e52:	445a      	add	r2, fp
 8006e54:	9209      	str	r2, [sp, #36]	; 0x24
 8006e56:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a2 	beq.w	8006fa4 <_svfiprintf_r+0x1c8>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f04f 32ff 	mov.w	r2, #4294967295
 8006e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e6a:	f10a 0a01 	add.w	sl, sl, #1
 8006e6e:	9304      	str	r3, [sp, #16]
 8006e70:	9307      	str	r3, [sp, #28]
 8006e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e76:	931a      	str	r3, [sp, #104]	; 0x68
 8006e78:	4654      	mov	r4, sl
 8006e7a:	2205      	movs	r2, #5
 8006e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e80:	4851      	ldr	r0, [pc, #324]	; (8006fc8 <_svfiprintf_r+0x1ec>)
 8006e82:	f7f9 f9b5 	bl	80001f0 <memchr>
 8006e86:	9a04      	ldr	r2, [sp, #16]
 8006e88:	b9d8      	cbnz	r0, 8006ec2 <_svfiprintf_r+0xe6>
 8006e8a:	06d0      	lsls	r0, r2, #27
 8006e8c:	bf44      	itt	mi
 8006e8e:	2320      	movmi	r3, #32
 8006e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e94:	0711      	lsls	r1, r2, #28
 8006e96:	bf44      	itt	mi
 8006e98:	232b      	movmi	r3, #43	; 0x2b
 8006e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea4:	d015      	beq.n	8006ed2 <_svfiprintf_r+0xf6>
 8006ea6:	9a07      	ldr	r2, [sp, #28]
 8006ea8:	4654      	mov	r4, sl
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f04f 0c0a 	mov.w	ip, #10
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eb6:	3b30      	subs	r3, #48	; 0x30
 8006eb8:	2b09      	cmp	r3, #9
 8006eba:	d94e      	bls.n	8006f5a <_svfiprintf_r+0x17e>
 8006ebc:	b1b0      	cbz	r0, 8006eec <_svfiprintf_r+0x110>
 8006ebe:	9207      	str	r2, [sp, #28]
 8006ec0:	e014      	b.n	8006eec <_svfiprintf_r+0x110>
 8006ec2:	eba0 0308 	sub.w	r3, r0, r8
 8006ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	46a2      	mov	sl, r4
 8006ed0:	e7d2      	b.n	8006e78 <_svfiprintf_r+0x9c>
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	9103      	str	r1, [sp, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfbb      	ittet	lt
 8006ede:	425b      	neglt	r3, r3
 8006ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ee4:	9307      	strge	r3, [sp, #28]
 8006ee6:	9307      	strlt	r3, [sp, #28]
 8006ee8:	bfb8      	it	lt
 8006eea:	9204      	strlt	r2, [sp, #16]
 8006eec:	7823      	ldrb	r3, [r4, #0]
 8006eee:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef0:	d10c      	bne.n	8006f0c <_svfiprintf_r+0x130>
 8006ef2:	7863      	ldrb	r3, [r4, #1]
 8006ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef6:	d135      	bne.n	8006f64 <_svfiprintf_r+0x188>
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	9203      	str	r2, [sp, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bfb8      	it	lt
 8006f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f08:	3402      	adds	r4, #2
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fd8 <_svfiprintf_r+0x1fc>
 8006f10:	7821      	ldrb	r1, [r4, #0]
 8006f12:	2203      	movs	r2, #3
 8006f14:	4650      	mov	r0, sl
 8006f16:	f7f9 f96b 	bl	80001f0 <memchr>
 8006f1a:	b140      	cbz	r0, 8006f2e <_svfiprintf_r+0x152>
 8006f1c:	2340      	movs	r3, #64	; 0x40
 8006f1e:	eba0 000a 	sub.w	r0, r0, sl
 8006f22:	fa03 f000 	lsl.w	r0, r3, r0
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	4303      	orrs	r3, r0
 8006f2a:	3401      	adds	r4, #1
 8006f2c:	9304      	str	r3, [sp, #16]
 8006f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f32:	4826      	ldr	r0, [pc, #152]	; (8006fcc <_svfiprintf_r+0x1f0>)
 8006f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f38:	2206      	movs	r2, #6
 8006f3a:	f7f9 f959 	bl	80001f0 <memchr>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d038      	beq.n	8006fb4 <_svfiprintf_r+0x1d8>
 8006f42:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <_svfiprintf_r+0x1f4>)
 8006f44:	bb1b      	cbnz	r3, 8006f8e <_svfiprintf_r+0x1b2>
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	3307      	adds	r3, #7
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	3308      	adds	r3, #8
 8006f50:	9303      	str	r3, [sp, #12]
 8006f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f54:	4433      	add	r3, r6
 8006f56:	9309      	str	r3, [sp, #36]	; 0x24
 8006f58:	e767      	b.n	8006e2a <_svfiprintf_r+0x4e>
 8006f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f5e:	460c      	mov	r4, r1
 8006f60:	2001      	movs	r0, #1
 8006f62:	e7a5      	b.n	8006eb0 <_svfiprintf_r+0xd4>
 8006f64:	2300      	movs	r3, #0
 8006f66:	3401      	adds	r4, #1
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 0c0a 	mov.w	ip, #10
 8006f70:	4620      	mov	r0, r4
 8006f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f76:	3a30      	subs	r2, #48	; 0x30
 8006f78:	2a09      	cmp	r2, #9
 8006f7a:	d903      	bls.n	8006f84 <_svfiprintf_r+0x1a8>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0c5      	beq.n	8006f0c <_svfiprintf_r+0x130>
 8006f80:	9105      	str	r1, [sp, #20]
 8006f82:	e7c3      	b.n	8006f0c <_svfiprintf_r+0x130>
 8006f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f88:	4604      	mov	r4, r0
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e7f0      	b.n	8006f70 <_svfiprintf_r+0x194>
 8006f8e:	ab03      	add	r3, sp, #12
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	462a      	mov	r2, r5
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <_svfiprintf_r+0x1f8>)
 8006f96:	a904      	add	r1, sp, #16
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7fd ffc9 	bl	8004f30 <_printf_float>
 8006f9e:	1c42      	adds	r2, r0, #1
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	d1d6      	bne.n	8006f52 <_svfiprintf_r+0x176>
 8006fa4:	89ab      	ldrh	r3, [r5, #12]
 8006fa6:	065b      	lsls	r3, r3, #25
 8006fa8:	f53f af2c 	bmi.w	8006e04 <_svfiprintf_r+0x28>
 8006fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fae:	b01d      	add	sp, #116	; 0x74
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	ab03      	add	r3, sp, #12
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	462a      	mov	r2, r5
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <_svfiprintf_r+0x1f8>)
 8006fbc:	a904      	add	r1, sp, #16
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7fe fa5a 	bl	8005478 <_printf_i>
 8006fc4:	e7eb      	b.n	8006f9e <_svfiprintf_r+0x1c2>
 8006fc6:	bf00      	nop
 8006fc8:	08007e44 	.word	0x08007e44
 8006fcc:	08007e4e 	.word	0x08007e4e
 8006fd0:	08004f31 	.word	0x08004f31
 8006fd4:	08006d25 	.word	0x08006d25
 8006fd8:	08007e4a 	.word	0x08007e4a

08006fdc <_sbrk_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_sbrk_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa f9a4 	bl	8001334 <_sbrk>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_sbrk_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_sbrk_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	200002e4 	.word	0x200002e4

08006ffc <__assert_func>:
 8006ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ffe:	4614      	mov	r4, r2
 8007000:	461a      	mov	r2, r3
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <__assert_func+0x2c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4605      	mov	r5, r0
 8007008:	68d8      	ldr	r0, [r3, #12]
 800700a:	b14c      	cbz	r4, 8007020 <__assert_func+0x24>
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <__assert_func+0x30>)
 800700e:	9100      	str	r1, [sp, #0]
 8007010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <__assert_func+0x34>)
 8007016:	462b      	mov	r3, r5
 8007018:	f000 f80e 	bl	8007038 <fiprintf>
 800701c:	f000 faac 	bl	8007578 <abort>
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <__assert_func+0x38>)
 8007022:	461c      	mov	r4, r3
 8007024:	e7f3      	b.n	800700e <__assert_func+0x12>
 8007026:	bf00      	nop
 8007028:	2000000c 	.word	0x2000000c
 800702c:	08007e55 	.word	0x08007e55
 8007030:	08007e62 	.word	0x08007e62
 8007034:	08007e90 	.word	0x08007e90

08007038 <fiprintf>:
 8007038:	b40e      	push	{r1, r2, r3}
 800703a:	b503      	push	{r0, r1, lr}
 800703c:	4601      	mov	r1, r0
 800703e:	ab03      	add	r3, sp, #12
 8007040:	4805      	ldr	r0, [pc, #20]	; (8007058 <fiprintf+0x20>)
 8007042:	f853 2b04 	ldr.w	r2, [r3], #4
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	f000 f897 	bl	800717c <_vfiprintf_r>
 800704e:	b002      	add	sp, #8
 8007050:	f85d eb04 	ldr.w	lr, [sp], #4
 8007054:	b003      	add	sp, #12
 8007056:	4770      	bx	lr
 8007058:	2000000c 	.word	0x2000000c

0800705c <__ascii_mbtowc>:
 800705c:	b082      	sub	sp, #8
 800705e:	b901      	cbnz	r1, 8007062 <__ascii_mbtowc+0x6>
 8007060:	a901      	add	r1, sp, #4
 8007062:	b142      	cbz	r2, 8007076 <__ascii_mbtowc+0x1a>
 8007064:	b14b      	cbz	r3, 800707a <__ascii_mbtowc+0x1e>
 8007066:	7813      	ldrb	r3, [r2, #0]
 8007068:	600b      	str	r3, [r1, #0]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	1e10      	subs	r0, r2, #0
 800706e:	bf18      	it	ne
 8007070:	2001      	movne	r0, #1
 8007072:	b002      	add	sp, #8
 8007074:	4770      	bx	lr
 8007076:	4610      	mov	r0, r2
 8007078:	e7fb      	b.n	8007072 <__ascii_mbtowc+0x16>
 800707a:	f06f 0001 	mvn.w	r0, #1
 800707e:	e7f8      	b.n	8007072 <__ascii_mbtowc+0x16>

08007080 <memmove>:
 8007080:	4288      	cmp	r0, r1
 8007082:	b510      	push	{r4, lr}
 8007084:	eb01 0402 	add.w	r4, r1, r2
 8007088:	d902      	bls.n	8007090 <memmove+0x10>
 800708a:	4284      	cmp	r4, r0
 800708c:	4623      	mov	r3, r4
 800708e:	d807      	bhi.n	80070a0 <memmove+0x20>
 8007090:	1e43      	subs	r3, r0, #1
 8007092:	42a1      	cmp	r1, r4
 8007094:	d008      	beq.n	80070a8 <memmove+0x28>
 8007096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800709e:	e7f8      	b.n	8007092 <memmove+0x12>
 80070a0:	4402      	add	r2, r0
 80070a2:	4601      	mov	r1, r0
 80070a4:	428a      	cmp	r2, r1
 80070a6:	d100      	bne.n	80070aa <memmove+0x2a>
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b2:	e7f7      	b.n	80070a4 <memmove+0x24>

080070b4 <__malloc_lock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_lock+0x8>)
 80070b6:	f000 bc1f 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80070ba:	bf00      	nop
 80070bc:	200002e8 	.word	0x200002e8

080070c0 <__malloc_unlock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_unlock+0x8>)
 80070c2:	f000 bc1a 	b.w	80078fa <__retarget_lock_release_recursive>
 80070c6:	bf00      	nop
 80070c8:	200002e8 	.word	0x200002e8

080070cc <_realloc_r>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4680      	mov	r8, r0
 80070d2:	4614      	mov	r4, r2
 80070d4:	460e      	mov	r6, r1
 80070d6:	b921      	cbnz	r1, 80070e2 <_realloc_r+0x16>
 80070d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	4611      	mov	r1, r2
 80070de:	f7ff bdad 	b.w	8006c3c <_malloc_r>
 80070e2:	b92a      	cbnz	r2, 80070f0 <_realloc_r+0x24>
 80070e4:	f7ff fd3e 	bl	8006b64 <_free_r>
 80070e8:	4625      	mov	r5, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f0:	f000 fc6a 	bl	80079c8 <_malloc_usable_size_r>
 80070f4:	4284      	cmp	r4, r0
 80070f6:	4607      	mov	r7, r0
 80070f8:	d802      	bhi.n	8007100 <_realloc_r+0x34>
 80070fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070fe:	d812      	bhi.n	8007126 <_realloc_r+0x5a>
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff fd9a 	bl	8006c3c <_malloc_r>
 8007108:	4605      	mov	r5, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d0ed      	beq.n	80070ea <_realloc_r+0x1e>
 800710e:	42bc      	cmp	r4, r7
 8007110:	4622      	mov	r2, r4
 8007112:	4631      	mov	r1, r6
 8007114:	bf28      	it	cs
 8007116:	463a      	movcs	r2, r7
 8007118:	f7ff f97c 	bl	8006414 <memcpy>
 800711c:	4631      	mov	r1, r6
 800711e:	4640      	mov	r0, r8
 8007120:	f7ff fd20 	bl	8006b64 <_free_r>
 8007124:	e7e1      	b.n	80070ea <_realloc_r+0x1e>
 8007126:	4635      	mov	r5, r6
 8007128:	e7df      	b.n	80070ea <_realloc_r+0x1e>

0800712a <__sfputc_r>:
 800712a:	6893      	ldr	r3, [r2, #8]
 800712c:	3b01      	subs	r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	b410      	push	{r4}
 8007132:	6093      	str	r3, [r2, #8]
 8007134:	da08      	bge.n	8007148 <__sfputc_r+0x1e>
 8007136:	6994      	ldr	r4, [r2, #24]
 8007138:	42a3      	cmp	r3, r4
 800713a:	db01      	blt.n	8007140 <__sfputc_r+0x16>
 800713c:	290a      	cmp	r1, #10
 800713e:	d103      	bne.n	8007148 <__sfputc_r+0x1e>
 8007140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007144:	f000 b94a 	b.w	80073dc <__swbuf_r>
 8007148:	6813      	ldr	r3, [r2, #0]
 800714a:	1c58      	adds	r0, r3, #1
 800714c:	6010      	str	r0, [r2, #0]
 800714e:	7019      	strb	r1, [r3, #0]
 8007150:	4608      	mov	r0, r1
 8007152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007156:	4770      	bx	lr

08007158 <__sfputs_r>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	4614      	mov	r4, r2
 8007160:	18d5      	adds	r5, r2, r3
 8007162:	42ac      	cmp	r4, r5
 8007164:	d101      	bne.n	800716a <__sfputs_r+0x12>
 8007166:	2000      	movs	r0, #0
 8007168:	e007      	b.n	800717a <__sfputs_r+0x22>
 800716a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716e:	463a      	mov	r2, r7
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ffda 	bl	800712a <__sfputc_r>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d1f3      	bne.n	8007162 <__sfputs_r+0xa>
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800717c <_vfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	460d      	mov	r5, r1
 8007182:	b09d      	sub	sp, #116	; 0x74
 8007184:	4614      	mov	r4, r2
 8007186:	4698      	mov	r8, r3
 8007188:	4606      	mov	r6, r0
 800718a:	b118      	cbz	r0, 8007194 <_vfiprintf_r+0x18>
 800718c:	6983      	ldr	r3, [r0, #24]
 800718e:	b90b      	cbnz	r3, 8007194 <_vfiprintf_r+0x18>
 8007190:	f000 fb14 	bl	80077bc <__sinit>
 8007194:	4b89      	ldr	r3, [pc, #548]	; (80073bc <_vfiprintf_r+0x240>)
 8007196:	429d      	cmp	r5, r3
 8007198:	d11b      	bne.n	80071d2 <_vfiprintf_r+0x56>
 800719a:	6875      	ldr	r5, [r6, #4]
 800719c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d405      	bmi.n	80071ae <_vfiprintf_r+0x32>
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	059a      	lsls	r2, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_vfiprintf_r+0x32>
 80071a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071aa:	f000 fba5 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	d501      	bpl.n	80071b8 <_vfiprintf_r+0x3c>
 80071b4:	692b      	ldr	r3, [r5, #16]
 80071b6:	b9eb      	cbnz	r3, 80071f4 <_vfiprintf_r+0x78>
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f000 f96e 	bl	800749c <__swsetup_r>
 80071c0:	b1c0      	cbz	r0, 80071f4 <_vfiprintf_r+0x78>
 80071c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c4:	07dc      	lsls	r4, r3, #31
 80071c6:	d50e      	bpl.n	80071e6 <_vfiprintf_r+0x6a>
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	b01d      	add	sp, #116	; 0x74
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	4b7b      	ldr	r3, [pc, #492]	; (80073c0 <_vfiprintf_r+0x244>)
 80071d4:	429d      	cmp	r5, r3
 80071d6:	d101      	bne.n	80071dc <_vfiprintf_r+0x60>
 80071d8:	68b5      	ldr	r5, [r6, #8]
 80071da:	e7df      	b.n	800719c <_vfiprintf_r+0x20>
 80071dc:	4b79      	ldr	r3, [pc, #484]	; (80073c4 <_vfiprintf_r+0x248>)
 80071de:	429d      	cmp	r5, r3
 80071e0:	bf08      	it	eq
 80071e2:	68f5      	ldreq	r5, [r6, #12]
 80071e4:	e7da      	b.n	800719c <_vfiprintf_r+0x20>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	0598      	lsls	r0, r3, #22
 80071ea:	d4ed      	bmi.n	80071c8 <_vfiprintf_r+0x4c>
 80071ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ee:	f000 fb84 	bl	80078fa <__retarget_lock_release_recursive>
 80071f2:	e7e9      	b.n	80071c8 <_vfiprintf_r+0x4c>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9309      	str	r3, [sp, #36]	; 0x24
 80071f8:	2320      	movs	r3, #32
 80071fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007202:	2330      	movs	r3, #48	; 0x30
 8007204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073c8 <_vfiprintf_r+0x24c>
 8007208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800720c:	f04f 0901 	mov.w	r9, #1
 8007210:	4623      	mov	r3, r4
 8007212:	469a      	mov	sl, r3
 8007214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007218:	b10a      	cbz	r2, 800721e <_vfiprintf_r+0xa2>
 800721a:	2a25      	cmp	r2, #37	; 0x25
 800721c:	d1f9      	bne.n	8007212 <_vfiprintf_r+0x96>
 800721e:	ebba 0b04 	subs.w	fp, sl, r4
 8007222:	d00b      	beq.n	800723c <_vfiprintf_r+0xc0>
 8007224:	465b      	mov	r3, fp
 8007226:	4622      	mov	r2, r4
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ff94 	bl	8007158 <__sfputs_r>
 8007230:	3001      	adds	r0, #1
 8007232:	f000 80aa 	beq.w	800738a <_vfiprintf_r+0x20e>
 8007236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007238:	445a      	add	r2, fp
 800723a:	9209      	str	r2, [sp, #36]	; 0x24
 800723c:	f89a 3000 	ldrb.w	r3, [sl]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80a2 	beq.w	800738a <_vfiprintf_r+0x20e>
 8007246:	2300      	movs	r3, #0
 8007248:	f04f 32ff 	mov.w	r2, #4294967295
 800724c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007250:	f10a 0a01 	add.w	sl, sl, #1
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800725c:	931a      	str	r3, [sp, #104]	; 0x68
 800725e:	4654      	mov	r4, sl
 8007260:	2205      	movs	r2, #5
 8007262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007266:	4858      	ldr	r0, [pc, #352]	; (80073c8 <_vfiprintf_r+0x24c>)
 8007268:	f7f8 ffc2 	bl	80001f0 <memchr>
 800726c:	9a04      	ldr	r2, [sp, #16]
 800726e:	b9d8      	cbnz	r0, 80072a8 <_vfiprintf_r+0x12c>
 8007270:	06d1      	lsls	r1, r2, #27
 8007272:	bf44      	itt	mi
 8007274:	2320      	movmi	r3, #32
 8007276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800727a:	0713      	lsls	r3, r2, #28
 800727c:	bf44      	itt	mi
 800727e:	232b      	movmi	r3, #43	; 0x2b
 8007280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b2a      	cmp	r3, #42	; 0x2a
 800728a:	d015      	beq.n	80072b8 <_vfiprintf_r+0x13c>
 800728c:	9a07      	ldr	r2, [sp, #28]
 800728e:	4654      	mov	r4, sl
 8007290:	2000      	movs	r0, #0
 8007292:	f04f 0c0a 	mov.w	ip, #10
 8007296:	4621      	mov	r1, r4
 8007298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800729c:	3b30      	subs	r3, #48	; 0x30
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d94e      	bls.n	8007340 <_vfiprintf_r+0x1c4>
 80072a2:	b1b0      	cbz	r0, 80072d2 <_vfiprintf_r+0x156>
 80072a4:	9207      	str	r2, [sp, #28]
 80072a6:	e014      	b.n	80072d2 <_vfiprintf_r+0x156>
 80072a8:	eba0 0308 	sub.w	r3, r0, r8
 80072ac:	fa09 f303 	lsl.w	r3, r9, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	46a2      	mov	sl, r4
 80072b6:	e7d2      	b.n	800725e <_vfiprintf_r+0xe2>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	1d19      	adds	r1, r3, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	9103      	str	r1, [sp, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bfbb      	ittet	lt
 80072c4:	425b      	neglt	r3, r3
 80072c6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ca:	9307      	strge	r3, [sp, #28]
 80072cc:	9307      	strlt	r3, [sp, #28]
 80072ce:	bfb8      	it	lt
 80072d0:	9204      	strlt	r2, [sp, #16]
 80072d2:	7823      	ldrb	r3, [r4, #0]
 80072d4:	2b2e      	cmp	r3, #46	; 0x2e
 80072d6:	d10c      	bne.n	80072f2 <_vfiprintf_r+0x176>
 80072d8:	7863      	ldrb	r3, [r4, #1]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d135      	bne.n	800734a <_vfiprintf_r+0x1ce>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	9203      	str	r2, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfb8      	it	lt
 80072ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80072ee:	3402      	adds	r4, #2
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073d8 <_vfiprintf_r+0x25c>
 80072f6:	7821      	ldrb	r1, [r4, #0]
 80072f8:	2203      	movs	r2, #3
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7f8 ff78 	bl	80001f0 <memchr>
 8007300:	b140      	cbz	r0, 8007314 <_vfiprintf_r+0x198>
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	eba0 000a 	sub.w	r0, r0, sl
 8007308:	fa03 f000 	lsl.w	r0, r3, r0
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	4303      	orrs	r3, r0
 8007310:	3401      	adds	r4, #1
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007318:	482c      	ldr	r0, [pc, #176]	; (80073cc <_vfiprintf_r+0x250>)
 800731a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800731e:	2206      	movs	r2, #6
 8007320:	f7f8 ff66 	bl	80001f0 <memchr>
 8007324:	2800      	cmp	r0, #0
 8007326:	d03f      	beq.n	80073a8 <_vfiprintf_r+0x22c>
 8007328:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <_vfiprintf_r+0x254>)
 800732a:	bb1b      	cbnz	r3, 8007374 <_vfiprintf_r+0x1f8>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	3307      	adds	r3, #7
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	3308      	adds	r3, #8
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	443b      	add	r3, r7
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	e767      	b.n	8007210 <_vfiprintf_r+0x94>
 8007340:	fb0c 3202 	mla	r2, ip, r2, r3
 8007344:	460c      	mov	r4, r1
 8007346:	2001      	movs	r0, #1
 8007348:	e7a5      	b.n	8007296 <_vfiprintf_r+0x11a>
 800734a:	2300      	movs	r3, #0
 800734c:	3401      	adds	r4, #1
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	4619      	mov	r1, r3
 8007352:	f04f 0c0a 	mov.w	ip, #10
 8007356:	4620      	mov	r0, r4
 8007358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735c:	3a30      	subs	r2, #48	; 0x30
 800735e:	2a09      	cmp	r2, #9
 8007360:	d903      	bls.n	800736a <_vfiprintf_r+0x1ee>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c5      	beq.n	80072f2 <_vfiprintf_r+0x176>
 8007366:	9105      	str	r1, [sp, #20]
 8007368:	e7c3      	b.n	80072f2 <_vfiprintf_r+0x176>
 800736a:	fb0c 2101 	mla	r1, ip, r1, r2
 800736e:	4604      	mov	r4, r0
 8007370:	2301      	movs	r3, #1
 8007372:	e7f0      	b.n	8007356 <_vfiprintf_r+0x1da>
 8007374:	ab03      	add	r3, sp, #12
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	462a      	mov	r2, r5
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <_vfiprintf_r+0x258>)
 800737c:	a904      	add	r1, sp, #16
 800737e:	4630      	mov	r0, r6
 8007380:	f7fd fdd6 	bl	8004f30 <_printf_float>
 8007384:	4607      	mov	r7, r0
 8007386:	1c78      	adds	r0, r7, #1
 8007388:	d1d6      	bne.n	8007338 <_vfiprintf_r+0x1bc>
 800738a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800738c:	07d9      	lsls	r1, r3, #31
 800738e:	d405      	bmi.n	800739c <_vfiprintf_r+0x220>
 8007390:	89ab      	ldrh	r3, [r5, #12]
 8007392:	059a      	lsls	r2, r3, #22
 8007394:	d402      	bmi.n	800739c <_vfiprintf_r+0x220>
 8007396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007398:	f000 faaf 	bl	80078fa <__retarget_lock_release_recursive>
 800739c:	89ab      	ldrh	r3, [r5, #12]
 800739e:	065b      	lsls	r3, r3, #25
 80073a0:	f53f af12 	bmi.w	80071c8 <_vfiprintf_r+0x4c>
 80073a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a6:	e711      	b.n	80071cc <_vfiprintf_r+0x50>
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <_vfiprintf_r+0x258>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7fe f860 	bl	8005478 <_printf_i>
 80073b8:	e7e4      	b.n	8007384 <_vfiprintf_r+0x208>
 80073ba:	bf00      	nop
 80073bc:	08007fbc 	.word	0x08007fbc
 80073c0:	08007fdc 	.word	0x08007fdc
 80073c4:	08007f9c 	.word	0x08007f9c
 80073c8:	08007e44 	.word	0x08007e44
 80073cc:	08007e4e 	.word	0x08007e4e
 80073d0:	08004f31 	.word	0x08004f31
 80073d4:	08007159 	.word	0x08007159
 80073d8:	08007e4a 	.word	0x08007e4a

080073dc <__swbuf_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	460e      	mov	r6, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	4605      	mov	r5, r0
 80073e4:	b118      	cbz	r0, 80073ee <__swbuf_r+0x12>
 80073e6:	6983      	ldr	r3, [r0, #24]
 80073e8:	b90b      	cbnz	r3, 80073ee <__swbuf_r+0x12>
 80073ea:	f000 f9e7 	bl	80077bc <__sinit>
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <__swbuf_r+0x98>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d12b      	bne.n	800744c <__swbuf_r+0x70>
 80073f4:	686c      	ldr	r4, [r5, #4]
 80073f6:	69a3      	ldr	r3, [r4, #24]
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	071a      	lsls	r2, r3, #28
 80073fe:	d52f      	bpl.n	8007460 <__swbuf_r+0x84>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b36b      	cbz	r3, 8007460 <__swbuf_r+0x84>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1ac0      	subs	r0, r0, r3
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	b2f6      	uxtb	r6, r6
 800740e:	4283      	cmp	r3, r0
 8007410:	4637      	mov	r7, r6
 8007412:	dc04      	bgt.n	800741e <__swbuf_r+0x42>
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f000 f93c 	bl	8007694 <_fflush_r>
 800741c:	bb30      	cbnz	r0, 800746c <__swbuf_r+0x90>
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	3b01      	subs	r3, #1
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	701e      	strb	r6, [r3, #0]
 800742c:	6963      	ldr	r3, [r4, #20]
 800742e:	3001      	adds	r0, #1
 8007430:	4283      	cmp	r3, r0
 8007432:	d004      	beq.n	800743e <__swbuf_r+0x62>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d506      	bpl.n	8007448 <__swbuf_r+0x6c>
 800743a:	2e0a      	cmp	r6, #10
 800743c:	d104      	bne.n	8007448 <__swbuf_r+0x6c>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 f927 	bl	8007694 <_fflush_r>
 8007446:	b988      	cbnz	r0, 800746c <__swbuf_r+0x90>
 8007448:	4638      	mov	r0, r7
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <__swbuf_r+0x9c>)
 800744e:	429c      	cmp	r4, r3
 8007450:	d101      	bne.n	8007456 <__swbuf_r+0x7a>
 8007452:	68ac      	ldr	r4, [r5, #8]
 8007454:	e7cf      	b.n	80073f6 <__swbuf_r+0x1a>
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <__swbuf_r+0xa0>)
 8007458:	429c      	cmp	r4, r3
 800745a:	bf08      	it	eq
 800745c:	68ec      	ldreq	r4, [r5, #12]
 800745e:	e7ca      	b.n	80073f6 <__swbuf_r+0x1a>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f81a 	bl	800749c <__swsetup_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	d0cb      	beq.n	8007404 <__swbuf_r+0x28>
 800746c:	f04f 37ff 	mov.w	r7, #4294967295
 8007470:	e7ea      	b.n	8007448 <__swbuf_r+0x6c>
 8007472:	bf00      	nop
 8007474:	08007fbc 	.word	0x08007fbc
 8007478:	08007fdc 	.word	0x08007fdc
 800747c:	08007f9c 	.word	0x08007f9c

08007480 <__ascii_wctomb>:
 8007480:	b149      	cbz	r1, 8007496 <__ascii_wctomb+0x16>
 8007482:	2aff      	cmp	r2, #255	; 0xff
 8007484:	bf85      	ittet	hi
 8007486:	238a      	movhi	r3, #138	; 0x8a
 8007488:	6003      	strhi	r3, [r0, #0]
 800748a:	700a      	strbls	r2, [r1, #0]
 800748c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007490:	bf98      	it	ls
 8007492:	2001      	movls	r0, #1
 8007494:	4770      	bx	lr
 8007496:	4608      	mov	r0, r1
 8007498:	4770      	bx	lr
	...

0800749c <__swsetup_r>:
 800749c:	4b32      	ldr	r3, [pc, #200]	; (8007568 <__swsetup_r+0xcc>)
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	681d      	ldr	r5, [r3, #0]
 80074a2:	4606      	mov	r6, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	b125      	cbz	r5, 80074b2 <__swsetup_r+0x16>
 80074a8:	69ab      	ldr	r3, [r5, #24]
 80074aa:	b913      	cbnz	r3, 80074b2 <__swsetup_r+0x16>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f985 	bl	80077bc <__sinit>
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <__swsetup_r+0xd0>)
 80074b4:	429c      	cmp	r4, r3
 80074b6:	d10f      	bne.n	80074d8 <__swsetup_r+0x3c>
 80074b8:	686c      	ldr	r4, [r5, #4]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c0:	0719      	lsls	r1, r3, #28
 80074c2:	d42c      	bmi.n	800751e <__swsetup_r+0x82>
 80074c4:	06dd      	lsls	r5, r3, #27
 80074c6:	d411      	bmi.n	80074ec <__swsetup_r+0x50>
 80074c8:	2309      	movs	r3, #9
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	e03e      	b.n	8007556 <__swsetup_r+0xba>
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <__swsetup_r+0xd4>)
 80074da:	429c      	cmp	r4, r3
 80074dc:	d101      	bne.n	80074e2 <__swsetup_r+0x46>
 80074de:	68ac      	ldr	r4, [r5, #8]
 80074e0:	e7eb      	b.n	80074ba <__swsetup_r+0x1e>
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <__swsetup_r+0xd8>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	bf08      	it	eq
 80074e8:	68ec      	ldreq	r4, [r5, #12]
 80074ea:	e7e6      	b.n	80074ba <__swsetup_r+0x1e>
 80074ec:	0758      	lsls	r0, r3, #29
 80074ee:	d512      	bpl.n	8007516 <__swsetup_r+0x7a>
 80074f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f2:	b141      	cbz	r1, 8007506 <__swsetup_r+0x6a>
 80074f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d002      	beq.n	8007502 <__swsetup_r+0x66>
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff fb31 	bl	8006b64 <_free_r>
 8007502:	2300      	movs	r3, #0
 8007504:	6363      	str	r3, [r4, #52]	; 0x34
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	2300      	movs	r3, #0
 8007510:	6063      	str	r3, [r4, #4]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	b94b      	cbnz	r3, 8007536 <__swsetup_r+0x9a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752c:	d003      	beq.n	8007536 <__swsetup_r+0x9a>
 800752e:	4621      	mov	r1, r4
 8007530:	4630      	mov	r0, r6
 8007532:	f000 fa09 	bl	8007948 <__smakebuf_r>
 8007536:	89a0      	ldrh	r0, [r4, #12]
 8007538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800753c:	f010 0301 	ands.w	r3, r0, #1
 8007540:	d00a      	beq.n	8007558 <__swsetup_r+0xbc>
 8007542:	2300      	movs	r3, #0
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	6963      	ldr	r3, [r4, #20]
 8007548:	425b      	negs	r3, r3
 800754a:	61a3      	str	r3, [r4, #24]
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b943      	cbnz	r3, 8007562 <__swsetup_r+0xc6>
 8007550:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007554:	d1ba      	bne.n	80074cc <__swsetup_r+0x30>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	0781      	lsls	r1, r0, #30
 800755a:	bf58      	it	pl
 800755c:	6963      	ldrpl	r3, [r4, #20]
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	e7f4      	b.n	800754c <__swsetup_r+0xb0>
 8007562:	2000      	movs	r0, #0
 8007564:	e7f7      	b.n	8007556 <__swsetup_r+0xba>
 8007566:	bf00      	nop
 8007568:	2000000c 	.word	0x2000000c
 800756c:	08007fbc 	.word	0x08007fbc
 8007570:	08007fdc 	.word	0x08007fdc
 8007574:	08007f9c 	.word	0x08007f9c

08007578 <abort>:
 8007578:	b508      	push	{r3, lr}
 800757a:	2006      	movs	r0, #6
 800757c:	f000 fa54 	bl	8007a28 <raise>
 8007580:	2001      	movs	r0, #1
 8007582:	f7f9 fe5f 	bl	8001244 <_exit>
	...

08007588 <__sflush_r>:
 8007588:	898a      	ldrh	r2, [r1, #12]
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	4605      	mov	r5, r0
 8007590:	0710      	lsls	r0, r2, #28
 8007592:	460c      	mov	r4, r1
 8007594:	d458      	bmi.n	8007648 <__sflush_r+0xc0>
 8007596:	684b      	ldr	r3, [r1, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc05      	bgt.n	80075a8 <__sflush_r+0x20>
 800759c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dc02      	bgt.n	80075a8 <__sflush_r+0x20>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d0f9      	beq.n	80075a2 <__sflush_r+0x1a>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b4:	682f      	ldr	r7, [r5, #0]
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	d032      	beq.n	8007620 <__sflush_r+0x98>
 80075ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	075a      	lsls	r2, r3, #29
 80075c0:	d505      	bpl.n	80075ce <__sflush_r+0x46>
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	1ac0      	subs	r0, r0, r3
 80075c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c8:	b10b      	cbz	r3, 80075ce <__sflush_r+0x46>
 80075ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	4602      	mov	r2, r0
 80075d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b0      	blx	r6
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	d106      	bne.n	80075ee <__sflush_r+0x66>
 80075e0:	6829      	ldr	r1, [r5, #0]
 80075e2:	291d      	cmp	r1, #29
 80075e4:	d82c      	bhi.n	8007640 <__sflush_r+0xb8>
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <__sflush_r+0x108>)
 80075e8:	40ca      	lsrs	r2, r1
 80075ea:	07d6      	lsls	r6, r2, #31
 80075ec:	d528      	bpl.n	8007640 <__sflush_r+0xb8>
 80075ee:	2200      	movs	r2, #0
 80075f0:	6062      	str	r2, [r4, #4]
 80075f2:	04d9      	lsls	r1, r3, #19
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	d504      	bpl.n	8007604 <__sflush_r+0x7c>
 80075fa:	1c42      	adds	r2, r0, #1
 80075fc:	d101      	bne.n	8007602 <__sflush_r+0x7a>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b903      	cbnz	r3, 8007604 <__sflush_r+0x7c>
 8007602:	6560      	str	r0, [r4, #84]	; 0x54
 8007604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007606:	602f      	str	r7, [r5, #0]
 8007608:	2900      	cmp	r1, #0
 800760a:	d0ca      	beq.n	80075a2 <__sflush_r+0x1a>
 800760c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007610:	4299      	cmp	r1, r3
 8007612:	d002      	beq.n	800761a <__sflush_r+0x92>
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff faa5 	bl	8006b64 <_free_r>
 800761a:	2000      	movs	r0, #0
 800761c:	6360      	str	r0, [r4, #52]	; 0x34
 800761e:	e7c1      	b.n	80075a4 <__sflush_r+0x1c>
 8007620:	6a21      	ldr	r1, [r4, #32]
 8007622:	2301      	movs	r3, #1
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	1c41      	adds	r1, r0, #1
 800762a:	d1c7      	bne.n	80075bc <__sflush_r+0x34>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c4      	beq.n	80075bc <__sflush_r+0x34>
 8007632:	2b1d      	cmp	r3, #29
 8007634:	d001      	beq.n	800763a <__sflush_r+0xb2>
 8007636:	2b16      	cmp	r3, #22
 8007638:	d101      	bne.n	800763e <__sflush_r+0xb6>
 800763a:	602f      	str	r7, [r5, #0]
 800763c:	e7b1      	b.n	80075a2 <__sflush_r+0x1a>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7ad      	b.n	80075a4 <__sflush_r+0x1c>
 8007648:	690f      	ldr	r7, [r1, #16]
 800764a:	2f00      	cmp	r7, #0
 800764c:	d0a9      	beq.n	80075a2 <__sflush_r+0x1a>
 800764e:	0793      	lsls	r3, r2, #30
 8007650:	680e      	ldr	r6, [r1, #0]
 8007652:	bf08      	it	eq
 8007654:	694b      	ldreq	r3, [r1, #20]
 8007656:	600f      	str	r7, [r1, #0]
 8007658:	bf18      	it	ne
 800765a:	2300      	movne	r3, #0
 800765c:	eba6 0807 	sub.w	r8, r6, r7
 8007660:	608b      	str	r3, [r1, #8]
 8007662:	f1b8 0f00 	cmp.w	r8, #0
 8007666:	dd9c      	ble.n	80075a2 <__sflush_r+0x1a>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800766c:	4643      	mov	r3, r8
 800766e:	463a      	mov	r2, r7
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	2800      	cmp	r0, #0
 8007676:	dc06      	bgt.n	8007686 <__sflush_r+0xfe>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e78e      	b.n	80075a4 <__sflush_r+0x1c>
 8007686:	4407      	add	r7, r0
 8007688:	eba8 0800 	sub.w	r8, r8, r0
 800768c:	e7e9      	b.n	8007662 <__sflush_r+0xda>
 800768e:	bf00      	nop
 8007690:	20400001 	.word	0x20400001

08007694 <_fflush_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	690b      	ldr	r3, [r1, #16]
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b913      	cbnz	r3, 80076a4 <_fflush_r+0x10>
 800769e:	2500      	movs	r5, #0
 80076a0:	4628      	mov	r0, r5
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	b118      	cbz	r0, 80076ae <_fflush_r+0x1a>
 80076a6:	6983      	ldr	r3, [r0, #24]
 80076a8:	b90b      	cbnz	r3, 80076ae <_fflush_r+0x1a>
 80076aa:	f000 f887 	bl	80077bc <__sinit>
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <_fflush_r+0x6c>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d11b      	bne.n	80076ec <_fflush_r+0x58>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ef      	beq.n	800769e <_fflush_r+0xa>
 80076be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c0:	07d0      	lsls	r0, r2, #31
 80076c2:	d404      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c4:	0599      	lsls	r1, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f000 f915 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7ff ff59 	bl	8007588 <__sflush_r>
 80076d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d8:	07da      	lsls	r2, r3, #31
 80076da:	4605      	mov	r5, r0
 80076dc:	d4e0      	bmi.n	80076a0 <_fflush_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d4dd      	bmi.n	80076a0 <_fflush_r+0xc>
 80076e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e6:	f000 f908 	bl	80078fa <__retarget_lock_release_recursive>
 80076ea:	e7d9      	b.n	80076a0 <_fflush_r+0xc>
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_fflush_r+0x70>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d101      	bne.n	80076f6 <_fflush_r+0x62>
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	e7df      	b.n	80076b6 <_fflush_r+0x22>
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <_fflush_r+0x74>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	bf08      	it	eq
 80076fc:	68ec      	ldreq	r4, [r5, #12]
 80076fe:	e7da      	b.n	80076b6 <_fflush_r+0x22>
 8007700:	08007fbc 	.word	0x08007fbc
 8007704:	08007fdc 	.word	0x08007fdc
 8007708:	08007f9c 	.word	0x08007f9c

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	; 0x5c
 800772a:	f7fd fb59 	bl	8004de0 <memset>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x38>)
 8007730:	6263      	str	r3, [r4, #36]	; 0x24
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x3c>)
 8007734:	62a3      	str	r3, [r4, #40]	; 0x28
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x40>)
 8007738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x44>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	08007a61 	.word	0x08007a61
 8007748:	08007a83 	.word	0x08007a83
 800774c:	08007abb 	.word	0x08007abb
 8007750:	08007adf 	.word	0x08007adf

08007754 <_cleanup_r>:
 8007754:	4901      	ldr	r1, [pc, #4]	; (800775c <_cleanup_r+0x8>)
 8007756:	f000 b8af 	b.w	80078b8 <_fwalk_reent>
 800775a:	bf00      	nop
 800775c:	08007695 	.word	0x08007695

08007760 <__sfmoreglue>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	2268      	movs	r2, #104	; 0x68
 8007764:	1e4d      	subs	r5, r1, #1
 8007766:	4355      	muls	r5, r2
 8007768:	460e      	mov	r6, r1
 800776a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776e:	f7ff fa65 	bl	8006c3c <_malloc_r>
 8007772:	4604      	mov	r4, r0
 8007774:	b140      	cbz	r0, 8007788 <__sfmoreglue+0x28>
 8007776:	2100      	movs	r1, #0
 8007778:	e9c0 1600 	strd	r1, r6, [r0]
 800777c:	300c      	adds	r0, #12
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007784:	f7fd fb2c 	bl	8004de0 <memset>
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b8b3 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	200002e9 	.word	0x200002e9

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8ae 	b.w	80078fa <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	200002e9 	.word	0x200002e9

080077a4 <__sinit_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sinit_lock_acquire+0x8>)
 80077a6:	f000 b8a7 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	200002ea 	.word	0x200002ea

080077b0 <__sinit_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_release+0x8>)
 80077b2:	f000 b8a2 	b.w	80078fa <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	200002ea 	.word	0x200002ea

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sinit_lock_acquire>
 80077c4:	69a3      	ldr	r3, [r4, #24]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sinit_lock_release>
 80077d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077d4:	6523      	str	r3, [r4, #80]	; 0x50
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <__sinit+0x68>)
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <__sinit+0x6c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077de:	42a3      	cmp	r3, r4
 80077e0:	bf04      	itt	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	61a3      	streq	r3, [r4, #24]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f820 	bl	800782c <__sfp>
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f81c 	bl	800782c <__sfp>
 80077f4:	60a0      	str	r0, [r4, #8]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f818 	bl	800782c <__sfp>
 80077fc:	2200      	movs	r2, #0
 80077fe:	60e0      	str	r0, [r4, #12]
 8007800:	2104      	movs	r1, #4
 8007802:	6860      	ldr	r0, [r4, #4]
 8007804:	f7ff ff82 	bl	800770c <std>
 8007808:	68a0      	ldr	r0, [r4, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	2109      	movs	r1, #9
 800780e:	f7ff ff7d 	bl	800770c <std>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff ff78 	bl	800770c <std>
 800781c:	2301      	movs	r3, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	e7d2      	b.n	80077c8 <__sinit+0xc>
 8007822:	bf00      	nop
 8007824:	08007c20 	.word	0x08007c20
 8007828:	08007755 	.word	0x08007755

0800782c <__sfp>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	4607      	mov	r7, r0
 8007830:	f7ff ffac 	bl	800778c <__sfp_lock_acquire>
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <__sfp+0x84>)
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	69b3      	ldr	r3, [r6, #24]
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x16>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffbd 	bl	80077bc <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d503      	bpl.n	8007854 <__sfp+0x28>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	b30b      	cbz	r3, 8007894 <__sfp+0x68>
 8007850:	6836      	ldr	r6, [r6, #0]
 8007852:	e7f7      	b.n	8007844 <__sfp+0x18>
 8007854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007858:	b9d5      	cbnz	r5, 8007890 <__sfp+0x64>
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <__sfp+0x88>)
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007862:	6665      	str	r5, [r4, #100]	; 0x64
 8007864:	f000 f847 	bl	80078f6 <__retarget_lock_init_recursive>
 8007868:	f7ff ff96 	bl	8007798 <__sfp_lock_release>
 800786c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	61a5      	str	r5, [r4, #24]
 8007878:	2208      	movs	r2, #8
 800787a:	4629      	mov	r1, r5
 800787c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007880:	f7fd faae 	bl	8004de0 <memset>
 8007884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800788c:	4620      	mov	r0, r4
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	3468      	adds	r4, #104	; 0x68
 8007892:	e7d9      	b.n	8007848 <__sfp+0x1c>
 8007894:	2104      	movs	r1, #4
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ff62 	bl	8007760 <__sfmoreglue>
 800789c:	4604      	mov	r4, r0
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1d5      	bne.n	8007850 <__sfp+0x24>
 80078a4:	f7ff ff78 	bl	8007798 <__sfp_lock_release>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	e7ee      	b.n	800788c <__sfp+0x60>
 80078ae:	bf00      	nop
 80078b0:	08007c20 	.word	0x08007c20
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	4688      	mov	r8, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2700      	movs	r7, #0
 80078c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ca:	f1b9 0901 	subs.w	r9, r9, #1
 80078ce:	d505      	bpl.n	80078dc <_fwalk_reent+0x24>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	d1f7      	bne.n	80078c6 <_fwalk_reent+0xe>
 80078d6:	4638      	mov	r0, r7
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d907      	bls.n	80078f2 <_fwalk_reent+0x3a>
 80078e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	d003      	beq.n	80078f2 <_fwalk_reent+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	47c0      	blx	r8
 80078f0:	4307      	orrs	r7, r0
 80078f2:	3568      	adds	r5, #104	; 0x68
 80078f4:	e7e9      	b.n	80078ca <_fwalk_reent+0x12>

080078f6 <__retarget_lock_init_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <__retarget_lock_acquire_recursive>:
 80078f8:	4770      	bx	lr

080078fa <__retarget_lock_release_recursive>:
 80078fa:	4770      	bx	lr

080078fc <__swhatbuf_r>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2900      	cmp	r1, #0
 8007906:	b096      	sub	sp, #88	; 0x58
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	da08      	bge.n	8007920 <__swhatbuf_r+0x24>
 800790e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	061a      	lsls	r2, r3, #24
 8007918:	d410      	bmi.n	800793c <__swhatbuf_r+0x40>
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	e00e      	b.n	800793e <__swhatbuf_r+0x42>
 8007920:	466a      	mov	r2, sp
 8007922:	f000 f903 	bl	8007b2c <_fstat_r>
 8007926:	2800      	cmp	r0, #0
 8007928:	dbf1      	blt.n	800790e <__swhatbuf_r+0x12>
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007934:	425a      	negs	r2, r3
 8007936:	415a      	adcs	r2, r3
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	e7ee      	b.n	800791a <__swhatbuf_r+0x1e>
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2000      	movs	r0, #0
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	b016      	add	sp, #88	; 0x58
 8007944:	bd70      	pop	{r4, r5, r6, pc}
	...

08007948 <__smakebuf_r>:
 8007948:	898b      	ldrh	r3, [r1, #12]
 800794a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800794c:	079d      	lsls	r5, r3, #30
 800794e:	4606      	mov	r6, r0
 8007950:	460c      	mov	r4, r1
 8007952:	d507      	bpl.n	8007964 <__smakebuf_r+0x1c>
 8007954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	2301      	movs	r3, #1
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	b002      	add	sp, #8
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	ab01      	add	r3, sp, #4
 8007966:	466a      	mov	r2, sp
 8007968:	f7ff ffc8 	bl	80078fc <__swhatbuf_r>
 800796c:	9900      	ldr	r1, [sp, #0]
 800796e:	4605      	mov	r5, r0
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff f963 	bl	8006c3c <_malloc_r>
 8007976:	b948      	cbnz	r0, 800798c <__smakebuf_r+0x44>
 8007978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d4ef      	bmi.n	8007960 <__smakebuf_r+0x18>
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	e7e3      	b.n	8007954 <__smakebuf_r+0xc>
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <__smakebuf_r+0x7c>)
 800798e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	9b00      	ldr	r3, [sp, #0]
 800799c:	6163      	str	r3, [r4, #20]
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	6120      	str	r0, [r4, #16]
 80079a2:	b15b      	cbz	r3, 80079bc <__smakebuf_r+0x74>
 80079a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f8d1 	bl	8007b50 <_isatty_r>
 80079ae:	b128      	cbz	r0, 80079bc <__smakebuf_r+0x74>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	89a0      	ldrh	r0, [r4, #12]
 80079be:	4305      	orrs	r5, r0
 80079c0:	81a5      	strh	r5, [r4, #12]
 80079c2:	e7cd      	b.n	8007960 <__smakebuf_r+0x18>
 80079c4:	08007755 	.word	0x08007755

080079c8 <_malloc_usable_size_r>:
 80079c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079cc:	1f18      	subs	r0, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bfbc      	itt	lt
 80079d2:	580b      	ldrlt	r3, [r1, r0]
 80079d4:	18c0      	addlt	r0, r0, r3
 80079d6:	4770      	bx	lr

080079d8 <_raise_r>:
 80079d8:	291f      	cmp	r1, #31
 80079da:	b538      	push	{r3, r4, r5, lr}
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	d904      	bls.n	80079ec <_raise_r+0x14>
 80079e2:	2316      	movs	r3, #22
 80079e4:	6003      	str	r3, [r0, #0]
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079ee:	b112      	cbz	r2, 80079f6 <_raise_r+0x1e>
 80079f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f4:	b94b      	cbnz	r3, 8007a0a <_raise_r+0x32>
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f830 	bl	8007a5c <_getpid_r>
 80079fc:	462a      	mov	r2, r5
 80079fe:	4601      	mov	r1, r0
 8007a00:	4620      	mov	r0, r4
 8007a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a06:	f000 b817 	b.w	8007a38 <_kill_r>
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d00a      	beq.n	8007a24 <_raise_r+0x4c>
 8007a0e:	1c59      	adds	r1, r3, #1
 8007a10:	d103      	bne.n	8007a1a <_raise_r+0x42>
 8007a12:	2316      	movs	r3, #22
 8007a14:	6003      	str	r3, [r0, #0]
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7e7      	b.n	80079ea <_raise_r+0x12>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a20:	4628      	mov	r0, r5
 8007a22:	4798      	blx	r3
 8007a24:	2000      	movs	r0, #0
 8007a26:	e7e0      	b.n	80079ea <_raise_r+0x12>

08007a28 <raise>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <raise+0xc>)
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	f7ff bfd3 	b.w	80079d8 <_raise_r>
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c

08007a38 <_kill_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	; (8007a58 <_kill_r+0x20>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7f9 fbed 	bl	8001224 <_kill>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d102      	bne.n	8007a54 <_kill_r+0x1c>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b103      	cbz	r3, 8007a54 <_kill_r+0x1c>
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	200002e4 	.word	0x200002e4

08007a5c <_getpid_r>:
 8007a5c:	f7f9 bbda 	b.w	8001214 <_getpid>

08007a60 <__sread>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	460c      	mov	r4, r1
 8007a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a68:	f000 f894 	bl	8007b94 <_read_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	bfab      	itete	ge
 8007a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a72:	89a3      	ldrhlt	r3, [r4, #12]
 8007a74:	181b      	addge	r3, r3, r0
 8007a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a7a:	bfac      	ite	ge
 8007a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a7e:	81a3      	strhlt	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__swrite>:
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	461f      	mov	r7, r3
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4616      	mov	r6, r2
 8007a92:	d505      	bpl.n	8007aa0 <__swrite+0x1e>
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f000 f868 	bl	8007b70 <_lseek_r>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	f000 b817 	b.w	8007ae8 <_write_r>

08007aba <__sseek>:
 8007aba:	b510      	push	{r4, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 f855 	bl	8007b70 <_lseek_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	bf15      	itete	ne
 8007acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ad6:	81a3      	strheq	r3, [r4, #12]
 8007ad8:	bf18      	it	ne
 8007ada:	81a3      	strhne	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__sclose>:
 8007ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae2:	f000 b813 	b.w	8007b0c <_close_r>
	...

08007ae8 <_write_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	; (8007b08 <_write_r+0x20>)
 8007aec:	4604      	mov	r4, r0
 8007aee:	4608      	mov	r0, r1
 8007af0:	4611      	mov	r1, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7f9 fbcb 	bl	8001292 <_write>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_write_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_write_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	200002e4 	.word	0x200002e4

08007b0c <_close_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	; (8007b28 <_close_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7f9 fbd7 	bl	80012ca <_close>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_close_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_close_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	200002e4 	.word	0x200002e4

08007b2c <_fstat_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	; (8007b4c <_fstat_r+0x20>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	f7f9 fbd2 	bl	80012e2 <_fstat>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d102      	bne.n	8007b48 <_fstat_r+0x1c>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	b103      	cbz	r3, 8007b48 <_fstat_r+0x1c>
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	bd38      	pop	{r3, r4, r5, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200002e4 	.word	0x200002e4

08007b50 <_isatty_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_isatty_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7f9 fbd1 	bl	8001302 <_isatty>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_isatty_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_isatty_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	200002e4 	.word	0x200002e4

08007b70 <_lseek_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_lseek_r+0x20>)
 8007b74:	4604      	mov	r4, r0
 8007b76:	4608      	mov	r0, r1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7f9 fbca 	bl	8001318 <_lseek>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_lseek_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_lseek_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	200002e4 	.word	0x200002e4

08007b94 <_read_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_read_r+0x20>)
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7f9 fb58 	bl	8001258 <_read>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_read_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_read_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200002e4 	.word	0x200002e4

08007bb8 <_init>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr

08007bc4 <_fini>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	bf00      	nop
 8007bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bca:	bc08      	pop	{r3}
 8007bcc:	469e      	mov	lr, r3
 8007bce:	4770      	bx	lr
